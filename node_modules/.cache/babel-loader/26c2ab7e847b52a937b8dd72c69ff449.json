{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativeui\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, ContextualBalloon, clickOutsideHandler } from 'ckeditor5/src/ui';\nimport TextAlternativeFormView from './ui/textalternativeformview';\nimport { repositionContextualBalloon, getBalloonPositionData } from '../image/ui/utils';\n/**\n * The image text alternative UI plugin.\n *\n * The plugin uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageTextAlternativeUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ContextualBalloon];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageTextAlternativeUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    this._createButton();\n\n    this._createForm();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy(); // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\n    this._form.destroy();\n  }\n  /**\n   * Creates a button showing the balloon panel for changing the image text alternative and\n   * registers it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n   *\n   * @private\n   */\n\n\n  _createButton() {\n    const editor = this.editor;\n    const t = editor.t;\n    editor.ui.componentFactory.add('imageTextAlternative', locale => {\n      const command = editor.commands.get('imageTextAlternative');\n      const view = new ButtonView(locale);\n      view.set({\n        label: t('Change image text alternative'),\n        icon: icons.lowVision,\n        tooltip: true\n      });\n      view.bind('isEnabled').to(command, 'isEnabled');\n      this.listenTo(view, 'execute', () => {\n        this._showForm();\n      });\n      return view;\n    });\n  }\n  /**\n   * Creates the {@link module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n   * form.\n   *\n   * @private\n   */\n\n\n  _createForm() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    const imageUtils = editor.plugins.get('ImageUtils');\n    /**\n     * The contextual balloon plugin instance.\n     *\n     * @private\n     * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n     */\n\n    this._balloon = this.editor.plugins.get('ContextualBalloon');\n    /**\n     * A form containing a textarea and buttons, used to change the `alt` text value.\n     *\n     * @member {module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n     */\n\n    this._form = new TextAlternativeFormView(editor.locale); // Render the form so its #element is available for clickOutsideHandler.\n\n    this._form.render();\n\n    this.listenTo(this._form, 'submit', () => {\n      editor.execute('imageTextAlternative', {\n        newValue: this._form.labeledInput.fieldView.element.value\n      });\n\n      this._hideForm(true);\n    });\n    this.listenTo(this._form, 'cancel', () => {\n      this._hideForm(true);\n    }); // Close the form on Esc key press.\n\n    this._form.keystrokes.set('Esc', (data, cancel) => {\n      this._hideForm(true);\n\n      cancel();\n    }); // Reposition the balloon or hide the form if an image widget is no longer selected.\n\n\n    this.listenTo(editor.ui, 'update', () => {\n      if (!imageUtils.getClosestSelectedImageWidget(viewDocument.selection)) {\n        this._hideForm(true);\n      } else if (this._isVisible) {\n        repositionContextualBalloon(editor);\n      }\n    }); // Close on click outside of balloon panel element.\n\n    clickOutsideHandler({\n      emitter: this._form,\n      activator: () => this._isVisible,\n      contextElements: [this._balloon.view.element],\n      callback: () => this._hideForm()\n    });\n  }\n  /**\n   * Shows the {@link #_form} in the {@link #_balloon}.\n   *\n   * @private\n   */\n\n\n  _showForm() {\n    if (this._isVisible) {\n      return;\n    }\n\n    const editor = this.editor;\n    const command = editor.commands.get('imageTextAlternative');\n    const labeledInput = this._form.labeledInput;\n\n    this._form.disableCssTransitions();\n\n    if (!this._isInBalloon) {\n      this._balloon.add({\n        view: this._form,\n        position: getBalloonPositionData(editor)\n      });\n    } // Make sure that each time the panel shows up, the field remains in sync with the value of\n    // the command. If the user typed in the input, then canceled the balloon (`labeledInput#value`\n    // stays unaltered) and re-opened it without changing the value of the command, they would see the\n    // old value instead of the actual value of the command.\n    // https://github.com/ckeditor/ckeditor5-image/issues/114\n\n\n    labeledInput.fieldView.value = labeledInput.fieldView.element.value = command.value || '';\n\n    this._form.labeledInput.fieldView.select();\n\n    this._form.enableCssTransitions();\n  }\n  /**\n   * Removes the {@link #_form} from the {@link #_balloon}.\n   *\n   * @param {Boolean} [focusEditable=false] Controls whether the editing view is focused afterwards.\n   * @private\n   */\n\n\n  _hideForm(focusEditable) {\n    if (!this._isInBalloon) {\n      return;\n    } // Blur the input element before removing it from DOM to prevent issues in some browsers.\n    // See https://github.com/ckeditor/ckeditor5/issues/1501.\n\n\n    if (this._form.focusTracker.isFocused) {\n      this._form.saveButtonView.focus();\n    }\n\n    this._balloon.remove(this._form);\n\n    if (focusEditable) {\n      this.editor.editing.view.focus();\n    }\n  }\n  /**\n   * Returns `true` when the {@link #_form} is the visible view in the {@link #_balloon}.\n   *\n   * @private\n   * @type {Boolean}\n   */\n\n\n  get _isVisible() {\n    return this._balloon.visibleView === this._form;\n  }\n  /**\n   * Returns `true` when the {@link #_form} is in the {@link #_balloon}.\n   *\n   * @private\n   * @type {Boolean}\n   */\n\n\n  get _isInBalloon() {\n    return this._balloon.hasView(this._form);\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/imagetextalternativeui.js"],"names":["Plugin","icons","ButtonView","ContextualBalloon","clickOutsideHandler","TextAlternativeFormView","repositionContextualBalloon","getBalloonPositionData","ImageTextAlternativeUI","requires","pluginName","init","_createButton","_createForm","destroy","_form","editor","t","ui","componentFactory","add","locale","command","commands","get","view","set","label","icon","lowVision","tooltip","bind","to","listenTo","_showForm","editing","viewDocument","document","imageUtils","plugins","_balloon","render","execute","newValue","labeledInput","fieldView","element","value","_hideForm","keystrokes","data","cancel","getClosestSelectedImageWidget","selection","_isVisible","emitter","activator","contextElements","callback","disableCssTransitions","_isInBalloon","position","select","enableCssTransitions","focusEditable","focusTracker","isFocused","saveButtonView","focus","remove","visibleView","hasView"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,oBAA9B;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,mBAAxC,QAAmE,kBAAnE;AAEA,OAAOC,uBAAP,MAAoC,8BAApC;AACA,SAASC,2BAAT,EAAsCC,sBAAtC,QAAoE,mBAApE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,sBAAN,SAAqCR,MAArC,CAA4C;AAC1D;AACD;AACA;AACoB,aAARS,QAAQ,GAAG;AACrB,WAAO,CAAEN,iBAAF,CAAP;AACA;AAED;AACD;AACA;;;AACsB,aAAVO,UAAU,GAAG;AACvB,WAAO,wBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,SAAKC,aAAL;;AACA,SAAKC,WAAL;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMA,OAAN,GADS,CAGT;;AACA,SAAKC,KAAL,CAAWD,OAAX;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCF,EAAAA,aAAa,GAAG;AACf,UAAMI,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,CAAC,GAAGD,MAAM,CAACC,CAAjB;AAEAD,IAAAA,MAAM,CAACE,EAAP,CAAUC,gBAAV,CAA2BC,GAA3B,CAAgC,sBAAhC,EAAwDC,MAAM,IAAI;AACjE,YAAMC,OAAO,GAAGN,MAAM,CAACO,QAAP,CAAgBC,GAAhB,CAAqB,sBAArB,CAAhB;AACA,YAAMC,IAAI,GAAG,IAAIvB,UAAJ,CAAgBmB,MAAhB,CAAb;AAEAI,MAAAA,IAAI,CAACC,GAAL,CAAU;AACTC,QAAAA,KAAK,EAAEV,CAAC,CAAE,+BAAF,CADC;AAETW,QAAAA,IAAI,EAAE3B,KAAK,CAAC4B,SAFH;AAGTC,QAAAA,OAAO,EAAE;AAHA,OAAV;AAMAL,MAAAA,IAAI,CAACM,IAAL,CAAW,WAAX,EAAyBC,EAAzB,CAA6BV,OAA7B,EAAsC,WAAtC;AAEA,WAAKW,QAAL,CAAeR,IAAf,EAAqB,SAArB,EAAgC,MAAM;AACrC,aAAKS,SAAL;AACA,OAFD;AAIA,aAAOT,IAAP;AACA,KAjBD;AAkBA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCZ,EAAAA,WAAW,GAAG;AACb,UAAMG,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMS,IAAI,GAAGT,MAAM,CAACmB,OAAP,CAAeV,IAA5B;AACA,UAAMW,YAAY,GAAGX,IAAI,CAACY,QAA1B;AACA,UAAMC,UAAU,GAAGtB,MAAM,CAACuB,OAAP,CAAef,GAAf,CAAoB,YAApB,CAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKgB,QAAL,GAAgB,KAAKxB,MAAL,CAAYuB,OAAZ,CAAoBf,GAApB,CAAyB,mBAAzB,CAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKT,KAAL,GAAa,IAAIV,uBAAJ,CAA6BW,MAAM,CAACK,MAApC,CAAb,CAnBa,CAqBb;;AACA,SAAKN,KAAL,CAAW0B,MAAX;;AAEA,SAAKR,QAAL,CAAe,KAAKlB,KAApB,EAA2B,QAA3B,EAAqC,MAAM;AAC1CC,MAAAA,MAAM,CAAC0B,OAAP,CAAgB,sBAAhB,EAAwC;AACvCC,QAAAA,QAAQ,EAAE,KAAK5B,KAAL,CAAW6B,YAAX,CAAwBC,SAAxB,CAAkCC,OAAlC,CAA0CC;AADb,OAAxC;;AAIA,WAAKC,SAAL,CAAgB,IAAhB;AACA,KAND;AAQA,SAAKf,QAAL,CAAe,KAAKlB,KAApB,EAA2B,QAA3B,EAAqC,MAAM;AAC1C,WAAKiC,SAAL,CAAgB,IAAhB;AACA,KAFD,EAhCa,CAoCb;;AACA,SAAKjC,KAAL,CAAWkC,UAAX,CAAsBvB,GAAtB,CAA2B,KAA3B,EAAkC,CAAEwB,IAAF,EAAQC,MAAR,KAAoB;AACrD,WAAKH,SAAL,CAAgB,IAAhB;;AACAG,MAAAA,MAAM;AACN,KAHD,EArCa,CA0Cb;;;AACA,SAAKlB,QAAL,CAAejB,MAAM,CAACE,EAAtB,EAA0B,QAA1B,EAAoC,MAAM;AACzC,UAAK,CAACoB,UAAU,CAACc,6BAAX,CAA0ChB,YAAY,CAACiB,SAAvD,CAAN,EAA2E;AAC1E,aAAKL,SAAL,CAAgB,IAAhB;AACA,OAFD,MAEO,IAAK,KAAKM,UAAV,EAAuB;AAC7BhD,QAAAA,2BAA2B,CAAEU,MAAF,CAA3B;AACA;AACD,KAND,EA3Ca,CAmDb;;AACAZ,IAAAA,mBAAmB,CAAE;AACpBmD,MAAAA,OAAO,EAAE,KAAKxC,KADM;AAEpByC,MAAAA,SAAS,EAAE,MAAM,KAAKF,UAFF;AAGpBG,MAAAA,eAAe,EAAE,CAAE,KAAKjB,QAAL,CAAcf,IAAd,CAAmBqB,OAArB,CAHG;AAIpBY,MAAAA,QAAQ,EAAE,MAAM,KAAKV,SAAL;AAJI,KAAF,CAAnB;AAMA;AAED;AACD;AACA;AACA;AACA;;;AACCd,EAAAA,SAAS,GAAG;AACX,QAAK,KAAKoB,UAAV,EAAuB;AACtB;AACA;;AAED,UAAMtC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMM,OAAO,GAAGN,MAAM,CAACO,QAAP,CAAgBC,GAAhB,CAAqB,sBAArB,CAAhB;AACA,UAAMoB,YAAY,GAAG,KAAK7B,KAAL,CAAW6B,YAAhC;;AAEA,SAAK7B,KAAL,CAAW4C,qBAAX;;AAEA,QAAK,CAAC,KAAKC,YAAX,EAA0B;AACzB,WAAKpB,QAAL,CAAcpB,GAAd,CAAmB;AAClBK,QAAAA,IAAI,EAAE,KAAKV,KADO;AAElB8C,QAAAA,QAAQ,EAAEtD,sBAAsB,CAAES,MAAF;AAFd,OAAnB;AAIA,KAhBU,CAkBX;AACA;AACA;AACA;AACA;;;AACA4B,IAAAA,YAAY,CAACC,SAAb,CAAuBE,KAAvB,GAA+BH,YAAY,CAACC,SAAb,CAAuBC,OAAvB,CAA+BC,KAA/B,GAAuCzB,OAAO,CAACyB,KAAR,IAAiB,EAAvF;;AAEA,SAAKhC,KAAL,CAAW6B,YAAX,CAAwBC,SAAxB,CAAkCiB,MAAlC;;AAEA,SAAK/C,KAAL,CAAWgD,oBAAX;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCf,EAAAA,SAAS,CAAEgB,aAAF,EAAkB;AAC1B,QAAK,CAAC,KAAKJ,YAAX,EAA0B;AACzB;AACA,KAHyB,CAK1B;AACA;;;AACA,QAAK,KAAK7C,KAAL,CAAWkD,YAAX,CAAwBC,SAA7B,EAAyC;AACxC,WAAKnD,KAAL,CAAWoD,cAAX,CAA0BC,KAA1B;AACA;;AAED,SAAK5B,QAAL,CAAc6B,MAAd,CAAsB,KAAKtD,KAA3B;;AAEA,QAAKiD,aAAL,EAAqB;AACpB,WAAKhD,MAAL,CAAYmB,OAAZ,CAAoBV,IAApB,CAAyB2C,KAAzB;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;;;AACe,MAAVd,UAAU,GAAG;AAChB,WAAO,KAAKd,QAAL,CAAc8B,WAAd,KAA8B,KAAKvD,KAA1C;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACiB,MAAZ6C,YAAY,GAAG;AAClB,WAAO,KAAKpB,QAAL,CAAc+B,OAAd,CAAuB,KAAKxD,KAA5B,CAAP;AACA;;AA9MyD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativeui\n */\n\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, ContextualBalloon, clickOutsideHandler } from 'ckeditor5/src/ui';\n\nimport TextAlternativeFormView from './ui/textalternativeformview';\nimport { repositionContextualBalloon, getBalloonPositionData } from '../image/ui/utils';\n\n/**\n * The image text alternative UI plugin.\n *\n * The plugin uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternativeUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageTextAlternativeUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tthis._createButton();\n\t\tthis._createForm();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\t\tthis._form.destroy();\n\t}\n\n\t/**\n\t * Creates a button showing the balloon panel for changing the image text alternative and\n\t * registers it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n\t *\n\t * @private\n\t */\n\t_createButton() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\teditor.ui.componentFactory.add( 'imageTextAlternative', locale => {\n\t\t\tconst command = editor.commands.get( 'imageTextAlternative' );\n\t\t\tconst view = new ButtonView( locale );\n\n\t\t\tview.set( {\n\t\t\t\tlabel: t( 'Change image text alternative' ),\n\t\t\t\ticon: icons.lowVision,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tview.bind( 'isEnabled' ).to( command, 'isEnabled' );\n\n\t\t\tthis.listenTo( view, 'execute', () => {\n\t\t\t\tthis._showForm();\n\t\t\t} );\n\n\t\t\treturn view;\n\t\t} );\n\t}\n\n\t/**\n\t * Creates the {@link module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n\t * form.\n\t *\n\t * @private\n\t */\n\t_createForm() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\n\t\t/**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n\t\tthis._balloon = this.editor.plugins.get( 'ContextualBalloon' );\n\n\t\t/**\n\t\t * A form containing a textarea and buttons, used to change the `alt` text value.\n\t\t *\n\t\t * @member {module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n\t\t */\n\t\tthis._form = new TextAlternativeFormView( editor.locale );\n\n\t\t// Render the form so its #element is available for clickOutsideHandler.\n\t\tthis._form.render();\n\n\t\tthis.listenTo( this._form, 'submit', () => {\n\t\t\teditor.execute( 'imageTextAlternative', {\n\t\t\t\tnewValue: this._form.labeledInput.fieldView.element.value\n\t\t\t} );\n\n\t\t\tthis._hideForm( true );\n\t\t} );\n\n\t\tthis.listenTo( this._form, 'cancel', () => {\n\t\t\tthis._hideForm( true );\n\t\t} );\n\n\t\t// Close the form on Esc key press.\n\t\tthis._form.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._hideForm( true );\n\t\t\tcancel();\n\t\t} );\n\n\t\t// Reposition the balloon or hide the form if an image widget is no longer selected.\n\t\tthis.listenTo( editor.ui, 'update', () => {\n\t\t\tif ( !imageUtils.getClosestSelectedImageWidget( viewDocument.selection ) ) {\n\t\t\t\tthis._hideForm( true );\n\t\t\t} else if ( this._isVisible ) {\n\t\t\t\trepositionContextualBalloon( editor );\n\t\t\t}\n\t\t} );\n\n\t\t// Close on click outside of balloon panel element.\n\t\tclickOutsideHandler( {\n\t\t\temitter: this._form,\n\t\t\tactivator: () => this._isVisible,\n\t\t\tcontextElements: [ this._balloon.view.element ],\n\t\t\tcallback: () => this._hideForm()\n\t\t} );\n\t}\n\n\t/**\n\t * Shows the {@link #_form} in the {@link #_balloon}.\n\t *\n\t * @private\n\t */\n\t_showForm() {\n\t\tif ( this._isVisible ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst command = editor.commands.get( 'imageTextAlternative' );\n\t\tconst labeledInput = this._form.labeledInput;\n\n\t\tthis._form.disableCssTransitions();\n\n\t\tif ( !this._isInBalloon ) {\n\t\t\tthis._balloon.add( {\n\t\t\t\tview: this._form,\n\t\t\t\tposition: getBalloonPositionData( editor )\n\t\t\t} );\n\t\t}\n\n\t\t// Make sure that each time the panel shows up, the field remains in sync with the value of\n\t\t// the command. If the user typed in the input, then canceled the balloon (`labeledInput#value`\n\t\t// stays unaltered) and re-opened it without changing the value of the command, they would see the\n\t\t// old value instead of the actual value of the command.\n\t\t// https://github.com/ckeditor/ckeditor5-image/issues/114\n\t\tlabeledInput.fieldView.value = labeledInput.fieldView.element.value = command.value || '';\n\n\t\tthis._form.labeledInput.fieldView.select();\n\n\t\tthis._form.enableCssTransitions();\n\t}\n\n\t/**\n\t * Removes the {@link #_form} from the {@link #_balloon}.\n\t *\n\t * @param {Boolean} [focusEditable=false] Controls whether the editing view is focused afterwards.\n\t * @private\n\t */\n\t_hideForm( focusEditable ) {\n\t\tif ( !this._isInBalloon ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Blur the input element before removing it from DOM to prevent issues in some browsers.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1501.\n\t\tif ( this._form.focusTracker.isFocused ) {\n\t\t\tthis._form.saveButtonView.focus();\n\t\t}\n\n\t\tthis._balloon.remove( this._form );\n\n\t\tif ( focusEditable ) {\n\t\t\tthis.editor.editing.view.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #_form} is the visible view in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _isVisible() {\n\t\treturn this._balloon.visibleView === this._form;\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #_form} is in the {@link #_balloon}.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _isInBalloon() {\n\t\treturn this._balloon.hasView( this._form );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}