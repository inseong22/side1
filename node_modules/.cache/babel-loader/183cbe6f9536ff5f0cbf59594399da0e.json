{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/fontfamilyediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport FontFamilyCommand from './fontfamilycommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_FAMILY } from '../utils';\n/**\n * The font family editing feature.\n *\n * It introduces the {@link module:font/fontfamily/fontfamilycommand~FontFamilyCommand command} and\n * the `fontFamily` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as an inline `<span>` element (`<span style=\"font-family: Arial\">`),\n * depending on the {@link module:font/fontfamily~FontFamilyConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontFamilyEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FontFamilyEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor); // Define default configuration using font families shortcuts.\n\n    editor.config.define(FONT_FAMILY, {\n      options: ['default', 'Arial, Helvetica, sans-serif', 'Courier New, Courier, monospace', 'Georgia, serif', 'Lucida Sans Unicode, Lucida Grande, sans-serif', 'Tahoma, Geneva, sans-serif', 'Times New Roman, Times, serif', 'Trebuchet MS, Helvetica, sans-serif', 'Verdana, Geneva, sans-serif'],\n      supportAllValues: false\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow fontFamily attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: FONT_FAMILY\n    });\n    editor.model.schema.setAttributeProperties(FONT_FAMILY, {\n      isFormatting: true,\n      copyOnEnter: true\n    }); // Get configured font family options without \"default\" option.\n\n    const options = normalizeOptions(editor.config.get('fontFamily.options')).filter(item => item.model);\n    const definition = buildDefinition(FONT_FAMILY, options); // Set-up the two-way conversion.\n\n    if (editor.config.get('fontFamily.supportAllValues')) {\n      this._prepareAnyValueConverters();\n\n      this._prepareCompatibilityConverter();\n    } else {\n      editor.conversion.attributeToElement(definition);\n    }\n\n    editor.commands.add(FONT_FAMILY, new FontFamilyCommand(editor));\n  }\n  /**\n   * These converters enable keeping any value found as `style=\"font-family: *\"` as a value of an attribute on a text even\n   * if it is not defined in the plugin configuration.\n   *\n   * @private\n   */\n\n\n  _prepareAnyValueConverters() {\n    const editor = this.editor;\n    editor.conversion.for('downcast').attributeToElement({\n      model: FONT_FAMILY,\n      view: (attributeValue, {\n        writer\n      }) => {\n        return writer.createAttributeElement('span', {\n          style: 'font-family:' + attributeValue\n        }, {\n          priority: 7\n        });\n      }\n    });\n    editor.conversion.for('upcast').elementToAttribute({\n      model: {\n        key: FONT_FAMILY,\n        value: viewElement => viewElement.getStyle('font-family')\n      },\n      view: {\n        name: 'span',\n        styles: {\n          'font-family': /.*/\n        }\n      }\n    });\n  }\n  /**\n   * Adds support for legacy `<font face=\"..\">` formatting.\n   *\n   * @private\n   */\n\n\n  _prepareCompatibilityConverter() {\n    const editor = this.editor;\n    editor.conversion.for('upcast').elementToAttribute({\n      view: {\n        name: 'font',\n        attributes: {\n          'face': /.*/\n        }\n      },\n      model: {\n        key: FONT_FAMILY,\n        value: viewElement => viewElement.getAttribute('face')\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/fontfamily/fontfamilyediting.js"],"names":["Plugin","FontFamilyCommand","normalizeOptions","buildDefinition","FONT_FAMILY","FontFamilyEditing","pluginName","constructor","editor","config","define","options","supportAllValues","init","model","schema","extend","allowAttributes","setAttributeProperties","isFormatting","copyOnEnter","get","filter","item","definition","_prepareAnyValueConverters","_prepareCompatibilityConverter","conversion","attributeToElement","commands","add","for","view","attributeValue","writer","createAttributeElement","style","priority","elementToAttribute","key","value","viewElement","getStyle","name","styles","attributes","getAttribute"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/fontfamilyediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\n\nimport FontFamilyCommand from './fontfamilycommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_FAMILY } from '../utils';\n\n/**\n * The font family editing feature.\n *\n * It introduces the {@link module:font/fontfamily/fontfamilycommand~FontFamilyCommand command} and\n * the `fontFamily` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as an inline `<span>` element (`<span style=\"font-family: Arial\">`),\n * depending on the {@link module:font/fontfamily~FontFamilyConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FontFamilyEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'FontFamilyEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t// Define default configuration using font families shortcuts.\n\t\teditor.config.define( FONT_FAMILY, {\n\t\t\toptions: [\n\t\t\t\t'default',\n\t\t\t\t'Arial, Helvetica, sans-serif',\n\t\t\t\t'Courier New, Courier, monospace',\n\t\t\t\t'Georgia, serif',\n\t\t\t\t'Lucida Sans Unicode, Lucida Grande, sans-serif',\n\t\t\t\t'Tahoma, Geneva, sans-serif',\n\t\t\t\t'Times New Roman, Times, serif',\n\t\t\t\t'Trebuchet MS, Helvetica, sans-serif',\n\t\t\t\t'Verdana, Geneva, sans-serif'\n\t\t\t],\n\t\t\tsupportAllValues: false\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow fontFamily attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: FONT_FAMILY } );\n\t\teditor.model.schema.setAttributeProperties( FONT_FAMILY, {\n\t\t\tisFormatting: true,\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\t// Get configured font family options without \"default\" option.\n\t\tconst options = normalizeOptions( editor.config.get( 'fontFamily.options' ) ).filter( item => item.model );\n\t\tconst definition = buildDefinition( FONT_FAMILY, options );\n\n\t\t// Set-up the two-way conversion.\n\t\tif ( editor.config.get( 'fontFamily.supportAllValues' ) ) {\n\t\t\tthis._prepareAnyValueConverters();\n\t\t\tthis._prepareCompatibilityConverter();\n\t\t} else {\n\t\t\teditor.conversion.attributeToElement( definition );\n\t\t}\n\n\t\teditor.commands.add( FONT_FAMILY, new FontFamilyCommand( editor ) );\n\t}\n\n\t/**\n\t * These converters enable keeping any value found as `style=\"font-family: *\"` as a value of an attribute on a text even\n\t * if it is not defined in the plugin configuration.\n\t *\n\t * @private\n\t */\n\t_prepareAnyValueConverters() {\n\t\tconst editor = this.editor;\n\n\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\t\tmodel: FONT_FAMILY,\n\t\t\tview: ( attributeValue, { writer } ) => {\n\t\t\t\treturn writer.createAttributeElement( 'span', { style: 'font-family:' + attributeValue }, { priority: 7 } );\n\t\t\t}\n\t\t} );\n\n\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tkey: FONT_FAMILY,\n\t\t\t\tvalue: viewElement => viewElement.getStyle( 'font-family' )\n\t\t\t},\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tstyles: {\n\t\t\t\t\t'font-family': /.*/\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Adds support for legacy `<font face=\"..\">` formatting.\n\t *\n\t * @private\n\t */\n\t_prepareCompatibilityConverter() {\n\t\tconst editor = this.editor;\n\n\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'font',\n\t\t\t\tattributes: {\n\t\t\t\t\t'face': /.*/\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: FONT_FAMILY,\n\t\t\t\tvalue: viewElement => viewElement.getAttribute( 'face' )\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}