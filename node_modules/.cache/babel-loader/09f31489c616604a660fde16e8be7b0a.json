{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/listediting\n */\nimport ListCommand from './listcommand';\nimport IndentCommand from './indentcommand';\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Enter } from 'ckeditor5/src/enter';\nimport { Delete } from 'ckeditor5/src/typing';\nimport { cleanList, cleanListItem, modelViewInsertion, modelViewChangeType, modelViewMergeAfterChangeType, modelViewMergeAfter, modelViewRemove, modelViewSplitOnInsert, modelViewChangeIndent, modelChangePostFixer, modelIndentPasteFixer, viewModelConverter, modelToViewPosition, viewToModelPosition } from './converters';\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ListEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ListEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [Enter, Delete];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Schema.\n    // Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n    // uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n    // If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n\n    editor.model.schema.register('listItem', {\n      inheritAllFrom: '$block',\n      allowAttributes: ['listType', 'listIndent']\n    }); // Converters.\n\n    const data = editor.data;\n    const editing = editor.editing;\n    editor.model.document.registerPostFixer(writer => modelChangePostFixer(editor.model, writer));\n    editing.mapper.registerViewToModelLength('li', getViewListItemLength);\n    data.mapper.registerViewToModelLength('li', getViewListItemLength);\n    editing.mapper.on('modelToViewPosition', modelToViewPosition(editing.view));\n    editing.mapper.on('viewToModelPosition', viewToModelPosition(editor.model));\n    data.mapper.on('modelToViewPosition', modelToViewPosition(editing.view));\n    editor.conversion.for('editingDowncast').add(dispatcher => {\n      dispatcher.on('insert', modelViewSplitOnInsert, {\n        priority: 'high'\n      });\n      dispatcher.on('insert:listItem', modelViewInsertion(editor.model));\n      dispatcher.on('attribute:listType:listItem', modelViewChangeType, {\n        priority: 'high'\n      });\n      dispatcher.on('attribute:listType:listItem', modelViewMergeAfterChangeType, {\n        priority: 'low'\n      });\n      dispatcher.on('attribute:listIndent:listItem', modelViewChangeIndent(editor.model));\n      dispatcher.on('remove:listItem', modelViewRemove(editor.model));\n      dispatcher.on('remove', modelViewMergeAfter, {\n        priority: 'low'\n      });\n    });\n    editor.conversion.for('dataDowncast').add(dispatcher => {\n      dispatcher.on('insert', modelViewSplitOnInsert, {\n        priority: 'high'\n      });\n      dispatcher.on('insert:listItem', modelViewInsertion(editor.model));\n    });\n    editor.conversion.for('upcast').add(dispatcher => {\n      dispatcher.on('element:ul', cleanList, {\n        priority: 'high'\n      });\n      dispatcher.on('element:ol', cleanList, {\n        priority: 'high'\n      });\n      dispatcher.on('element:li', cleanListItem, {\n        priority: 'high'\n      });\n      dispatcher.on('element:li', viewModelConverter);\n    }); // Fix indentation of pasted items.\n\n    editor.model.on('insertContent', modelIndentPasteFixer, {\n      priority: 'high'\n    }); // Register commands for numbered and bulleted list.\n\n    editor.commands.add('numberedList', new ListCommand(editor, 'numbered'));\n    editor.commands.add('bulletedList', new ListCommand(editor, 'bulleted')); // Register commands for indenting.\n\n    editor.commands.add('indentList', new IndentCommand(editor, 'forward'));\n    editor.commands.add('outdentList', new IndentCommand(editor, 'backward'));\n    const viewDocument = editing.view.document; // Overwrite default Enter key behavior.\n    // If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n\n    this.listenTo(viewDocument, 'enter', (evt, data) => {\n      const doc = this.editor.model.document;\n      const positionParent = doc.selection.getLastPosition().parent;\n\n      if (doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty) {\n        this.editor.execute('outdentList');\n        data.preventDefault();\n        evt.stop();\n      }\n    }, {\n      context: 'li'\n    }); // Overwrite default Backspace key behavior.\n    // If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n\n    this.listenTo(viewDocument, 'delete', (evt, data) => {\n      // Check conditions from those that require less computations like those immediately available.\n      if (data.direction !== 'backward') {\n        return;\n      }\n\n      const selection = this.editor.model.document.selection;\n\n      if (!selection.isCollapsed) {\n        return;\n      }\n\n      const firstPosition = selection.getFirstPosition();\n\n      if (!firstPosition.isAtStart) {\n        return;\n      }\n\n      const positionParent = firstPosition.parent;\n\n      if (positionParent.name !== 'listItem') {\n        return;\n      }\n\n      const previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\n\n      if (previousIsAListItem) {\n        return;\n      }\n\n      this.editor.execute('outdentList');\n      data.preventDefault();\n      evt.stop();\n    }, {\n      context: 'li'\n    });\n\n    const getCommandExecuter = commandName => {\n      return (data, cancel) => {\n        const command = this.editor.commands.get(commandName);\n\n        if (command.isEnabled) {\n          this.editor.execute(commandName);\n          cancel();\n        }\n      };\n    };\n\n    editor.keystrokes.set('Tab', getCommandExecuter('indentList'));\n    editor.keystrokes.set('Shift+Tab', getCommandExecuter('outdentList'));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    const commands = this.editor.commands;\n    const indent = commands.get('indent');\n    const outdent = commands.get('outdent');\n\n    if (indent) {\n      indent.registerChildCommand(commands.get('indentList'));\n    }\n\n    if (outdent) {\n      outdent.registerChildCommand(commands.get('outdentList'));\n    }\n  }\n\n}\n\nfunction getViewListItemLength(element) {\n  let length = 1;\n\n  for (const child of element.getChildren()) {\n    if (child.name == 'ul' || child.name == 'ol') {\n      for (const item of child.getChildren()) {\n        length += getViewListItemLength(item);\n      }\n    }\n  }\n\n  return length;\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-list/src/listediting.js"],"names":["ListCommand","IndentCommand","Plugin","Enter","Delete","cleanList","cleanListItem","modelViewInsertion","modelViewChangeType","modelViewMergeAfterChangeType","modelViewMergeAfter","modelViewRemove","modelViewSplitOnInsert","modelViewChangeIndent","modelChangePostFixer","modelIndentPasteFixer","viewModelConverter","modelToViewPosition","viewToModelPosition","ListEditing","pluginName","requires","init","editor","model","schema","register","inheritAllFrom","allowAttributes","data","editing","document","registerPostFixer","writer","mapper","registerViewToModelLength","getViewListItemLength","on","view","conversion","for","add","dispatcher","priority","commands","viewDocument","listenTo","evt","doc","positionParent","selection","getLastPosition","parent","isCollapsed","name","isEmpty","execute","preventDefault","stop","context","direction","firstPosition","getFirstPosition","isAtStart","previousIsAListItem","previousSibling","getCommandExecuter","commandName","cancel","command","get","isEnabled","keystrokes","set","afterInit","indent","outdent","registerChildCommand","element","length","child","getChildren","item"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/listediting\n */\n\nimport ListCommand from './listcommand';\nimport IndentCommand from './indentcommand';\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Enter } from 'ckeditor5/src/enter';\nimport { Delete } from 'ckeditor5/src/typing';\n\nimport {\n\tcleanList,\n\tcleanListItem,\n\tmodelViewInsertion,\n\tmodelViewChangeType,\n\tmodelViewMergeAfterChangeType,\n\tmodelViewMergeAfter,\n\tmodelViewRemove,\n\tmodelViewSplitOnInsert,\n\tmodelViewChangeIndent,\n\tmodelChangePostFixer,\n\tmodelIndentPasteFixer,\n\tviewModelConverter,\n\tmodelToViewPosition,\n\tviewToModelPosition\n} from './converters';\n\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ListEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Enter, Delete ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Schema.\n\t\t// Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n\t\t// uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n\t\t// If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n\t\teditor.model.schema.register( 'listItem', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n\t\t} );\n\n\t\t// Converters.\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\teditor.model.document.registerPostFixer( writer => modelChangePostFixer( editor.model, writer ) );\n\n\t\tediting.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t\tdata.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\n\t\tediting.mapper.on( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\t\tediting.mapper.on( 'viewToModelPosition', viewToModelPosition( editor.model ) );\n\t\tdata.mapper.on( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\t\t\tdispatcher.on( 'insert:listItem', modelViewInsertion( editor.model ) );\n\t\t\t\tdispatcher.on( 'attribute:listType:listItem', modelViewChangeType, { priority: 'high' } );\n\t\t\t\tdispatcher.on( 'attribute:listType:listItem', modelViewMergeAfterChangeType, { priority: 'low' } );\n\t\t\t\tdispatcher.on( 'attribute:listIndent:listItem', modelViewChangeIndent( editor.model ) );\n\t\t\t\tdispatcher.on( 'remove:listItem', modelViewRemove( editor.model ) );\n\t\t\t\tdispatcher.on( 'remove', modelViewMergeAfter, { priority: 'low' } );\n\t\t\t} );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\t\t\tdispatcher.on( 'insert:listItem', modelViewInsertion( editor.model ) );\n\t\t\t} );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on( 'element:ul', cleanList, { priority: 'high' } );\n\t\t\t\tdispatcher.on( 'element:ol', cleanList, { priority: 'high' } );\n\t\t\t\tdispatcher.on( 'element:li', cleanListItem, { priority: 'high' } );\n\t\t\t\tdispatcher.on( 'element:li', viewModelConverter );\n\t\t\t} );\n\n\t\t// Fix indentation of pasted items.\n\t\teditor.model.on( 'insertContent', modelIndentPasteFixer, { priority: 'high' } );\n\n\t\t// Register commands for numbered and bulleted list.\n\t\teditor.commands.add( 'numberedList', new ListCommand( editor, 'numbered' ) );\n\t\teditor.commands.add( 'bulletedList', new ListCommand( editor, 'bulleted' ) );\n\n\t\t// Register commands for indenting.\n\t\teditor.commands.add( 'indentList', new IndentCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'outdentList', new IndentCommand( editor, 'backward' ) );\n\n\t\tconst viewDocument = editing.view.document;\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition().parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty ) {\n\t\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: 'li' } );\n\n\t\t// Overwrite default Backspace key behavior.\n\t\t// If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t// Check conditions from those that require less computations like those immediately available.\n\t\t\tif ( data.direction !== 'backward' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selection = this.editor.model.document.selection;\n\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\t\tif ( !firstPosition.isAtStart ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst positionParent = firstPosition.parent;\n\n\t\t\tif ( positionParent.name !== 'listItem' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\n\n\t\t\tif ( previousIsAListItem ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: 'li' } );\n\n\t\tconst getCommandExecuter = commandName => {\n\t\t\treturn ( data, cancel ) => {\n\t\t\t\tconst command = this.editor.commands.get( commandName );\n\n\t\t\t\tif ( command.isEnabled ) {\n\t\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\teditor.keystrokes.set( 'Tab', getCommandExecuter( 'indentList' ) );\n\t\teditor.keystrokes.set( 'Shift+Tab', getCommandExecuter( 'outdentList' ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst commands = this.editor.commands;\n\n\t\tconst indent = commands.get( 'indent' );\n\t\tconst outdent = commands.get( 'outdent' );\n\n\t\tif ( indent ) {\n\t\t\tindent.registerChildCommand( commands.get( 'indentList' ) );\n\t\t}\n\n\t\tif ( outdent ) {\n\t\t\toutdent.registerChildCommand( commands.get( 'outdentList' ) );\n\t\t}\n\t}\n}\n\nfunction getViewListItemLength( element ) {\n\tlet length = 1;\n\n\tfor ( const child of element.getChildren() ) {\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\tfor ( const item of child.getChildren() ) {\n\t\t\t\tlength += getViewListItemLength( item );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn length;\n}\n"]},"metadata":{},"sourceType":"module"}