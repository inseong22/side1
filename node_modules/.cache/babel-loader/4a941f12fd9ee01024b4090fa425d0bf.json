{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativecommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The image text alternative command. It is used to change the `alt` attribute of `<imageBlock>` and `<imageInline>` model elements.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ImageTextAlternativeCommand extends Command {\n  /**\n   * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n   *\n   * @readonly\n   * @observable\n   * @member {String|Boolean} #value\n   */\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const editor = this.editor;\n    const imageUtils = editor.plugins.get('ImageUtils');\n    const element = imageUtils.getClosestSelectedImageElement(this.editor.model.document.selection);\n    this.isEnabled = !!element;\n\n    if (this.isEnabled && element.hasAttribute('alt')) {\n      this.value = element.getAttribute('alt');\n    } else {\n      this.value = false;\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} options\n   * @param {String} options.newValue The new value of the `alt` attribute to set.\n   */\n\n\n  execute(options) {\n    const editor = this.editor;\n    const imageUtils = editor.plugins.get('ImageUtils');\n    const model = editor.model;\n    const imageElement = imageUtils.getClosestSelectedImageElement(model.document.selection);\n    model.change(writer => {\n      writer.setAttribute('alt', options.newValue, imageElement);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/imagetextalternativecommand.js"],"names":["Command","ImageTextAlternativeCommand","refresh","editor","imageUtils","plugins","get","element","getClosestSelectedImageElement","model","document","selection","isEnabled","hasAttribute","value","getAttribute","execute","options","imageElement","change","writer","setAttribute","newValue"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,2BAAN,SAA0CD,OAA1C,CAAkD;AAChE;AACD;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACCE,EAAAA,OAAO,GAAG;AACT,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoB,YAApB,CAAnB;AACA,UAAMC,OAAO,GAAGH,UAAU,CAACI,8BAAX,CAA2C,KAAKL,MAAL,CAAYM,KAAZ,CAAkBC,QAAlB,CAA2BC,SAAtE,CAAhB;AAEA,SAAKC,SAAL,GAAiB,CAAC,CAACL,OAAnB;;AAEA,QAAK,KAAKK,SAAL,IAAkBL,OAAO,CAACM,YAAR,CAAsB,KAAtB,CAAvB,EAAuD;AACtD,WAAKC,KAAL,GAAaP,OAAO,CAACQ,YAAR,CAAsB,KAAtB,CAAb;AACA,KAFD,MAEO;AACN,WAAKD,KAAL,GAAa,KAAb;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,OAAO,CAAEC,OAAF,EAAY;AAClB,UAAMd,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoB,YAApB,CAAnB;AACA,UAAMG,KAAK,GAAGN,MAAM,CAACM,KAArB;AACA,UAAMS,YAAY,GAAGd,UAAU,CAACI,8BAAX,CAA2CC,KAAK,CAACC,QAAN,CAAeC,SAA1D,CAArB;AAEAF,IAAAA,KAAK,CAACU,MAAN,CAAcC,MAAM,IAAI;AACvBA,MAAAA,MAAM,CAACC,YAAP,CAAqB,KAArB,EAA4BJ,OAAO,CAACK,QAApC,EAA8CJ,YAA9C;AACA,KAFD;AAGA;;AA1C+D","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativecommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\n/**\n * The image text alternative command. It is used to change the `alt` attribute of `<imageBlock>` and `<imageInline>` model elements.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageTextAlternativeCommand extends Command {\n\t/**\n\t * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {String|Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\t\tconst element = imageUtils.getClosestSelectedImageElement( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = !!element;\n\n\t\tif ( this.isEnabled && element.hasAttribute( 'alt' ) ) {\n\t\t\tthis.value = element.getAttribute( 'alt' );\n\t\t} else {\n\t\t\tthis.value = false;\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options\n\t * @param {String} options.newValue The new value of the `alt` attribute to set.\n\t */\n\texecute( options ) {\n\t\tconst editor = this.editor;\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\t\tconst model = editor.model;\n\t\tconst imageElement = imageUtils.getClosestSelectedImageElement( model.document.selection );\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setAttribute( 'alt', options.newValue, imageElement );\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}