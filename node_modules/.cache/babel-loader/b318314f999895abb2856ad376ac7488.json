{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/difftochanges\n */\n\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<'equal'|'insert'|'delete'>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<Object>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges(diff, output) {\n  const changes = [];\n  let index = 0;\n  let lastOperation;\n  diff.forEach(change => {\n    if (change == 'equal') {\n      pushLast();\n      index++;\n    } else if (change == 'insert') {\n      if (isContinuationOf('insert')) {\n        lastOperation.values.push(output[index]);\n      } else {\n        pushLast();\n        lastOperation = {\n          type: 'insert',\n          index,\n          values: [output[index]]\n        };\n      }\n\n      index++;\n    } else\n      /* if ( change == 'delete' ) */\n      {\n        if (isContinuationOf('delete')) {\n          lastOperation.howMany++;\n        } else {\n          pushLast();\n          lastOperation = {\n            type: 'delete',\n            index,\n            howMany: 1\n          };\n        }\n      }\n  });\n  pushLast();\n  return changes;\n\n  function pushLast() {\n    if (lastOperation) {\n      changes.push(lastOperation);\n      lastOperation = null;\n    }\n  }\n\n  function isContinuationOf(expected) {\n    return lastOperation && lastOperation.type == expected;\n  }\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-utils/src/difftochanges.js"],"names":["diffToChanges","diff","output","changes","index","lastOperation","forEach","change","pushLast","isContinuationOf","values","push","type","howMany","expected"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,aAAT,CAAwBC,IAAxB,EAA8BC,MAA9B,EAAuC;AACrD,QAAMC,OAAO,GAAG,EAAhB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,aAAJ;AAEAJ,EAAAA,IAAI,CAACK,OAAL,CAAcC,MAAM,IAAI;AACvB,QAAKA,MAAM,IAAI,OAAf,EAAyB;AACxBC,MAAAA,QAAQ;AAERJ,MAAAA,KAAK;AACL,KAJD,MAIO,IAAKG,MAAM,IAAI,QAAf,EAA0B;AAChC,UAAKE,gBAAgB,CAAE,QAAF,CAArB,EAAoC;AACnCJ,QAAAA,aAAa,CAACK,MAAd,CAAqBC,IAArB,CAA2BT,MAAM,CAAEE,KAAF,CAAjC;AACA,OAFD,MAEO;AACNI,QAAAA,QAAQ;AAERH,QAAAA,aAAa,GAAG;AACfO,UAAAA,IAAI,EAAE,QADS;AAEfR,UAAAA,KAFe;AAGfM,UAAAA,MAAM,EAAE,CAAER,MAAM,CAAEE,KAAF,CAAR;AAHO,SAAhB;AAKA;;AAEDA,MAAAA,KAAK;AACL,KAdM;AAcA;AAAgC;AACtC,YAAKK,gBAAgB,CAAE,QAAF,CAArB,EAAoC;AACnCJ,UAAAA,aAAa,CAACQ,OAAd;AACA,SAFD,MAEO;AACNL,UAAAA,QAAQ;AAERH,UAAAA,aAAa,GAAG;AACfO,YAAAA,IAAI,EAAE,QADS;AAEfR,YAAAA,KAFe;AAGfS,YAAAA,OAAO,EAAE;AAHM,WAAhB;AAKA;AACD;AACD,GAhCD;AAkCAL,EAAAA,QAAQ;AAER,SAAOL,OAAP;;AAEA,WAASK,QAAT,GAAoB;AACnB,QAAKH,aAAL,EAAqB;AACpBF,MAAAA,OAAO,CAACQ,IAAR,CAAcN,aAAd;AACAA,MAAAA,aAAa,GAAG,IAAhB;AACA;AACD;;AAED,WAASI,gBAAT,CAA2BK,QAA3B,EAAsC;AACrC,WAAOT,aAAa,IAAIA,aAAa,CAACO,IAAd,IAAsBE,QAA9C;AACA;AACD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/difftochanges\n */\n\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<'equal'|'insert'|'delete'>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<Object>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges( diff, output ) {\n\tconst changes = [];\n\tlet index = 0;\n\tlet lastOperation;\n\n\tdiff.forEach( change => {\n\t\tif ( change == 'equal' ) {\n\t\t\tpushLast();\n\n\t\t\tindex++;\n\t\t} else if ( change == 'insert' ) {\n\t\t\tif ( isContinuationOf( 'insert' ) ) {\n\t\t\t\tlastOperation.values.push( output[ index ] );\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'insert',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalues: [ output[ index ] ]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tindex++;\n\t\t} else /* if ( change == 'delete' ) */ {\n\t\t\tif ( isContinuationOf( 'delete' ) ) {\n\t\t\t\tlastOperation.howMany++;\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'delete',\n\t\t\t\t\tindex,\n\t\t\t\t\thowMany: 1\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} );\n\n\tpushLast();\n\n\treturn changes;\n\n\tfunction pushLast() {\n\t\tif ( lastOperation ) {\n\t\t\tchanges.push( lastOperation );\n\t\t\tlastOperation = null;\n\t\t}\n\t}\n\n\tfunction isContinuationOf( expected ) {\n\t\treturn lastOperation && lastOperation.type == expected;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}