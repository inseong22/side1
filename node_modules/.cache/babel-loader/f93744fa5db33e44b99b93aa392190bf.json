{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetoolbar\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { WidgetToolbarRepository } from 'ckeditor5/src/widget';\nimport ImageUtils from './imageutils';\nimport { isObject } from 'lodash-es';\n/**\n * The image toolbar plugin. It creates and manages the image toolbar (the toolbar displayed when an image is selected).\n *\n * For an overview, check the {@glink features/images/images-overview#image-contextual-toolbar image contextual toolbar} documentation.\n *\n * Instances of toolbar components (e.g. buttons) are created using the editor's\n * {@link module:ui/componentfactory~ComponentFactory component factory}\n * based on the {@link module:image/image~ImageConfig#toolbar `image.toolbar` configuration option}.\n *\n * The toolbar uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageToolbar extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [WidgetToolbarRepository, ImageUtils];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageToolbar';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    const editor = this.editor;\n    const t = editor.t;\n    const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n    const imageUtils = editor.plugins.get('ImageUtils');\n    widgetToolbarRepository.register('image', {\n      ariaLabel: t('Image toolbar'),\n      items: normalizeDeclarativeConfig(editor.config.get('image.toolbar') || []),\n      getRelatedElement: selection => imageUtils.getClosestSelectedImageWidget(selection)\n    });\n  }\n\n}\n/**\n * Items to be placed in the image toolbar.\n * This option is used by the {@link module:image/imagetoolbar~ImageToolbar} feature.\n *\n * Assuming that you use the following features:\n *\n * * {@link module:image/imagestyle~ImageStyle} (with a default configuration),\n * * {@link module:image/imagetextalternative~ImageTextAlternative},\n * * {@link module:image/imagecaption~ImageCaption},\n *\n * the following toolbar items will be available in {@link module:ui/componentfactory~ComponentFactory}:\n * * `'imageTextAlternative'`,\n * * `'toggleImageCaption'`,\n * * {@link module:image/image~ImageConfig#styles buttons provided by the `ImageStyle` plugin},\n * * {@link module:image/imagestyle/utils~DEFAULT_DROPDOWN_DEFINITIONS drop-downs provided by the `ImageStyle` plugin},\n *\n * so you can configure the toolbar like this:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [\n *\t \t\t\t'imageStyle:inline', 'imageStyle:wrapText', 'imageStyle:breakText', '|',\n *\t\t\t\t'toggleImageCaption', 'imageTextAlternative'\n *\t\t\t]\n *\t\t};\n *\n * Besides that, the `ImageStyle` plugin allows to define a\n * {@link module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition custom drop-down} while configuring the toolbar.\n *\n * The same items can also be used in the {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:image/image~ImageConfig#toolbar\n */\n// Convert the dropdown definitions to their keys registered in the ComponentFactory.\n// The registration precess should be handled by the plugin which handles the UI of a particular feature.\n//\n// @param {Array.<String|module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>} config\n//\n// @returns {Array.<String>}\n\nfunction normalizeDeclarativeConfig(config) {\n  return config.map(item => isObject(item) ? item.name : item);\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imagetoolbar.js"],"names":["Plugin","WidgetToolbarRepository","ImageUtils","isObject","ImageToolbar","requires","pluginName","afterInit","editor","t","widgetToolbarRepository","plugins","get","imageUtils","register","ariaLabel","items","normalizeDeclarativeConfig","config","getRelatedElement","selection","getClosestSelectedImageWidget","map","item","name"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,uBAAT,QAAwC,sBAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BJ,MAA3B,CAAkC;AAChD;AACD;AACA;AACoB,aAARK,QAAQ,GAAG;AACrB,WAAO,CAAEJ,uBAAF,EAA2BC,UAA3B,CAAP;AACA;AAED;AACD;AACA;;;AACsB,aAAVI,UAAU,GAAG;AACvB,WAAO,cAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,SAAS,GAAG;AACX,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,CAAC,GAAGD,MAAM,CAACC,CAAjB;AACA,UAAMC,uBAAuB,GAAGF,MAAM,CAACG,OAAP,CAAeC,GAAf,CAAoBX,uBAApB,CAAhC;AACA,UAAMY,UAAU,GAAGL,MAAM,CAACG,OAAP,CAAeC,GAAf,CAAoB,YAApB,CAAnB;AAEAF,IAAAA,uBAAuB,CAACI,QAAxB,CAAkC,OAAlC,EAA2C;AAC1CC,MAAAA,SAAS,EAAEN,CAAC,CAAE,eAAF,CAD8B;AAE1CO,MAAAA,KAAK,EAAEC,0BAA0B,CAAET,MAAM,CAACU,MAAP,CAAcN,GAAd,CAAmB,eAAnB,KAAwC,EAA1C,CAFS;AAG1CO,MAAAA,iBAAiB,EAAEC,SAAS,IAAIP,UAAU,CAACQ,6BAAX,CAA0CD,SAA1C;AAHU,KAA3C;AAKA;;AA7B+C;AAgCjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASH,0BAAT,CAAqCC,MAArC,EAA8C;AAC7C,SAAOA,MAAM,CAACI,GAAP,CAAYC,IAAI,IAAIpB,QAAQ,CAAEoB,IAAF,CAAR,GAAmBA,IAAI,CAACC,IAAxB,GAA+BD,IAAnD,CAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetoolbar\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { WidgetToolbarRepository } from 'ckeditor5/src/widget';\nimport ImageUtils from './imageutils';\nimport { isObject } from 'lodash-es';\n\n/**\n * The image toolbar plugin. It creates and manages the image toolbar (the toolbar displayed when an image is selected).\n *\n * For an overview, check the {@glink features/images/images-overview#image-contextual-toolbar image contextual toolbar} documentation.\n *\n * Instances of toolbar components (e.g. buttons) are created using the editor's\n * {@link module:ui/componentfactory~ComponentFactory component factory}\n * based on the {@link module:image/image~ImageConfig#toolbar `image.toolbar` configuration option}.\n *\n * The toolbar uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageToolbar extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ WidgetToolbarRepository, ImageUtils ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageToolbar';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\n\t\twidgetToolbarRepository.register( 'image', {\n\t\t\tariaLabel: t( 'Image toolbar' ),\n\t\t\titems: normalizeDeclarativeConfig( editor.config.get( 'image.toolbar' ) || [] ),\n\t\t\tgetRelatedElement: selection => imageUtils.getClosestSelectedImageWidget( selection )\n\t\t} );\n\t}\n}\n\n/**\n * Items to be placed in the image toolbar.\n * This option is used by the {@link module:image/imagetoolbar~ImageToolbar} feature.\n *\n * Assuming that you use the following features:\n *\n * * {@link module:image/imagestyle~ImageStyle} (with a default configuration),\n * * {@link module:image/imagetextalternative~ImageTextAlternative},\n * * {@link module:image/imagecaption~ImageCaption},\n *\n * the following toolbar items will be available in {@link module:ui/componentfactory~ComponentFactory}:\n * * `'imageTextAlternative'`,\n * * `'toggleImageCaption'`,\n * * {@link module:image/image~ImageConfig#styles buttons provided by the `ImageStyle` plugin},\n * * {@link module:image/imagestyle/utils~DEFAULT_DROPDOWN_DEFINITIONS drop-downs provided by the `ImageStyle` plugin},\n *\n * so you can configure the toolbar like this:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [\n *\t \t\t\t'imageStyle:inline', 'imageStyle:wrapText', 'imageStyle:breakText', '|',\n *\t\t\t\t'toggleImageCaption', 'imageTextAlternative'\n *\t\t\t]\n *\t\t};\n *\n * Besides that, the `ImageStyle` plugin allows to define a\n * {@link module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition custom drop-down} while configuring the toolbar.\n *\n * The same items can also be used in the {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:image/image~ImageConfig#toolbar\n */\n\n// Convert the dropdown definitions to their keys registered in the ComponentFactory.\n// The registration precess should be handled by the plugin which handles the UI of a particular feature.\n//\n// @param {Array.<String|module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>} config\n//\n// @returns {Array.<String>}\nfunction normalizeDeclarativeConfig( config ) {\n\treturn config.map( item => isObject( item ) ? item.name : item );\n}\n"]},"metadata":{},"sourceType":"module"}