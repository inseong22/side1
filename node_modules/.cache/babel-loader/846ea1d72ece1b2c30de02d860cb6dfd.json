{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/ui/textalternativeformview\n */\nimport { ButtonView, FocusCycler, LabeledFieldView, View, ViewCollection, createLabeledInputText, injectCssTransitionDisabler, submitHandler } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\nimport '../../../theme/textalternativeform.css'; // See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\n\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\n/**\n * The TextAlternativeFormView class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class TextAlternativeFormView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const t = this.locale.t;\n    /**\n     * Tracks information about the DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * An input with a label.\n     *\n     * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView} #labeledInput\n     */\n\n    this.labeledInput = this._createLabeledInputView();\n    /**\n     * A button used to submit the form.\n     *\n     * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\n     */\n\n    this.saveButtonView = this._createButton(t('Save'), icons.check, 'ck-button-save');\n    this.saveButtonView.type = 'submit';\n    /**\n     * A button used to cancel the form.\n     *\n     * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\n     */\n\n    this.cancelButtonView = this._createButton(t('Cancel'), icons.cancel, 'ck-button-cancel', 'cancel');\n    /**\n     * A collection of views which can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate form fields backwards using the Shift + Tab keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the Tab key.\n        focusNext: 'tab'\n      }\n    });\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-text-alternative-form', 'ck-responsive-form'],\n        // https://github.com/ckeditor/ckeditor5-image/issues/40\n        tabindex: '-1'\n      },\n      children: [this.labeledInput, this.saveButtonView, this.cancelButtonView]\n    });\n    injectCssTransitionDisabler(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.keystrokes.listenTo(this.element);\n    submitHandler({\n      view: this\n    });\n    [this.labeledInput, this.saveButtonView, this.cancelButtonView].forEach(v => {\n      // Register the view as focusable.\n      this._focusables.add(v); // Register the view in the focus tracker.\n\n\n      this.focusTracker.add(v.element);\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n  /**\n   * Creates the button view.\n   *\n   * @private\n   * @param {String} label The button label\n   * @param {String} icon The button's icon.\n   * @param {String} className The additional button CSS class name.\n   * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\n   * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n   */\n\n\n  _createButton(label, icon, className, eventName) {\n    const button = new ButtonView(this.locale);\n    button.set({\n      label,\n      icon,\n      tooltip: true\n    });\n    button.extendTemplate({\n      attributes: {\n        class: className\n      }\n    });\n\n    if (eventName) {\n      button.delegate('execute').to(this, eventName);\n    }\n\n    return button;\n  }\n  /**\n   * Creates an input with a label.\n   *\n   * @private\n   * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} Labeled field view instance.\n   */\n\n\n  _createLabeledInputView() {\n    const t = this.locale.t;\n    const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n    labeledInput.label = t('Text alternative');\n    return labeledInput;\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/ui/textalternativeformview.js"],"names":["ButtonView","FocusCycler","LabeledFieldView","View","ViewCollection","createLabeledInputText","injectCssTransitionDisabler","submitHandler","FocusTracker","KeystrokeHandler","icons","TextAlternativeFormView","constructor","locale","t","focusTracker","keystrokes","labeledInput","_createLabeledInputView","saveButtonView","_createButton","check","type","cancelButtonView","cancel","_focusables","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","setTemplate","tag","attributes","class","tabindex","children","render","listenTo","element","view","forEach","v","add","destroy","label","icon","className","eventName","button","set","tooltip","extendTemplate","delegate","to"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/ui/textalternativeformview\n */\n\nimport {\n\tButtonView,\n\tFocusCycler,\n\tLabeledFieldView,\n\tView,\n\tViewCollection,\n\tcreateLabeledInputText,\n\tinjectCssTransitionDisabler,\n\tsubmitHandler\n} from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\n\nimport '../../../theme/textalternativeform.css';\n\n// See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\n\n/**\n * The TextAlternativeFormView class.\n *\n * @extends module:ui/view~View\n */\nexport default class TextAlternativeFormView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst t = this.locale.t;\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * An input with a label.\n\t\t *\n\t\t * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView} #labeledInput\n\t\t */\n\t\tthis.labeledInput = this._createLabeledInputView();\n\n\t\t/**\n\t\t * A button used to submit the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\n\t\t */\n\t\tthis.saveButtonView = this._createButton( t( 'Save' ), icons.check, 'ck-button-save' );\n\t\tthis.saveButtonView.type = 'submit';\n\n\t\t/**\n\t\t * A button used to cancel the form.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\n\t\t */\n\t\tthis.cancelButtonView = this._createButton( t( 'Cancel' ), icons.cancel, 'ck-button-cancel', 'cancel' );\n\n\t\t/**\n\t\t * A collection of views which can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._focusables = new ViewCollection();\n\n\t\t/**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-text-alternative-form',\n\t\t\t\t\t'ck-responsive-form'\n\t\t\t\t],\n\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-image/issues/40\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\tthis.labeledInput,\n\t\t\t\tthis.saveButtonView,\n\t\t\t\tthis.cancelButtonView\n\t\t\t]\n\t\t} );\n\n\t\tinjectCssTransitionDisabler( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\tsubmitHandler( { view: this } );\n\n\t\t[ this.labeledInput, this.saveButtonView, this.cancelButtonView ]\n\t\t\t.forEach( v => {\n\t\t\t\t// Register the view as focusable.\n\t\t\t\tthis._focusables.add( v );\n\n\t\t\t\t// Register the view in the focus tracker.\n\t\t\t\tthis.focusTracker.add( v.element );\n\t\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Creates the button view.\n\t *\n\t * @private\n\t * @param {String} label The button label\n\t * @param {String} icon The button's icon.\n\t * @param {String} className The additional button CSS class name.\n\t * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n\t_createButton( label, icon, className, eventName ) {\n\t\tconst button = new ButtonView( this.locale );\n\n\t\tbutton.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\tbutton.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: className\n\t\t\t}\n\t\t} );\n\n\t\tif ( eventName ) {\n\t\t\tbutton.delegate( 'execute' ).to( this, eventName );\n\t\t}\n\n\t\treturn button;\n\t}\n\n\t/**\n\t * Creates an input with a label.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} Labeled field view instance.\n\t */\n\t_createLabeledInputView() {\n\t\tconst t = this.locale.t;\n\t\tconst labeledInput = new LabeledFieldView( this.locale, createLabeledInputText );\n\n\t\tlabeledInput.label = t( 'Text alternative' );\n\n\t\treturn labeledInput;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}