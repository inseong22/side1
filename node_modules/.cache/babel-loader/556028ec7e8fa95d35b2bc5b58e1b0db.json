{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/utils\n */\nimport ColorTableView from './ui/colortableview';\n/**\n * The name of the font size plugin.\n */\n\nexport const FONT_SIZE = 'fontSize';\n/**\n * The name of the font family plugin.\n */\n\nexport const FONT_FAMILY = 'fontFamily';\n/**\n * The name of the font color plugin.\n */\n\nexport const FONT_COLOR = 'fontColor';\n/**\n * The name of the font background color plugin.\n */\n\nexport const FONT_BACKGROUND_COLOR = 'fontBackgroundColor';\n/**\n * Builds a proper {@link module:engine/conversion/conversion~ConverterDefinition converter definition} out of input data.\n *\n * @param {String} modelAttributeKey Key\n * @param {Array.<module:font/fontfamily~FontFamilyOption>|Array.<module:font/fontsize~FontSizeOption>} options\n * @returns {module:engine/conversion/conversion~ConverterDefinition}\n */\n\nexport function buildDefinition(modelAttributeKey, options) {\n  const definition = {\n    model: {\n      key: modelAttributeKey,\n      values: []\n    },\n    view: {},\n    upcastAlso: {}\n  };\n\n  for (const option of options) {\n    definition.model.values.push(option.model);\n    definition.view[option.model] = option.view;\n\n    if (option.upcastAlso) {\n      definition.upcastAlso[option.model] = option.upcastAlso;\n    }\n  }\n\n  return definition;\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for upcasting data to the model.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n * @return {String}\n */\n\nexport function renderUpcastAttribute(styleAttr) {\n  return viewElement => normalizeColorCode(viewElement.getStyle(styleAttr));\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for downcasting a color attribute to a `<span>` element.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n */\n\nexport function renderDowncastElement(styleAttr) {\n  return (modelAttributeValue, {\n    writer\n  }) => writer.createAttributeElement('span', {\n    style: `${styleAttr}:${modelAttributeValue}`\n  }, {\n    priority: 7\n  });\n}\n/**\n * A helper that adds {@link module:font/ui/colortableview~ColorTableView} to the color dropdown with proper initial values.\n *\n * @param {Object} config The configuration object.\n * @param {module:ui/dropdown/dropdownview~DropdownView} config.dropdownView The dropdown view to which\n * a {@link module:font/ui/colortableview~ColorTableView} will be added.\n * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} config.colors An array with definitions\n * representing colors to be displayed in the color table.\n * @param {String} config.removeButtonLabel The label for the button responsible for removing the color.\n * @param {String} config.documentColorsLabel The label for the section with document colors.\n * @param {String} config.documentColorsCount The number of document colors inside the dropdown.\n * @returns {module:font/ui/colortableview~ColorTableView} The new color table view.\n */\n\nexport function addColorTableToDropdown({\n  dropdownView,\n  colors,\n  columns,\n  removeButtonLabel,\n  documentColorsLabel,\n  documentColorsCount\n}) {\n  const locale = dropdownView.locale;\n  const colorTableView = new ColorTableView(locale, {\n    colors,\n    columns,\n    removeButtonLabel,\n    documentColorsLabel,\n    documentColorsCount\n  });\n  dropdownView.colorTableView = colorTableView;\n  dropdownView.panelView.children.add(colorTableView);\n  colorTableView.delegate('execute').to(dropdownView, 'execute');\n  return colorTableView;\n} // Fixes the color value string.\n//\n// @param {String} value\n// @returns {String}\n\nfunction normalizeColorCode(value) {\n  return value.replace(/\\s/g, '');\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/utils.js"],"names":["ColorTableView","FONT_SIZE","FONT_FAMILY","FONT_COLOR","FONT_BACKGROUND_COLOR","buildDefinition","modelAttributeKey","options","definition","model","key","values","view","upcastAlso","option","push","renderUpcastAttribute","styleAttr","viewElement","normalizeColorCode","getStyle","renderDowncastElement","modelAttributeValue","writer","createAttributeElement","style","priority","addColorTableToDropdown","dropdownView","colors","columns","removeButtonLabel","documentColorsLabel","documentColorsCount","locale","colorTableView","panelView","children","add","delegate","to","value","replace"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/utils\n */\n\nimport ColorTableView from './ui/colortableview';\n\n/**\n * The name of the font size plugin.\n */\nexport const FONT_SIZE = 'fontSize';\n\n/**\n * The name of the font family plugin.\n */\nexport const FONT_FAMILY = 'fontFamily';\n\n/**\n * The name of the font color plugin.\n */\nexport const FONT_COLOR = 'fontColor';\n\n/**\n * The name of the font background color plugin.\n */\nexport const FONT_BACKGROUND_COLOR = 'fontBackgroundColor';\n\n/**\n * Builds a proper {@link module:engine/conversion/conversion~ConverterDefinition converter definition} out of input data.\n *\n * @param {String} modelAttributeKey Key\n * @param {Array.<module:font/fontfamily~FontFamilyOption>|Array.<module:font/fontsize~FontSizeOption>} options\n * @returns {module:engine/conversion/conversion~ConverterDefinition}\n */\nexport function buildDefinition( modelAttributeKey, options ) {\n\tconst definition = {\n\t\tmodel: {\n\t\t\tkey: modelAttributeKey,\n\t\t\tvalues: []\n\t\t},\n\t\tview: {},\n\t\tupcastAlso: {}\n\t};\n\n\tfor ( const option of options ) {\n\t\tdefinition.model.values.push( option.model );\n\t\tdefinition.view[ option.model ] = option.view;\n\n\t\tif ( option.upcastAlso ) {\n\t\t\tdefinition.upcastAlso[ option.model ] = option.upcastAlso;\n\t\t}\n\t}\n\n\treturn definition;\n}\n\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for upcasting data to the model.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n * @return {String}\n */\nexport function renderUpcastAttribute( styleAttr ) {\n\treturn viewElement => normalizeColorCode( viewElement.getStyle( styleAttr ) );\n}\n\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for downcasting a color attribute to a `<span>` element.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n */\nexport function renderDowncastElement( styleAttr ) {\n\treturn ( modelAttributeValue, { writer } ) => writer.createAttributeElement( 'span', {\n\t\tstyle: `${ styleAttr }:${ modelAttributeValue }`\n\t}, { priority: 7 } );\n}\n\n/**\n * A helper that adds {@link module:font/ui/colortableview~ColorTableView} to the color dropdown with proper initial values.\n *\n * @param {Object} config The configuration object.\n * @param {module:ui/dropdown/dropdownview~DropdownView} config.dropdownView The dropdown view to which\n * a {@link module:font/ui/colortableview~ColorTableView} will be added.\n * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} config.colors An array with definitions\n * representing colors to be displayed in the color table.\n * @param {String} config.removeButtonLabel The label for the button responsible for removing the color.\n * @param {String} config.documentColorsLabel The label for the section with document colors.\n * @param {String} config.documentColorsCount The number of document colors inside the dropdown.\n * @returns {module:font/ui/colortableview~ColorTableView} The new color table view.\n */\nexport function addColorTableToDropdown( { dropdownView, colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount } ) {\n\tconst locale = dropdownView.locale;\n\tconst colorTableView = new ColorTableView( locale, { colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount } );\n\n\tdropdownView.colorTableView = colorTableView;\n\tdropdownView.panelView.children.add( colorTableView );\n\n\tcolorTableView.delegate( 'execute' ).to( dropdownView, 'execute' );\n\n\treturn colorTableView;\n}\n\n// Fixes the color value string.\n//\n// @param {String} value\n// @returns {String}\nfunction normalizeColorCode( value ) {\n\treturn value.replace( /\\s/g, '' );\n}\n"]},"metadata":{},"sourceType":"module"}