{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { validHex } from './utils';\nexport * from './utils';\nexport * from './getContrastingColor';\nvar RGB_MAX = 255;\nvar HUE_MAX = 360;\nvar SV_MAX = 100;\n/**\n * ```js\n * rgbaToHsva({ r: 255, g: 255, b: 255, a: 1 }) //=> { h: 0, s: 0, v: 100, a: 1 }\n * ```\n */\n\nexport var rgbaToHsva = _ref => {\n  var {\n    r,\n    g,\n    b,\n    a\n  } = _ref;\n  var max = Math.max(r, g, b);\n  var delta = max - Math.min(r, g, b); // prettier-ignore\n\n  var hh = delta ? max === r ? (g - b) / delta : max === g ? 2 + (b - r) / delta : 4 + (r - g) / delta : 0;\n  return {\n    h: 60 * (hh < 0 ? hh + 6 : hh),\n    s: max ? delta / max * SV_MAX : 0,\n    v: max / RGB_MAX * SV_MAX,\n    a\n  };\n};\nexport var hsvaToHslString = hsva => {\n  var {\n    h,\n    s,\n    l\n  } = hsvaToHsla(hsva); // return `hsl(${h}, ${s}%, ${l}%)`;\n\n  return \"hsl(\" + h + \", \" + Math.round(s) + \"%, \" + Math.round(l) + \"%)\";\n};\nexport var hsvaToHsvString = _ref2 => {\n  var {\n    h,\n    s,\n    v\n  } = _ref2;\n  return \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\";\n};\nexport var hsvaToHsvaString = _ref3 => {\n  var {\n    h,\n    s,\n    v,\n    a\n  } = _ref3;\n  return \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + a + \")\";\n};\nexport var hsvaToHslaString = hsva => {\n  var {\n    h,\n    s,\n    l,\n    a\n  } = hsvaToHsla(hsva);\n  return \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + a + \")\";\n};\nexport var hslStringToHsla = str => {\n  var [h, s, l, a] = (str.match(/\\d+/g) || []).map(Number);\n  return {\n    h,\n    s,\n    l,\n    a\n  };\n};\nexport var hslaStringToHsva = hslString => {\n  var matcher = /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  var match = matcher.exec(hslString);\n  if (!match) return {\n    h: 0,\n    s: 0,\n    v: 0,\n    a: 1\n  };\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n  });\n};\nexport var hslStringToHsva = hslaStringToHsva;\nexport var hslaToHsva = _ref4 => {\n  var {\n    h,\n    s,\n    l,\n    a\n  } = _ref4;\n  s *= (l < 50 ? l : SV_MAX - l) / SV_MAX;\n  return {\n    h: h,\n    s: s > 0 ? 2 * s / (l + s) * SV_MAX : 0,\n    v: l + s,\n    a\n  };\n};\nexport var hsvaToHsla = _ref5 => {\n  var {\n    h,\n    s,\n    v,\n    a\n  } = _ref5;\n  var hh = (200 - s) * v / SV_MAX;\n  return {\n    h,\n    s: hh > 0 && hh < 200 ? s * v / SV_MAX / (hh <= SV_MAX ? hh : 200 - hh) * SV_MAX : 0,\n    l: hh / 2,\n    a\n  };\n};\nexport var hsvaStringToHsva = hsvString => {\n  var matcher = /hsva?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  var match = matcher.exec(hsvString);\n  if (!match) return {\n    h: 0,\n    s: 0,\n    v: 0,\n    a: 1\n  };\n  return {\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    v: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? SV_MAX : 1)\n  };\n};\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\n\nvar angleUnits = {\n  grad: HUE_MAX / 400,\n  turn: HUE_MAX,\n  rad: HUE_MAX / (Math.PI * 2)\n};\nexport var parseHue = function parseHue(value, unit) {\n  if (unit === void 0) {\n    unit = 'deg';\n  }\n\n  return Number(value) * (angleUnits[unit] || 1);\n};\nexport var hsvStringToHsva = hsvaStringToHsva;\nexport var rgbaStringToHsva = rgbaString => {\n  var matcher = /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  var match = matcher.exec(rgbaString);\n  if (!match) return {\n    h: 0,\n    s: 0,\n    v: 0,\n    a: 1\n  };\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? SV_MAX / RGB_MAX : 1),\n    g: Number(match[3]) / (match[4] ? SV_MAX / RGB_MAX : 1),\n    b: Number(match[5]) / (match[6] ? SV_MAX / RGB_MAX : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? SV_MAX : 1)\n  });\n};\nexport var rgbStringToHsva = rgbaStringToHsva;\n/** Converts an RGBA color plus alpha transparency to hex */\n\nexport var rgbaToHex = _ref6 => {\n  var {\n    r,\n    g,\n    b\n  } = _ref6;\n  var bin = r << 16 | g << 8 | b;\n  return \"#\" + (h => new Array(7 - h.length).join('0') + h)(bin.toString(16));\n};\nexport var rgbaToHexa = _ref7 => {\n  var {\n    r,\n    g,\n    b,\n    a\n  } = _ref7;\n  var alpha = typeof a === 'number' && (a * 255 | 1 << 8).toString(16).slice(1);\n  return \"\" + rgbaToHex({\n    r,\n    g,\n    b,\n    a\n  }) + (alpha ? alpha : '');\n};\nexport var hexToHsva = hex => rgbaToHsva(hexToRgba(hex));\nexport var hexToRgba = hex => {\n  var htemp = hex.replace('#', '');\n\n  if (/^#?/.test(hex) && htemp.length === 3) {\n    hex = \"#\" + htemp.charAt(0) + htemp.charAt(0) + htemp.charAt(1) + htemp.charAt(1) + htemp.charAt(2) + htemp.charAt(2);\n  }\n\n  var reg = new RegExp(\"[A-Za-z0-9]{2}\", 'g');\n  var [r, g, b = 0, a] = hex.match(reg).map(v => parseInt(v, 16));\n  return {\n    r,\n    g,\n    b,\n    a: a ? a / RGB_MAX : 1\n  };\n};\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\n\nexport var hsvaToRgba = _ref8 => {\n  var {\n    h,\n    s,\n    v,\n    a\n  } = _ref8;\n\n  var _h = h / 60,\n      _s = s / SV_MAX,\n      _v = v / SV_MAX,\n      hi = Math.floor(_h) % 6;\n\n  var f = _h - Math.floor(_h),\n      _p = RGB_MAX * _v * (1 - _s),\n      _q = RGB_MAX * _v * (1 - _s * f),\n      _t = RGB_MAX * _v * (1 - _s * (1 - f));\n\n  _v *= RGB_MAX;\n  var rgba = {};\n\n  switch (hi) {\n    case 0:\n      rgba.r = _v;\n      rgba.g = _t;\n      rgba.b = _p;\n      break;\n\n    case 1:\n      rgba.r = _q;\n      rgba.g = _v;\n      rgba.b = _p;\n      break;\n\n    case 2:\n      rgba.r = _p;\n      rgba.g = _v;\n      rgba.b = _t;\n      break;\n\n    case 3:\n      rgba.r = _p;\n      rgba.g = _q;\n      rgba.b = _v;\n      break;\n\n    case 4:\n      rgba.r = _t;\n      rgba.g = _p;\n      rgba.b = _v;\n      break;\n\n    case 5:\n      rgba.r = _v;\n      rgba.g = _p;\n      rgba.b = _q;\n      break;\n  }\n\n  rgba.r = Math.round(rgba.r);\n  rgba.g = Math.round(rgba.g);\n  rgba.b = Math.round(rgba.b);\n  return _extends({}, rgba, {\n    a\n  });\n};\nexport var hsvaToRgbString = hsva => {\n  var {\n    r,\n    g,\n    b\n  } = hsvaToRgba(hsva);\n  return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n};\nexport var hsvaToRgbaString = hsva => {\n  var {\n    r,\n    g,\n    b,\n    a\n  } = hsvaToRgba(hsva);\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n};\nexport var rgbaToRgb = _ref9 => {\n  var {\n    r,\n    g,\n    b\n  } = _ref9;\n  return {\n    r,\n    g,\n    b\n  };\n};\nexport var hslaToHsl = _ref10 => {\n  var {\n    h,\n    s,\n    l\n  } = _ref10;\n  return {\n    h,\n    s,\n    l\n  };\n};\nexport var hsvaToHex = hsva => rgbaToHex(hsvaToRgba(hsva));\nexport var hsvaToHexa = hsva => rgbaToHexa(hsvaToRgba(hsva));\nexport var hsvaToHsv = _ref11 => {\n  var {\n    h,\n    s,\n    v\n  } = _ref11;\n  return {\n    h,\n    s,\n    v\n  };\n};\nexport var color = str => {\n  var rgb;\n  var hsl;\n  var hsv;\n  var rgba;\n  var hsla;\n  var hsva;\n  var hex;\n  var hexa;\n\n  if (typeof str === 'string' && validHex(str)) {\n    hsva = hexToHsva(str);\n    hex = str;\n  } else if (typeof str !== 'string') {\n    hsva = str;\n  }\n\n  if (hsva) {\n    hsv = hsvaToHsv(hsva);\n    hsla = hsvaToHsla(hsva);\n    rgba = hsvaToRgba(hsva);\n    hexa = rgbaToHexa(rgba);\n    hex = hsvaToHex(hsva);\n    hsl = hslaToHsl(hsla);\n    rgb = rgbaToRgb(rgba);\n  }\n\n  return {\n    rgb,\n    hsl,\n    hsv,\n    rgba,\n    hsla,\n    hsva,\n    hex,\n    hexa\n  };\n};","map":{"version":3,"sources":["../src/index.ts"],"names":["RGB_MAX","HUE_MAX","SV_MAX","rgbaToHsva","a","max","Math","delta","hh","g","b","r","h","s","v","hsvaToHslString","hsva","l","hsvaToHsla","hsvaToHsvString","hsvaToHsvaString","hsvaToHslaString","hslStringToHsla","str","hslaStringToHsva","hslString","matcher","match","hslaToHsva","parseHue","Number","hslStringToHsva","hsvaStringToHsva","hsvString","angleUnits","grad","turn","rad","unit","hsvStringToHsva","rgbaStringToHsva","rgbaString","rgbStringToHsva","rgbaToHex","bin","rgbaToHexa","alpha","hexToHsva","hex","hexToRgba","htemp","reg","parseInt","hsvaToRgba","_h","_s","_v","hi","f","_p","_q","_t","rgba","hsvaToRgbString","hsvaToRgbaString","rgbaToRgb","hslaToHsl","hsvaToHex","hsvaToHexa","hsvaToHsv","color","validHex","hsv","hsla","hexa","hsl","rgb"],"mappings":"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","sourcesContent":["import { validHex } from './utils';\n\nexport * from './utils';\nexport * from './getContrastingColor';\n\nconst RGB_MAX = 255;\nconst HUE_MAX = 360;\nconst SV_MAX = 100;\n\nexport type ObjectColor = RgbColor | HslColor | HsvColor | RgbaColor | HslaColor | HsvaColor;\nexport type ColorResult = {\n  rgb: RgbColor;\n  hsl: HslColor;\n  hsv: HsvColor;\n  rgba: RgbaColor;\n  hsla: HslaColor;\n  hsva: HsvaColor;\n  hex: string;\n  hexa: string;\n};\n\nexport interface HsvColor {\n  h: number;\n  s: number;\n  v: number;\n}\n\nexport interface HsvaColor extends HsvColor {\n  a: number;\n}\n\nexport interface RgbColor {\n  r: number;\n  g: number;\n  b: number;\n}\nexport interface RgbaColor extends RgbColor {\n  a: number;\n}\n\n/**\n * ```js\n * rgbaToHsva({ r: 255, g: 255, b: 255, a: 1 }) //=> { h: 0, s: 0, v: 100, a: 1 }\n * ```\n */\nexport const rgbaToHsva = ({ r, g, b, a }: RgbaColor): HsvaColor => {\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n\n  // prettier-ignore\n  const hh = delta\n    ? max === r\n      ? (g - b) / delta\n      : max === g\n        ? 2 + (b - r) / delta\n        : 4 + (r - g) / delta\n    : 0;\n\n  return {\n    h: 60 * (hh < 0 ? hh + 6 : hh),\n    s: max ? (delta / max) * SV_MAX : 0,\n    v: (max / RGB_MAX) * SV_MAX,\n    a,\n  };\n};\n\nexport const hsvaToHslString = (hsva: HsvaColor): string => {\n  const { h, s, l } = hsvaToHsla(hsva);\n  // return `hsl(${h}, ${s}%, ${l}%)`;\n  return `hsl(${h}, ${Math.round(s)}%, ${Math.round(l)}%)`;\n};\n\nexport const hsvaToHsvString = ({ h, s, v }: HsvaColor): string => {\n  return `hsv(${h}, ${s}%, ${v}%)`;\n};\n\nexport const hsvaToHsvaString = ({ h, s, v, a }: HsvaColor): string => {\n  return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n};\n\nexport const hsvaToHslaString = (hsva: HsvaColor): string => {\n  const { h, s, l, a } = hsvaToHsla(hsva);\n  return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n};\n\nexport const hslStringToHsla = (str: string): HslaColor => {\n  const [h, s, l, a] = (str.match(/\\d+/g) || []).map(Number);\n  return { h, s, l, a };\n};\n\nexport const hslaStringToHsva = (hslString: string): HsvaColor => {\n  const matcher =\n    /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hslString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  });\n};\n\nexport const hslStringToHsva = hslaStringToHsva;\n\nexport const hslaToHsva = ({ h, s, l, a }: HslaColor): HsvaColor => {\n  s *= (l < 50 ? l : SV_MAX - l) / SV_MAX;\n\n  return {\n    h: h,\n    s: s > 0 ? ((2 * s) / (l + s)) * SV_MAX : 0,\n    v: l + s,\n    a,\n  };\n};\n\nexport interface HslColor {\n  h: number;\n  s: number;\n  l: number;\n}\nexport interface HslaColor extends HslColor {\n  a: number;\n}\nexport const hsvaToHsla = ({ h, s, v, a }: HsvaColor): HslaColor => {\n  const hh = ((200 - s) * v) / SV_MAX;\n\n  return {\n    h,\n    s: hh > 0 && hh < 200 ? ((s * v) / SV_MAX / (hh <= SV_MAX ? hh : 200 - hh)) * SV_MAX : 0,\n    l: hh / 2,\n    a,\n  };\n};\n\nexport const hsvaStringToHsva = (hsvString: string): HsvaColor => {\n  const matcher =\n    /hsva?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(hsvString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return {\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    v: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? SV_MAX : 1),\n  };\n};\n\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\nconst angleUnits: Record<string, number> = {\n  grad: HUE_MAX / 400,\n  turn: HUE_MAX,\n  rad: HUE_MAX / (Math.PI * 2),\n};\n\nexport const parseHue = (value: string, unit = 'deg'): number => {\n  return Number(value) * (angleUnits[unit] || 1);\n};\n\nexport const hsvStringToHsva = hsvaStringToHsva;\nexport const rgbaStringToHsva = (rgbaString: string): HsvaColor => {\n  const matcher =\n    /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n  const match = matcher.exec(rgbaString);\n\n  if (!match) return { h: 0, s: 0, v: 0, a: 1 };\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? SV_MAX / RGB_MAX : 1),\n    g: Number(match[3]) / (match[4] ? SV_MAX / RGB_MAX : 1),\n    b: Number(match[5]) / (match[6] ? SV_MAX / RGB_MAX : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? SV_MAX : 1),\n  });\n};\n\nexport const rgbStringToHsva = rgbaStringToHsva;\n\n/** Converts an RGBA color plus alpha transparency to hex */\nexport const rgbaToHex = ({ r, g, b }: RgbaColor): string => {\n  let bin = (r << 16) | (g << 8) | b;\n  return `#${((h) => new Array(7 - h.length).join('0') + h)(bin.toString(16))}`;\n};\n\nexport const rgbaToHexa = ({ r, g, b, a }: RgbaColor): string => {\n  const alpha = typeof a === 'number' && ((a * 255) | (1 << 8)).toString(16).slice(1);\n  return `${rgbaToHex({ r, g, b, a })}${alpha ? alpha : ''}`;\n};\n\nexport const hexToHsva = (hex: string): HsvaColor => rgbaToHsva(hexToRgba(hex));\nexport const hexToRgba = (hex: string): RgbaColor => {\n  const htemp = hex.replace('#', '');\n  if (/^#?/.test(hex) && htemp.length === 3) {\n    hex = `#${htemp.charAt(0)}${htemp.charAt(0)}${htemp.charAt(1)}${htemp.charAt(1)}${htemp.charAt(2)}${htemp.charAt(2)}`;\n  }\n  const reg = new RegExp(`[A-Za-z0-9]{2}`, 'g');\n  const [r, g, b = 0, a] = hex.match(reg)!.map((v) => parseInt(v, 16));\n  return {\n    r,\n    g,\n    b,\n    a: a ? a / RGB_MAX : 1,\n  };\n};\n\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\nexport const hsvaToRgba = ({ h, s, v, a }: HsvaColor): RgbaColor => {\n  let _h = h / 60,\n    _s = s / SV_MAX,\n    _v = v / SV_MAX,\n    hi = Math.floor(_h) % 6;\n\n  let f = _h - Math.floor(_h),\n    _p = RGB_MAX * _v * (1 - _s),\n    _q = RGB_MAX * _v * (1 - _s * f),\n    _t = RGB_MAX * _v * (1 - _s * (1 - f));\n  _v *= RGB_MAX;\n  const rgba = {} as RgbaColor;\n  switch (hi) {\n    case 0:\n      rgba.r = _v;\n      rgba.g = _t;\n      rgba.b = _p;\n      break;\n    case 1:\n      rgba.r = _q;\n      rgba.g = _v;\n      rgba.b = _p;\n      break;\n    case 2:\n      rgba.r = _p;\n      rgba.g = _v;\n      rgba.b = _t;\n      break;\n    case 3:\n      rgba.r = _p;\n      rgba.g = _q;\n      rgba.b = _v;\n      break;\n    case 4:\n      rgba.r = _t;\n      rgba.g = _p;\n      rgba.b = _v;\n      break;\n    case 5:\n      rgba.r = _v;\n      rgba.g = _p;\n      rgba.b = _q;\n      break;\n  }\n  rgba.r = Math.round(rgba.r);\n  rgba.g = Math.round(rgba.g);\n  rgba.b = Math.round(rgba.b);\n  return { ...rgba, a };\n};\n\nexport const hsvaToRgbString = (hsva: HsvaColor): string => {\n  const { r, g, b } = hsvaToRgba(hsva);\n  return `rgb(${r}, ${g}, ${b})`;\n};\n\nexport const hsvaToRgbaString = (hsva: HsvaColor): string => {\n  const { r, g, b, a } = hsvaToRgba(hsva);\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n\nexport const rgbaToRgb = ({ r, g, b }: RgbaColor): RgbColor => ({ r, g, b });\nexport const hslaToHsl = ({ h, s, l }: HslaColor): HslColor => ({ h, s, l });\nexport const hsvaToHex = (hsva: HsvaColor): string => rgbaToHex(hsvaToRgba(hsva));\nexport const hsvaToHexa = (hsva: HsvaColor): string => rgbaToHexa(hsvaToRgba(hsva));\nexport const hsvaToHsv = ({ h, s, v }: HsvaColor): HsvColor => ({ h, s, v });\n\nexport const color = (str: string | HsvaColor): ColorResult => {\n  let rgb!: RgbColor;\n  let hsl!: HslColor;\n  let hsv!: HsvColor;\n  let rgba!: RgbaColor;\n  let hsla!: HslaColor;\n  let hsva!: HsvaColor;\n  let hex!: string;\n  let hexa!: string;\n  if (typeof str === 'string' && validHex(str)) {\n    hsva = hexToHsva(str);\n    hex = str;\n  } else if (typeof str !== 'string') {\n    hsva = str;\n  }\n  if (hsva) {\n    hsv = hsvaToHsv(hsva);\n    hsla = hsvaToHsla(hsva);\n    rgba = hsvaToRgba(hsva);\n    hexa = rgbaToHexa(rgba);\n    hex = hsvaToHex(hsva);\n    hsl = hslaToHsl(hsla);\n    rgb = rgbaToRgb(rgba);\n  }\n  return { rgb, hsl, hsv, rgba, hsla, hsva, hex, hexa };\n};\n"]},"metadata":{},"sourceType":"module"}