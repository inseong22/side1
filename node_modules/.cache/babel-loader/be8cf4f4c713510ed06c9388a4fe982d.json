{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/utils\n */\nimport { CKEditorError } from 'ckeditor5/src/utils';\n/**\n * Normalizes and translates the {@link module:font/fontsize~FontSizeConfig#options configuration options}\n * to the {@link module:font/fontsize~FontSizeOption} format.\n *\n * @param {Array.<String|Number|Object>} configuredOptions An array of options taken from the configuration.\n * @returns {Array.<module:font/fontsize~FontSizeOption>}\n */\n\nexport function normalizeOptions(configuredOptions) {\n  // Convert options to objects.\n  return configuredOptions.map(item => getOptionDefinition(item)) // Filter out undefined values that `getOptionDefinition` might return.\n  .filter(option => !!option);\n} // Default named presets map. Always create a new instance of the preset object in order to avoid modifying references.\n\nconst namedPresets = {\n  get tiny() {\n    return {\n      title: 'Tiny',\n      model: 'tiny',\n      view: {\n        name: 'span',\n        classes: 'text-tiny',\n        priority: 7\n      }\n    };\n  },\n\n  get small() {\n    return {\n      title: 'Small',\n      model: 'small',\n      view: {\n        name: 'span',\n        classes: 'text-small',\n        priority: 7\n      }\n    };\n  },\n\n  get big() {\n    return {\n      title: 'Big',\n      model: 'big',\n      view: {\n        name: 'span',\n        classes: 'text-big',\n        priority: 7\n      }\n    };\n  },\n\n  get huge() {\n    return {\n      title: 'Huge',\n      model: 'huge',\n      view: {\n        name: 'span',\n        classes: 'text-huge',\n        priority: 7\n      }\n    };\n  }\n\n}; // Returns an option definition either from preset or creates one from number shortcut.\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n//\n// @param {String|Number|Object} item\n// @returns {undefined|module:font/fontsize~FontSizeOption}\n\nfunction getOptionDefinition(option) {\n  // Check whether passed option is a full item definition provided by user in configuration.\n  if (isFullItemDefinition(option)) {\n    return attachPriority(option);\n  }\n\n  const preset = findPreset(option); // Item is a named preset.\n\n  if (preset) {\n    return attachPriority(preset);\n  } // 'Default' font size. It will be used to remove the fontSize attribute.\n\n\n  if (option === 'default') {\n    return {\n      model: undefined,\n      title: 'Default'\n    };\n  } // At this stage we probably have numerical value to generate a preset so parse it's value.\n  // Discard any faulty values.\n\n\n  if (isNumericalDefinition(option)) {\n    return;\n  } // Return font size definition from size value.\n\n\n  return generatePixelPreset(option);\n} // Creates a predefined preset for pixel size.\n//\n// @param {Number} definition Font size in pixels.\n// @returns {module:font/fontsize~FontSizeOption}\n\n\nfunction generatePixelPreset(definition) {\n  // Extend a short (numeric value) definition.\n  if (typeof definition === 'number' || typeof definition === 'string') {\n    definition = {\n      title: String(definition),\n      model: `${parseFloat(definition)}px`\n    };\n  }\n\n  definition.view = {\n    name: 'span',\n    styles: {\n      'font-size': definition.model\n    }\n  };\n  return attachPriority(definition);\n} // Adds the priority to the view element definition if missing. It's required due to ckeditor/ckeditor5#2291\n//\n// @param {Object} definition\n// @param {Object} definition.title\n// @param {Object} definition.model\n// @param {Object} definition.view\n// @returns {Object}\n\n\nfunction attachPriority(definition) {\n  if (!definition.view.priority) {\n    definition.view.priority = 7;\n  }\n\n  return definition;\n} // Returns a prepared preset definition. If passed an object, a name of preset should be defined as `model` value.\n//\n// @param {String|Object} definition\n// @param {String} definition.model A preset name.\n// @returns {Object|undefined}\n\n\nfunction findPreset(definition) {\n  return namedPresets[definition] || namedPresets[definition.model];\n} // We treat `definition` as completed if it is an object that contains `title`, `model` and `view` values.\n//\n// @param {Object} definition\n// @param {String} definition.title\n// @param {String} definition.model\n// @param {Object} definition.view\n// @returns {Boolean}\n\n\nfunction isFullItemDefinition(definition) {\n  return typeof definition === 'object' && definition.title && definition.model && definition.view;\n} // We treat `definition` as numerical if it is a number, number-like (string) or an object with the `title` key.\n//\n// @param {Object|Number|String} definition\n// @param {Object} definition.title\n// @returns {Boolean}\n\n\nfunction isNumericalDefinition(definition) {\n  let numberValue;\n\n  if (typeof definition === 'object') {\n    if (!definition.model) {\n      /**\n       * Provided value as an option for {@link module:font/fontsize~FontSize} seems to invalid.\n       *\n       * See valid examples described in the {@link module:font/fontsize~FontSizeConfig#options plugin configuration}.\n       *\n       * @error font-size-invalid-definition\n       */\n      throw new CKEditorError('font-size-invalid-definition', null, definition);\n    } else {\n      numberValue = parseFloat(definition.model);\n    }\n  } else {\n    numberValue = parseFloat(definition);\n  }\n\n  return isNaN(numberValue);\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/fontsize/utils.js"],"names":["CKEditorError","normalizeOptions","configuredOptions","map","item","getOptionDefinition","filter","option","namedPresets","tiny","title","model","view","name","classes","priority","small","big","huge","isFullItemDefinition","attachPriority","preset","findPreset","undefined","isNumericalDefinition","generatePixelPreset","definition","String","parseFloat","styles","numberValue","isNaN"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/utils\n */\n\nimport { CKEditorError } from 'ckeditor5/src/utils';\n\n/**\n * Normalizes and translates the {@link module:font/fontsize~FontSizeConfig#options configuration options}\n * to the {@link module:font/fontsize~FontSizeOption} format.\n *\n * @param {Array.<String|Number|Object>} configuredOptions An array of options taken from the configuration.\n * @returns {Array.<module:font/fontsize~FontSizeOption>}\n */\nexport function normalizeOptions( configuredOptions ) {\n\t// Convert options to objects.\n\treturn configuredOptions\n\t\t.map( item => getOptionDefinition( item ) )\n\t\t// Filter out undefined values that `getOptionDefinition` might return.\n\t\t.filter( option => !!option );\n}\n\n// Default named presets map. Always create a new instance of the preset object in order to avoid modifying references.\nconst namedPresets = {\n\tget tiny() {\n\t\treturn {\n\t\t\ttitle: 'Tiny',\n\t\t\tmodel: 'tiny',\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tclasses: 'text-tiny',\n\t\t\t\tpriority: 7\n\t\t\t}\n\t\t};\n\t},\n\tget small() {\n\t\treturn {\n\t\t\ttitle: 'Small',\n\t\t\tmodel: 'small',\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tclasses: 'text-small',\n\t\t\t\tpriority: 7\n\t\t\t}\n\t\t};\n\t},\n\tget big() {\n\t\treturn {\n\t\t\ttitle: 'Big',\n\t\t\tmodel: 'big',\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tclasses: 'text-big',\n\t\t\t\tpriority: 7\n\t\t\t}\n\t\t};\n\t},\n\tget huge() {\n\t\treturn {\n\t\t\ttitle: 'Huge',\n\t\t\tmodel: 'huge',\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tclasses: 'text-huge',\n\t\t\t\tpriority: 7\n\t\t\t}\n\t\t};\n\t}\n};\n\n// Returns an option definition either from preset or creates one from number shortcut.\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n//\n// @param {String|Number|Object} item\n// @returns {undefined|module:font/fontsize~FontSizeOption}\nfunction getOptionDefinition( option ) {\n\t// Check whether passed option is a full item definition provided by user in configuration.\n\tif ( isFullItemDefinition( option ) ) {\n\t\treturn attachPriority( option );\n\t}\n\n\tconst preset = findPreset( option );\n\n\t// Item is a named preset.\n\tif ( preset ) {\n\t\treturn attachPriority( preset );\n\t}\n\n\t// 'Default' font size. It will be used to remove the fontSize attribute.\n\tif ( option === 'default' ) {\n\t\treturn {\n\t\t\tmodel: undefined,\n\t\t\ttitle: 'Default'\n\t\t};\n\t}\n\n\t// At this stage we probably have numerical value to generate a preset so parse it's value.\n\t// Discard any faulty values.\n\tif ( isNumericalDefinition( option ) ) {\n\t\treturn;\n\t}\n\n\t// Return font size definition from size value.\n\treturn generatePixelPreset( option );\n}\n\n// Creates a predefined preset for pixel size.\n//\n// @param {Number} definition Font size in pixels.\n// @returns {module:font/fontsize~FontSizeOption}\nfunction generatePixelPreset( definition ) {\n\t// Extend a short (numeric value) definition.\n\tif ( typeof definition === 'number' || typeof definition === 'string' ) {\n\t\tdefinition = {\n\t\t\ttitle: String( definition ),\n\t\t\tmodel: `${ parseFloat( definition ) }px`\n\t\t};\n\t}\n\n\tdefinition.view = {\n\t\tname: 'span',\n\t\tstyles: {\n\t\t\t'font-size': definition.model\n\t\t}\n\t};\n\n\treturn attachPriority( definition );\n}\n\n// Adds the priority to the view element definition if missing. It's required due to ckeditor/ckeditor5#2291\n//\n// @param {Object} definition\n// @param {Object} definition.title\n// @param {Object} definition.model\n// @param {Object} definition.view\n// @returns {Object}\nfunction attachPriority( definition ) {\n\tif ( !definition.view.priority ) {\n\t\tdefinition.view.priority = 7;\n\t}\n\n\treturn definition;\n}\n\n// Returns a prepared preset definition. If passed an object, a name of preset should be defined as `model` value.\n//\n// @param {String|Object} definition\n// @param {String} definition.model A preset name.\n// @returns {Object|undefined}\nfunction findPreset( definition ) {\n\treturn namedPresets[ definition ] || namedPresets[ definition.model ];\n}\n\n// We treat `definition` as completed if it is an object that contains `title`, `model` and `view` values.\n//\n// @param {Object} definition\n// @param {String} definition.title\n// @param {String} definition.model\n// @param {Object} definition.view\n// @returns {Boolean}\nfunction isFullItemDefinition( definition ) {\n\treturn typeof definition === 'object' && definition.title && definition.model && definition.view;\n}\n\n// We treat `definition` as numerical if it is a number, number-like (string) or an object with the `title` key.\n//\n// @param {Object|Number|String} definition\n// @param {Object} definition.title\n// @returns {Boolean}\nfunction isNumericalDefinition( definition ) {\n\tlet numberValue;\n\n\tif ( typeof definition === 'object' ) {\n\t\tif ( !definition.model ) {\n\t\t\t/**\n\t\t\t * Provided value as an option for {@link module:font/fontsize~FontSize} seems to invalid.\n\t\t\t *\n\t\t\t * See valid examples described in the {@link module:font/fontsize~FontSizeConfig#options plugin configuration}.\n\t\t\t *\n\t\t\t * @error font-size-invalid-definition\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'font-size-invalid-definition', null, definition );\n\t\t} else {\n\t\t\tnumberValue = parseFloat( definition.model );\n\t\t}\n\t} else {\n\t\tnumberValue = parseFloat( definition );\n\t}\n\n\treturn isNaN( numberValue );\n}\n"]},"metadata":{},"sourceType":"module"}