{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/input\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport InputCommand from './inputcommand';\nimport injectUnsafeKeystrokesHandling from './utils/injectunsafekeystrokeshandling';\nimport injectTypingMutationsHandling from './utils/injecttypingmutationshandling';\n/**\n * Handles text input coming from the keyboard or other input methods.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Input extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Input';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n\n    const inputCommand = new InputCommand(editor, editor.config.get('typing.undoStep') || 20);\n    editor.commands.add('input', inputCommand);\n    injectUnsafeKeystrokesHandling(editor);\n    injectTypingMutationsHandling(editor);\n  }\n  /**\n   * Checks batch if it is a result of user input - e.g. typing.\n   *\n   *\t\tconst input = editor.plugins.get( 'Input' );\n   *\n   *\t\teditor.model.document.on( 'change:data', ( evt, batch ) => {\n   *\t\t\tif ( input.isInput( batch ) ) {\n   *\t\t\t\tconsole.log( 'The user typed something...' );\n   *\t\t\t}\n   *\t\t} );\n   *\n   * **Note:** This method checks if the batch was created using {@link module:typing/inputcommand~InputCommand 'input'}\n   * command as typing changes coming from user input are inserted to the document using that command.\n   *\n   * @param {module:engine/model/batch~Batch} batch A batch to check.\n   * @returns {Boolean}\n   */\n\n\n  isInput(batch) {\n    const inputCommand = this.editor.commands.get('input');\n    return inputCommand._batches.has(batch);\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-typing/src/input.js"],"names":["Plugin","InputCommand","injectUnsafeKeystrokesHandling","injectTypingMutationsHandling","Input","pluginName","init","editor","inputCommand","config","get","commands","add","isInput","batch","_batches","has"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAOC,8BAAP,MAA2C,wCAA3C;AACA,OAAOC,6BAAP,MAA0C,uCAA1C;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,KAAN,SAAoBJ,MAApB,CAA2B;AACzC;AACD;AACA;AACsB,aAAVK,UAAU,GAAG;AACvB,WAAO,OAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB,CADM,CAGN;;AACA,UAAMC,YAAY,GAAG,IAAIP,YAAJ,CAAkBM,MAAlB,EAA0BA,MAAM,CAACE,MAAP,CAAcC,GAAd,CAAmB,iBAAnB,KAA0C,EAApE,CAArB;AAEAH,IAAAA,MAAM,CAACI,QAAP,CAAgBC,GAAhB,CAAqB,OAArB,EAA8BJ,YAA9B;AAEAN,IAAAA,8BAA8B,CAAEK,MAAF,CAA9B;AACAJ,IAAAA,6BAA6B,CAAEI,MAAF,CAA7B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCM,EAAAA,OAAO,CAAEC,KAAF,EAAU;AAChB,UAAMN,YAAY,GAAG,KAAKD,MAAL,CAAYI,QAAZ,CAAqBD,GAArB,CAA0B,OAA1B,CAArB;AAEA,WAAOF,YAAY,CAACO,QAAb,CAAsBC,GAAtB,CAA2BF,KAA3B,CAAP;AACA;;AA5CwC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/input\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport InputCommand from './inputcommand';\n\nimport injectUnsafeKeystrokesHandling from './utils/injectunsafekeystrokeshandling';\nimport injectTypingMutationsHandling from './utils/injecttypingmutationshandling';\n\n/**\n * Handles text input coming from the keyboard or other input methods.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Input extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Input';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n\t\tconst inputCommand = new InputCommand( editor, editor.config.get( 'typing.undoStep' ) || 20 );\n\n\t\teditor.commands.add( 'input', inputCommand );\n\n\t\tinjectUnsafeKeystrokesHandling( editor );\n\t\tinjectTypingMutationsHandling( editor );\n\t}\n\n\t/**\n\t * Checks batch if it is a result of user input - e.g. typing.\n\t *\n\t *\t\tconst input = editor.plugins.get( 'Input' );\n\t *\n\t *\t\teditor.model.document.on( 'change:data', ( evt, batch ) => {\n\t *\t\t\tif ( input.isInput( batch ) ) {\n\t *\t\t\t\tconsole.log( 'The user typed something...' );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** This method checks if the batch was created using {@link module:typing/inputcommand~InputCommand 'input'}\n\t * command as typing changes coming from user input are inserted to the document using that command.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch A batch to check.\n\t * @returns {Boolean}\n\t */\n\tisInput( batch ) {\n\t\tconst inputCommand = this.editor.commands.get( 'input' );\n\n\t\treturn inputCommand._batches.has( batch );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}