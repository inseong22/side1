{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontcommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The base font command.\n *\n * @extends module:core/command~Command\n */\n\nexport default class FontCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor Editor instance.\n   * @param {String} attributeKey The name of a model attribute on which this command operates.\n   */\n  constructor(editor, attributeKey) {\n    super(editor);\n    /**\n     * When set, it reflects the {@link #attributeKey} value of the selection.\n     *\n     * @observable\n     * @readonly\n     * @member {String} module:font/fontcommand~FontCommand#value\n     */\n\n    /**\n     * A model attribute on which this command operates.\n     *\n     * @readonly\n     * @member {Boolean} module:font/fontcommand~FontCommand#attributeKey\n     */\n\n    this.attributeKey = attributeKey;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    this.value = doc.selection.getAttribute(this.attributeKey);\n    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);\n  }\n  /**\n   * Executes the command. Applies the `value` of the {@link #attributeKey} to the selection.\n   * If no `value` is passed, it removes the attribute from the selection.\n   *\n   * @protected\n   * @param {Object} [options] Options for the executed command.\n   * @param {String} [options.value] The value to apply.\n   * @fires execute\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const document = model.document;\n    const selection = document.selection;\n    const value = options.value;\n    model.change(writer => {\n      if (selection.isCollapsed) {\n        if (value) {\n          writer.setSelectionAttribute(this.attributeKey, value);\n        } else {\n          writer.removeSelectionAttribute(this.attributeKey);\n        }\n      } else {\n        const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);\n\n        for (const range of ranges) {\n          if (value) {\n            writer.setAttribute(this.attributeKey, value, range);\n          } else {\n            writer.removeAttribute(this.attributeKey, range);\n          }\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/fontcommand.js"],"names":["Command","FontCommand","constructor","editor","attributeKey","refresh","model","doc","document","value","selection","getAttribute","isEnabled","schema","checkAttributeInSelection","execute","options","change","writer","isCollapsed","setSelectionAttribute","removeSelectionAttribute","ranges","getValidRanges","getRanges","range","setAttribute","removeAttribute"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,SAA0BD,OAA1B,CAAkC;AAChD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAAEC,MAAF,EAAUC,YAAV,EAAyB;AACnC,UAAOD,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,YAAL,GAAoBA,YAApB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKH,MAAL,CAAYG,KAA1B;AACA,UAAMC,GAAG,GAAGD,KAAK,CAACE,QAAlB;AAEA,SAAKC,KAAL,GAAaF,GAAG,CAACG,SAAJ,CAAcC,YAAd,CAA4B,KAAKP,YAAjC,CAAb;AACA,SAAKQ,SAAL,GAAiBN,KAAK,CAACO,MAAN,CAAaC,yBAAb,CAAwCP,GAAG,CAACG,SAA5C,EAAuD,KAAKN,YAA5D,CAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCW,EAAAA,OAAO,CAAEC,OAAO,GAAG,EAAZ,EAAiB;AACvB,UAAMV,KAAK,GAAG,KAAKH,MAAL,CAAYG,KAA1B;AACA,UAAME,QAAQ,GAAGF,KAAK,CAACE,QAAvB;AACA,UAAME,SAAS,GAAGF,QAAQ,CAACE,SAA3B;AAEA,UAAMD,KAAK,GAAGO,OAAO,CAACP,KAAtB;AAEAH,IAAAA,KAAK,CAACW,MAAN,CAAcC,MAAM,IAAI;AACvB,UAAKR,SAAS,CAACS,WAAf,EAA6B;AAC5B,YAAKV,KAAL,EAAa;AACZS,UAAAA,MAAM,CAACE,qBAAP,CAA8B,KAAKhB,YAAnC,EAAiDK,KAAjD;AACA,SAFD,MAEO;AACNS,UAAAA,MAAM,CAACG,wBAAP,CAAiC,KAAKjB,YAAtC;AACA;AACD,OAND,MAMO;AACN,cAAMkB,MAAM,GAAGhB,KAAK,CAACO,MAAN,CAAaU,cAAb,CAA6Bb,SAAS,CAACc,SAAV,EAA7B,EAAoD,KAAKpB,YAAzD,CAAf;;AAEA,aAAM,MAAMqB,KAAZ,IAAqBH,MAArB,EAA8B;AAC7B,cAAKb,KAAL,EAAa;AACZS,YAAAA,MAAM,CAACQ,YAAP,CAAqB,KAAKtB,YAA1B,EAAwCK,KAAxC,EAA+CgB,KAA/C;AACA,WAFD,MAEO;AACNP,YAAAA,MAAM,CAACS,eAAP,CAAwB,KAAKvB,YAA7B,EAA2CqB,KAA3C;AACA;AACD;AACD;AACD,KAlBD;AAmBA;;AAzE+C","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\n/**\n * The base font command.\n *\n * @extends module:core/command~Command\n */\nexport default class FontCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor instance.\n\t * @param {String} attributeKey The name of a model attribute on which this command operates.\n\t */\n\tconstructor( editor, attributeKey ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * When set, it reflects the {@link #attributeKey} value of the selection.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {String} module:font/fontcommand~FontCommand#value\n\t\t */\n\n\t\t/**\n\t\t * A model attribute on which this command operates.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:font/fontcommand~FontCommand#attributeKey\n\t\t */\n\t\tthis.attributeKey = attributeKey;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = doc.selection.getAttribute( this.attributeKey );\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, this.attributeKey );\n\t}\n\n\t/**\n\t * Executes the command. Applies the `value` of the {@link #attributeKey} to the selection.\n\t * If no `value` is passed, it removes the attribute from the selection.\n\t *\n\t * @protected\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {String} [options.value] The value to apply.\n\t * @fires execute\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst selection = document.selection;\n\n\t\tconst value = options.value;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setSelectionAttribute( this.attributeKey, value );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeSelectionAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), this.attributeKey );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\twriter.setAttribute( this.attributeKey, value, range );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.removeAttribute( this.attributeKey, range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}