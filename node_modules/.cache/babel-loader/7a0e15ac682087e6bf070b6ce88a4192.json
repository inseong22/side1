{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftenter\n */\nimport ShiftEnterCommand from './shiftentercommand';\nimport EnterObserver from './enterobserver';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ShiftEnter extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ShiftEnter';\n  }\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const conversion = editor.conversion;\n    const view = editor.editing.view;\n    const viewDocument = view.document; // Configure the schema.\n\n    schema.register('softBreak', {\n      allowWhere: '$text',\n      isInline: true\n    }); // Configure converters.\n\n    conversion.for('upcast').elementToElement({\n      model: 'softBreak',\n      view: 'br'\n    });\n    conversion.for('downcast').elementToElement({\n      model: 'softBreak',\n      view: (modelElement, {\n        writer\n      }) => writer.createEmptyElement('br')\n    });\n    view.addObserver(EnterObserver);\n    editor.commands.add('shiftEnter', new ShiftEnterCommand(editor));\n    this.listenTo(viewDocument, 'enter', (evt, data) => {\n      data.preventDefault(); // The hard enter key is handled by the Enter plugin.\n\n      if (!data.isSoft) {\n        return;\n      }\n\n      editor.execute('shiftEnter');\n      view.scrollToTheSelection();\n    }, {\n      priority: 'low'\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-enter/src/shiftenter.js"],"names":["ShiftEnterCommand","EnterObserver","Plugin","ShiftEnter","pluginName","init","editor","schema","model","conversion","view","editing","viewDocument","document","register","allowWhere","isInline","for","elementToElement","modelElement","writer","createEmptyElement","addObserver","commands","add","listenTo","evt","data","preventDefault","isSoft","execute","scrollToTheSelection","priority"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,UAAN,SAAyBD,MAAzB,CAAgC;AAC9C;AACD;AACA;AACsB,aAAVE,UAAU,GAAG;AACvB,WAAO,YAAP;AACA;;AAEDC,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,MAAM,GAAGD,MAAM,CAACE,KAAP,CAAaD,MAA5B;AACA,UAAME,UAAU,GAAGH,MAAM,CAACG,UAA1B;AACA,UAAMC,IAAI,GAAGJ,MAAM,CAACK,OAAP,CAAeD,IAA5B;AACA,UAAME,YAAY,GAAGF,IAAI,CAACG,QAA1B,CALM,CAON;;AACAN,IAAAA,MAAM,CAACO,QAAP,CAAiB,WAAjB,EAA8B;AAC7BC,MAAAA,UAAU,EAAE,OADiB;AAE7BC,MAAAA,QAAQ,EAAE;AAFmB,KAA9B,EARM,CAaN;;AACAP,IAAAA,UAAU,CAACQ,GAAX,CAAgB,QAAhB,EACEC,gBADF,CACoB;AAClBV,MAAAA,KAAK,EAAE,WADW;AAElBE,MAAAA,IAAI,EAAE;AAFY,KADpB;AAMAD,IAAAA,UAAU,CAACQ,GAAX,CAAgB,UAAhB,EACEC,gBADF,CACoB;AAClBV,MAAAA,KAAK,EAAE,WADW;AAElBE,MAAAA,IAAI,EAAE,CAAES,YAAF,EAAgB;AAAEC,QAAAA;AAAF,OAAhB,KAAgCA,MAAM,CAACC,kBAAP,CAA2B,IAA3B;AAFpB,KADpB;AAMAX,IAAAA,IAAI,CAACY,WAAL,CAAkBrB,aAAlB;AAEAK,IAAAA,MAAM,CAACiB,QAAP,CAAgBC,GAAhB,CAAqB,YAArB,EAAmC,IAAIxB,iBAAJ,CAAuBM,MAAvB,CAAnC;AAEA,SAAKmB,QAAL,CAAeb,YAAf,EAA6B,OAA7B,EAAsC,CAAEc,GAAF,EAAOC,IAAP,KAAiB;AACtDA,MAAAA,IAAI,CAACC,cAAL,GADsD,CAGtD;;AACA,UAAK,CAACD,IAAI,CAACE,MAAX,EAAoB;AACnB;AACA;;AAEDvB,MAAAA,MAAM,CAACwB,OAAP,CAAgB,YAAhB;AACApB,MAAAA,IAAI,CAACqB,oBAAL;AACA,KAVD,EAUG;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAVH;AAWA;;AAjD6C","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftenter\n */\n\nimport ShiftEnterCommand from './shiftentercommand';\nimport EnterObserver from './enterobserver';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ShiftEnter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ShiftEnter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t// Configure the schema.\n\t\tschema.register( 'softBreak', {\n\t\t\tallowWhere: '$text',\n\t\t\tisInline: true\n\t\t} );\n\n\t\t// Configure converters.\n\t\tconversion.for( 'upcast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: 'br'\n\t\t\t} );\n\n\t\tconversion.for( 'downcast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: ( modelElement, { writer } ) => writer.createEmptyElement( 'br' )\n\t\t\t} );\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'shiftEnter', new ShiftEnterCommand( editor ) );\n\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tdata.preventDefault();\n\n\t\t\t// The hard enter key is handled by the Enter plugin.\n\t\t\tif ( !data.isSoft ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( 'shiftEnter' );\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}