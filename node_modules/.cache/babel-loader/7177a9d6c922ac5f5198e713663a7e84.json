{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/redocommand\n */\nimport BaseCommand from './basecommand';\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\n\nexport default class RedoCommand extends BaseCommand {\n  /**\n   * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n   * the command's stack, applies the reverted and transformed version on the\n   * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n   * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n   *\n   * @fires execute\n   */\n  execute() {\n    const item = this._stack.pop();\n\n    const redoingBatch = this.editor.model.createBatch('transparent'); // All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n    // operations, or won't do changes to the document before selection is properly restored.\n\n    this.editor.model.enqueueChange(redoingBatch, () => {\n      const lastOperation = item.batch.operations[item.batch.operations.length - 1];\n      const nextBaseVersion = lastOperation.baseVersion + 1;\n      const operations = this.editor.model.document.history.getOperations(nextBaseVersion);\n\n      this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n\n      this._undo(item.batch, redoingBatch);\n    });\n    this.refresh();\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-undo/src/redocommand.js"],"names":["BaseCommand","RedoCommand","execute","item","_stack","pop","redoingBatch","editor","model","createBatch","enqueueChange","lastOperation","batch","operations","length","nextBaseVersion","baseVersion","document","history","getOperations","_restoreSelection","selection","ranges","isBackward","_undo","refresh"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,WAAP,MAAwB,eAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,SAA0BD,WAA1B,CAAsC;AACpD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,OAAO,GAAG;AACT,UAAMC,IAAI,GAAG,KAAKC,MAAL,CAAYC,GAAZ,EAAb;;AACA,UAAMC,YAAY,GAAG,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,WAAlB,CAA+B,aAA/B,CAArB,CAFS,CAIT;AACA;;AACA,SAAKF,MAAL,CAAYC,KAAZ,CAAkBE,aAAlB,CAAiCJ,YAAjC,EAA+C,MAAM;AACpD,YAAMK,aAAa,GAAGR,IAAI,CAACS,KAAL,CAAWC,UAAX,CAAuBV,IAAI,CAACS,KAAL,CAAWC,UAAX,CAAsBC,MAAtB,GAA+B,CAAtD,CAAtB;AACA,YAAMC,eAAe,GAAGJ,aAAa,CAACK,WAAd,GAA4B,CAApD;AACA,YAAMH,UAAU,GAAG,KAAKN,MAAL,CAAYC,KAAZ,CAAkBS,QAAlB,CAA2BC,OAA3B,CAAmCC,aAAnC,CAAkDJ,eAAlD,CAAnB;;AAEA,WAAKK,iBAAL,CAAwBjB,IAAI,CAACkB,SAAL,CAAeC,MAAvC,EAA+CnB,IAAI,CAACkB,SAAL,CAAeE,UAA9D,EAA0EV,UAA1E;;AACA,WAAKW,KAAL,CAAYrB,IAAI,CAACS,KAAjB,EAAwBN,YAAxB;AACA,KAPD;AASA,SAAKmB,OAAL;AACA;;AAzBmD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/redocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class RedoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n\t * the command's stack, applies the reverted and transformed version on the\n\t * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst item = this._stack.pop();\n\t\tconst redoingBatch = this.editor.model.createBatch( 'transparent' );\n\n\t\t// All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n\t\t// operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( redoingBatch, () => {\n\t\t\tconst lastOperation = item.batch.operations[ item.batch.operations.length - 1 ];\n\t\t\tconst nextBaseVersion = lastOperation.baseVersion + 1;\n\t\t\tconst operations = this.editor.model.document.history.getOperations( nextBaseVersion );\n\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\t\t\tthis._undo( item.batch, redoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}