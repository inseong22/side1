{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/fontfamilyui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { normalizeOptions } from './utils';\nimport { FONT_FAMILY } from '../utils';\nimport fontFamilyIcon from '../../theme/icons/font-family.svg';\n/**\n * The font family UI plugin. It introduces the `'fontFamily'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontFamilyUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FontFamilyUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n\n    const options = this._getLocalizedOptions();\n\n    const command = editor.commands.get(FONT_FAMILY); // Register UI component.\n\n    editor.ui.componentFactory.add(FONT_FAMILY, locale => {\n      const dropdownView = createDropdown(locale);\n      addListToDropdown(dropdownView, _prepareListOptions(options, command));\n      dropdownView.buttonView.set({\n        label: t('Font Family'),\n        icon: fontFamilyIcon,\n        tooltip: true\n      });\n      dropdownView.extendTemplate({\n        attributes: {\n          class: 'ck-font-family-dropdown'\n        }\n      });\n      dropdownView.bind('isEnabled').to(command); // Execute command when an item from the dropdown is selected.\n\n      this.listenTo(dropdownView, 'execute', evt => {\n        editor.execute(evt.source.commandName, {\n          value: evt.source.commandParam\n        });\n        editor.editing.view.focus();\n      });\n      return dropdownView;\n    });\n  }\n  /**\n   * Returns options as defined in `config.fontFamily.options` but processed to account for\n   * editor localization, i.e. to display {@link module:font/fontfamily~FontFamilyOption}\n   * in the correct language.\n   *\n   * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n   * when the user configuration is defined because the editor does not exist yet.\n   *\n   * @private\n   * @returns {Array.<module:font/fontfamily~FontFamilyOption>}.\n   */\n\n\n  _getLocalizedOptions() {\n    const editor = this.editor;\n    const t = editor.t;\n    const options = normalizeOptions(editor.config.get(FONT_FAMILY).options);\n    return options.map(option => {\n      // The only title to localize is \"Default\" others are font names.\n      if (option.title === 'Default') {\n        option.title = t('Default');\n      }\n\n      return option;\n    });\n  }\n\n} // Prepares FontFamily dropdown items.\n// @private\n// @param {Array.<module:font/fontsize~FontSizeOption>} options\n// @param {module:font/fontsize/fontsizecommand~FontSizeCommand} command\n\nfunction _prepareListOptions(options, command) {\n  const itemDefinitions = new Collection(); // Create dropdown items.\n\n  for (const option of options) {\n    const def = {\n      type: 'button',\n      model: new Model({\n        commandName: FONT_FAMILY,\n        commandParam: option.model,\n        label: option.title,\n        withText: true\n      })\n    };\n    def.model.bind('isOn').to(command, 'value', value => {\n      // \"Default\" or check in strict font-family converters mode.\n      if (value === option.model) {\n        return true;\n      }\n\n      if (!value || !option.model) {\n        return false;\n      }\n\n      return value.split(',')[0].replace(/'/g, '').toLowerCase() === option.model.toLowerCase();\n    }); // Try to set a dropdown list item style.\n\n    if (option.view && option.view.styles) {\n      def.model.set('labelStyle', `font-family: ${option.view.styles['font-family']}`);\n    }\n\n    itemDefinitions.add(def);\n  }\n\n  return itemDefinitions;\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/fontfamily/fontfamilyui.js"],"names":["Plugin","Collection","Model","createDropdown","addListToDropdown","normalizeOptions","FONT_FAMILY","fontFamilyIcon","FontFamilyUI","pluginName","init","editor","t","options","_getLocalizedOptions","command","commands","get","ui","componentFactory","add","locale","dropdownView","_prepareListOptions","buttonView","set","label","icon","tooltip","extendTemplate","attributes","class","bind","to","listenTo","evt","execute","source","commandName","value","commandParam","editing","view","focus","config","map","option","title","itemDefinitions","def","type","model","withText","split","replace","toLowerCase","styles"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/fontfamilyui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\n\nimport { normalizeOptions } from './utils';\nimport { FONT_FAMILY } from '../utils';\n\nimport fontFamilyIcon from '../../theme/icons/font-family.svg';\n\n/**\n * The font family UI plugin. It introduces the `'fontFamily'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FontFamilyUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'FontFamilyUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\tconst options = this._getLocalizedOptions();\n\n\t\tconst command = editor.commands.get( FONT_FAMILY );\n\n\t\t// Register UI component.\n\t\teditor.ui.componentFactory.add( FONT_FAMILY, locale => {\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\taddListToDropdown( dropdownView, _prepareListOptions( options, command ) );\n\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tlabel: t( 'Font Family' ),\n\t\t\t\ticon: fontFamilyIcon,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tdropdownView.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: 'ck-font-family-dropdown'\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\t// Execute command when an item from the dropdown is selected.\n\t\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\t\teditor.execute( evt.source.commandName, { value: evt.source.commandParam } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n\n\t/**\n\t * Returns options as defined in `config.fontFamily.options` but processed to account for\n\t * editor localization, i.e. to display {@link module:font/fontfamily~FontFamilyOption}\n\t * in the correct language.\n\t *\n\t * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n\t * when the user configuration is defined because the editor does not exist yet.\n\t *\n\t * @private\n\t * @returns {Array.<module:font/fontfamily~FontFamilyOption>}.\n\t */\n\t_getLocalizedOptions() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\tconst options = normalizeOptions( editor.config.get( FONT_FAMILY ).options );\n\n\t\treturn options.map( option => {\n\t\t\t// The only title to localize is \"Default\" others are font names.\n\t\t\tif ( option.title === 'Default' ) {\n\t\t\t\toption.title = t( 'Default' );\n\t\t\t}\n\n\t\t\treturn option;\n\t\t} );\n\t}\n}\n\n// Prepares FontFamily dropdown items.\n// @private\n// @param {Array.<module:font/fontsize~FontSizeOption>} options\n// @param {module:font/fontsize/fontsizecommand~FontSizeCommand} command\nfunction _prepareListOptions( options, command ) {\n\tconst itemDefinitions = new Collection();\n\n\t// Create dropdown items.\n\tfor ( const option of options ) {\n\t\tconst def = {\n\t\t\ttype: 'button',\n\t\t\tmodel: new Model( {\n\t\t\t\tcommandName: FONT_FAMILY,\n\t\t\t\tcommandParam: option.model,\n\t\t\t\tlabel: option.title,\n\t\t\t\twithText: true\n\t\t\t} )\n\t\t};\n\n\t\tdef.model.bind( 'isOn' ).to( command, 'value', value => {\n\t\t\t// \"Default\" or check in strict font-family converters mode.\n\t\t\tif ( value === option.model ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( !value || !option.model ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn value.split( ',' )[ 0 ].replace( /'/g, '' ).toLowerCase() === option.model.toLowerCase();\n\t\t} );\n\n\t\t// Try to set a dropdown list item style.\n\t\tif ( option.view && option.view.styles ) {\n\t\t\tdef.model.set( 'labelStyle', `font-family: ${ option.view.styles[ 'font-family' ] }` );\n\t\t}\n\n\t\titemDefinitions.add( def );\n\t}\n\treturn itemDefinitions;\n}\n"]},"metadata":{},"sourceType":"module"}