{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport findAttributeRange from './findattributerange';\n/**\n * @module typing/utils/inlinehighlight\n */\n\n/**\n * Adds a visual highlight style to an attribute element in which the selection is anchored.\n * Together with two-step caret movement, they indicate that the user is typing inside the element.\n *\n * Highlight is turned on by adding the given class to the attribute element in the view:\n *\n * * The class is removed before the conversion has started, as callbacks added with the `'highest'` priority\n * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events.\n * * The class is added in the view post fixer, after other changes in the model tree were converted to the view.\n *\n * This way, adding and removing the highlight does not interfere with conversion.\n *\n * Usage:\n *\n *\t\timport inlineHighlight from '@ckeditor/ckeditor5-typing/src/utils/inlinehighlight';\n *\n *\t\t// Make `ck-link_selected` class be applied on an `a` element\n *\t\t// whenever the corresponding `linkHref` attribute element is selected.\n *\t\tinlineHighlight( editor, 'linkHref', 'a', 'ck-link_selected' );\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n * @param {String} attributeName The attribute name to check.\n * @param {String} tagName The tagName of a view item.\n * @param {String} className The class name to apply in the view.\n */\n\nexport default function inlineHighlight(editor, attributeName, tagName, className) {\n  const view = editor.editing.view;\n  const highlightedElements = new Set(); // Adding the class.\n\n  view.document.registerPostFixer(writer => {\n    const selection = editor.model.document.selection;\n    let changed = false;\n\n    if (selection.hasAttribute(attributeName)) {\n      const modelRange = findAttributeRange(selection.getFirstPosition(), attributeName, selection.getAttribute(attributeName), editor.model);\n      const viewRange = editor.editing.mapper.toViewRange(modelRange); // There might be multiple view elements in the `viewRange`, for example, when the `a` element is\n      // broken by a UIElement.\n\n      for (const item of viewRange.getItems()) {\n        if (item.is('element', tagName) && !item.hasClass(className)) {\n          writer.addClass(className, item);\n          highlightedElements.add(item);\n          changed = true;\n        }\n      }\n    }\n\n    return changed;\n  }); // Removing the class.\n\n  editor.conversion.for('editingDowncast').add(dispatcher => {\n    // Make sure the highlight is removed on every possible event, before conversion is started.\n    dispatcher.on('insert', removeHighlight, {\n      priority: 'highest'\n    });\n    dispatcher.on('remove', removeHighlight, {\n      priority: 'highest'\n    });\n    dispatcher.on('attribute', removeHighlight, {\n      priority: 'highest'\n    });\n    dispatcher.on('selection', removeHighlight, {\n      priority: 'highest'\n    });\n\n    function removeHighlight() {\n      view.change(writer => {\n        for (const item of highlightedElements.values()) {\n          writer.removeClass(className, item);\n          highlightedElements.delete(item);\n        }\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-typing/src/utils/inlinehighlight.js"],"names":["findAttributeRange","inlineHighlight","editor","attributeName","tagName","className","view","editing","highlightedElements","Set","document","registerPostFixer","writer","selection","model","changed","hasAttribute","modelRange","getFirstPosition","getAttribute","viewRange","mapper","toViewRange","item","getItems","is","hasClass","addClass","add","conversion","for","dispatcher","on","removeHighlight","priority","change","values","removeClass","delete"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,kBAAP,MAA+B,sBAA/B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAA0BC,MAA1B,EAAkCC,aAAlC,EAAiDC,OAAjD,EAA0DC,SAA1D,EAAsE;AACpF,QAAMC,IAAI,GAAGJ,MAAM,CAACK,OAAP,CAAeD,IAA5B;AACA,QAAME,mBAAmB,GAAG,IAAIC,GAAJ,EAA5B,CAFoF,CAIpF;;AACAH,EAAAA,IAAI,CAACI,QAAL,CAAcC,iBAAd,CAAiCC,MAAM,IAAI;AAC1C,UAAMC,SAAS,GAAGX,MAAM,CAACY,KAAP,CAAaJ,QAAb,CAAsBG,SAAxC;AACA,QAAIE,OAAO,GAAG,KAAd;;AAEA,QAAKF,SAAS,CAACG,YAAV,CAAwBb,aAAxB,CAAL,EAA+C;AAC9C,YAAMc,UAAU,GAAGjB,kBAAkB,CACpCa,SAAS,CAACK,gBAAV,EADoC,EAEpCf,aAFoC,EAGpCU,SAAS,CAACM,YAAV,CAAwBhB,aAAxB,CAHoC,EAIpCD,MAAM,CAACY,KAJ6B,CAArC;AAMA,YAAMM,SAAS,GAAGlB,MAAM,CAACK,OAAP,CAAec,MAAf,CAAsBC,WAAtB,CAAmCL,UAAnC,CAAlB,CAP8C,CAS9C;AACA;;AACA,WAAM,MAAMM,IAAZ,IAAoBH,SAAS,CAACI,QAAV,EAApB,EAA2C;AAC1C,YAAKD,IAAI,CAACE,EAAL,CAAS,SAAT,EAAoBrB,OAApB,KAAiC,CAACmB,IAAI,CAACG,QAAL,CAAerB,SAAf,CAAvC,EAAoE;AACnEO,UAAAA,MAAM,CAACe,QAAP,CAAiBtB,SAAjB,EAA4BkB,IAA5B;AACAf,UAAAA,mBAAmB,CAACoB,GAApB,CAAyBL,IAAzB;AACAR,UAAAA,OAAO,GAAG,IAAV;AACA;AACD;AACD;;AAED,WAAOA,OAAP;AACA,GAzBD,EALoF,CAgCpF;;AACAb,EAAAA,MAAM,CAAC2B,UAAP,CAAkBC,GAAlB,CAAuB,iBAAvB,EAA2CF,GAA3C,CAAgDG,UAAU,IAAI;AAC7D;AACAA,IAAAA,UAAU,CAACC,EAAX,CAAe,QAAf,EAAyBC,eAAzB,EAA0C;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA1C;AACAH,IAAAA,UAAU,CAACC,EAAX,CAAe,QAAf,EAAyBC,eAAzB,EAA0C;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA1C;AACAH,IAAAA,UAAU,CAACC,EAAX,CAAe,WAAf,EAA4BC,eAA5B,EAA6C;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA7C;AACAH,IAAAA,UAAU,CAACC,EAAX,CAAe,WAAf,EAA4BC,eAA5B,EAA6C;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA7C;;AAEA,aAASD,eAAT,GAA2B;AAC1B3B,MAAAA,IAAI,CAAC6B,MAAL,CAAavB,MAAM,IAAI;AACtB,aAAM,MAAMW,IAAZ,IAAoBf,mBAAmB,CAAC4B,MAApB,EAApB,EAAmD;AAClDxB,UAAAA,MAAM,CAACyB,WAAP,CAAoBhC,SAApB,EAA+BkB,IAA/B;AACAf,UAAAA,mBAAmB,CAAC8B,MAApB,CAA4Bf,IAA5B;AACA;AACD,OALD;AAMA;AACD,GAfD;AAgBA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport findAttributeRange from './findattributerange';\n\n/**\n * @module typing/utils/inlinehighlight\n */\n\n/**\n * Adds a visual highlight style to an attribute element in which the selection is anchored.\n * Together with two-step caret movement, they indicate that the user is typing inside the element.\n *\n * Highlight is turned on by adding the given class to the attribute element in the view:\n *\n * * The class is removed before the conversion has started, as callbacks added with the `'highest'` priority\n * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events.\n * * The class is added in the view post fixer, after other changes in the model tree were converted to the view.\n *\n * This way, adding and removing the highlight does not interfere with conversion.\n *\n * Usage:\n *\n *\t\timport inlineHighlight from '@ckeditor/ckeditor5-typing/src/utils/inlinehighlight';\n *\n *\t\t// Make `ck-link_selected` class be applied on an `a` element\n *\t\t// whenever the corresponding `linkHref` attribute element is selected.\n *\t\tinlineHighlight( editor, 'linkHref', 'a', 'ck-link_selected' );\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n * @param {String} attributeName The attribute name to check.\n * @param {String} tagName The tagName of a view item.\n * @param {String} className The class name to apply in the view.\n */\nexport default function inlineHighlight( editor, attributeName, tagName, className ) {\n\tconst view = editor.editing.view;\n\tconst highlightedElements = new Set();\n\n\t// Adding the class.\n\tview.document.registerPostFixer( writer => {\n\t\tconst selection = editor.model.document.selection;\n\t\tlet changed = false;\n\n\t\tif ( selection.hasAttribute( attributeName ) ) {\n\t\t\tconst modelRange = findAttributeRange(\n\t\t\t\tselection.getFirstPosition(),\n\t\t\t\tattributeName,\n\t\t\t\tselection.getAttribute( attributeName ),\n\t\t\t\teditor.model\n\t\t\t);\n\t\t\tconst viewRange = editor.editing.mapper.toViewRange( modelRange );\n\n\t\t\t// There might be multiple view elements in the `viewRange`, for example, when the `a` element is\n\t\t\t// broken by a UIElement.\n\t\t\tfor ( const item of viewRange.getItems() ) {\n\t\t\t\tif ( item.is( 'element', tagName ) && !item.hasClass( className ) ) {\n\t\t\t\t\twriter.addClass( className, item );\n\t\t\t\t\thighlightedElements.add( item );\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t} );\n\n\t// Removing the class.\n\teditor.conversion.for( 'editingDowncast' ).add( dispatcher => {\n\t\t// Make sure the highlight is removed on every possible event, before conversion is started.\n\t\tdispatcher.on( 'insert', removeHighlight, { priority: 'highest' } );\n\t\tdispatcher.on( 'remove', removeHighlight, { priority: 'highest' } );\n\t\tdispatcher.on( 'attribute', removeHighlight, { priority: 'highest' } );\n\t\tdispatcher.on( 'selection', removeHighlight, { priority: 'highest' } );\n\n\t\tfunction removeHighlight() {\n\t\t\tview.change( writer => {\n\t\t\t\tfor ( const item of highlightedElements.values() ) {\n\t\t\t\t\twriter.removeClass( className, item );\n\t\t\t\t\thighlightedElements.delete( item );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n}\n"]},"metadata":{},"sourceType":"module"}