{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deleteobserver\n */\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport BubblingEventInfo from '@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport { isShiftDeleteOnNonCollapsedSelection } from './utils/utils';\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class DeleteObserver extends Observer {\n  /**\n   * @inheritDoc\n   */\n  constructor(view) {\n    super(view);\n    const document = view.document;\n    let sequence = 0;\n    document.on('keyup', (evt, data) => {\n      if (data.keyCode == keyCodes.delete || data.keyCode == keyCodes.backspace) {\n        sequence = 0;\n      }\n    });\n    document.on('keydown', (evt, data) => {\n      // Do not fire the `delete` event, if Shift + Delete key combination was pressed on a non-collapsed selection on Windows.\n      //\n      // The Shift + Delete key combination should work in the same way as the `cut` event on a non-collapsed selection on Windows.\n      // In fact, the native `cut` event is actually emitted in this case, but with lower priority. Therefore, in order to handle the\n      // Shift + Delete key combination correctly, it is enough not to emit the `delete` event.\n      if (env.isWindows && isShiftDeleteOnNonCollapsedSelection(data, document)) {\n        return;\n      }\n\n      const deleteData = {};\n\n      if (data.keyCode == keyCodes.delete) {\n        deleteData.direction = 'forward';\n        deleteData.unit = 'character';\n      } else if (data.keyCode == keyCodes.backspace) {\n        deleteData.direction = 'backward';\n        deleteData.unit = 'codePoint';\n      } else {\n        return;\n      }\n\n      const hasWordModifier = env.isMac ? data.altKey : data.ctrlKey;\n      deleteData.unit = hasWordModifier ? 'word' : deleteData.unit;\n      deleteData.sequence = ++sequence;\n      fireViewDeleteEvent(evt, data.domEvent, deleteData);\n    }); // `beforeinput` is handled only for Android devices. Desktop Chrome and iOS are skipped because they are working fine now.\n\n    if (env.isAndroid) {\n      document.on('beforeinput', (evt, data) => {\n        // If event type is other than `deleteContentBackward` then this is not deleting.\n        if (data.domEvent.inputType != 'deleteContentBackward') {\n          return;\n        }\n\n        const deleteData = {\n          unit: 'codepoint',\n          direction: 'backward',\n          sequence: 1\n        }; // Android IMEs may change the DOM selection on `beforeinput` event so that the selection contains all the text\n        // that the IME wants to remove. We will pass this information to `delete` event so proper part of the content is removed.\n        //\n        // Sometimes it is only expanding by a one character (in case of collapsed selection). In this case we don't need to\n        // set a different selection to remove, it will work just fine.\n\n        const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n        if (domSelection.anchorNode == domSelection.focusNode && domSelection.anchorOffset + 1 != domSelection.focusOffset) {\n          deleteData.selectionToRemove = view.domConverter.domSelectionToView(domSelection);\n        }\n\n        fireViewDeleteEvent(evt, data.domEvent, deleteData);\n      });\n    }\n\n    function fireViewDeleteEvent(originalEvent, domEvent, deleteData) {\n      const event = new BubblingEventInfo(document, 'delete', document.selection.getFirstRange());\n      document.fire(event, new DomEventData(document, domEvent, deleteData)); // Stop the original event if `delete` event was stopped.\n      // https://github.com/ckeditor/ckeditor5/issues/753\n\n      if (event.stop.called) {\n        originalEvent.stop();\n      }\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe() {}\n\n}\n/**\n * Event fired when the user tries to delete content (e.g. presses <kbd>Delete</kbd> or <kbd>Backspace</kbd>).\n *\n * Note: This event is fired by the {@link module:typing/deleteobserver~DeleteObserver observer}\n * (usually registered by the {@link module:typing/delete~Delete delete feature}).\n *\n * @event module:engine/view/document~Document#event:delete\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {'forward'|'delete'} data.direction The direction in which the deletion should happen.\n * @param {'character'|'codePoint'|'word'} data.unit The \"amount\" of content that should be deleted.\n * @param {Number} data.sequence A number describing which subsequent delete event it is without the key being released.\n * If it's 2 or more it means that the key was pressed and hold.\n * @param {module:engine/view/selection~Selection} [data.selectionToRemove] View selection which content should be removed. If not set,\n * current selection should be used.\n */","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-typing/src/deleteobserver.js"],"names":["Observer","DomEventData","BubblingEventInfo","keyCodes","env","isShiftDeleteOnNonCollapsedSelection","DeleteObserver","constructor","view","document","sequence","on","evt","data","keyCode","delete","backspace","isWindows","deleteData","direction","unit","hasWordModifier","isMac","altKey","ctrlKey","fireViewDeleteEvent","domEvent","isAndroid","inputType","domSelection","domTarget","ownerDocument","defaultView","getSelection","anchorNode","focusNode","anchorOffset","focusOffset","selectionToRemove","domConverter","domSelectionToView","originalEvent","event","selection","getFirstRange","fire","stop","called","observe"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deleteobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport BubblingEventInfo from '@ckeditor/ckeditor5-engine/src/view/observer/bubblingeventinfo';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport { isShiftDeleteOnNonCollapsedSelection } from './utils/utils';\n\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DeleteObserver extends Observer {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst document = view.document;\n\t\tlet sequence = 0;\n\n\t\tdocument.on( 'keyup', ( evt, data ) => {\n\t\t\tif ( data.keyCode == keyCodes.delete || data.keyCode == keyCodes.backspace ) {\n\t\t\t\tsequence = 0;\n\t\t\t}\n\t\t} );\n\n\t\tdocument.on( 'keydown', ( evt, data ) => {\n\t\t\t// Do not fire the `delete` event, if Shift + Delete key combination was pressed on a non-collapsed selection on Windows.\n\t\t\t//\n\t\t\t// The Shift + Delete key combination should work in the same way as the `cut` event on a non-collapsed selection on Windows.\n\t\t\t// In fact, the native `cut` event is actually emitted in this case, but with lower priority. Therefore, in order to handle the\n\t\t\t// Shift + Delete key combination correctly, it is enough not to emit the `delete` event.\n\t\t\tif ( env.isWindows && isShiftDeleteOnNonCollapsedSelection( data, document ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst deleteData = {};\n\n\t\t\tif ( data.keyCode == keyCodes.delete ) {\n\t\t\t\tdeleteData.direction = 'forward';\n\t\t\t\tdeleteData.unit = 'character';\n\t\t\t} else if ( data.keyCode == keyCodes.backspace ) {\n\t\t\t\tdeleteData.direction = 'backward';\n\t\t\t\tdeleteData.unit = 'codePoint';\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasWordModifier = env.isMac ? data.altKey : data.ctrlKey;\n\t\t\tdeleteData.unit = hasWordModifier ? 'word' : deleteData.unit;\n\t\t\tdeleteData.sequence = ++sequence;\n\n\t\t\tfireViewDeleteEvent( evt, data.domEvent, deleteData );\n\t\t} );\n\n\t\t// `beforeinput` is handled only for Android devices. Desktop Chrome and iOS are skipped because they are working fine now.\n\t\tif ( env.isAndroid ) {\n\t\t\tdocument.on( 'beforeinput', ( evt, data ) => {\n\t\t\t\t// If event type is other than `deleteContentBackward` then this is not deleting.\n\t\t\t\tif ( data.domEvent.inputType != 'deleteContentBackward' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst deleteData = {\n\t\t\t\t\tunit: 'codepoint',\n\t\t\t\t\tdirection: 'backward',\n\t\t\t\t\tsequence: 1\n\t\t\t\t};\n\n\t\t\t\t// Android IMEs may change the DOM selection on `beforeinput` event so that the selection contains all the text\n\t\t\t\t// that the IME wants to remove. We will pass this information to `delete` event so proper part of the content is removed.\n\t\t\t\t//\n\t\t\t\t// Sometimes it is only expanding by a one character (in case of collapsed selection). In this case we don't need to\n\t\t\t\t// set a different selection to remove, it will work just fine.\n\t\t\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\t\t\tif ( domSelection.anchorNode == domSelection.focusNode && domSelection.anchorOffset + 1 != domSelection.focusOffset ) {\n\t\t\t\t\tdeleteData.selectionToRemove = view.domConverter.domSelectionToView( domSelection );\n\t\t\t\t}\n\n\t\t\t\tfireViewDeleteEvent( evt, data.domEvent, deleteData );\n\t\t\t} );\n\t\t}\n\n\t\tfunction fireViewDeleteEvent( originalEvent, domEvent, deleteData ) {\n\t\t\tconst event = new BubblingEventInfo( document, 'delete', document.selection.getFirstRange() );\n\n\t\t\tdocument.fire( event, new DomEventData( document, domEvent, deleteData ) );\n\n\t\t\t// Stop the original event if `delete` event was stopped.\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\tif ( event.stop.called ) {\n\t\t\t\toriginalEvent.stop();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user tries to delete content (e.g. presses <kbd>Delete</kbd> or <kbd>Backspace</kbd>).\n *\n * Note: This event is fired by the {@link module:typing/deleteobserver~DeleteObserver observer}\n * (usually registered by the {@link module:typing/delete~Delete delete feature}).\n *\n * @event module:engine/view/document~Document#event:delete\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {'forward'|'delete'} data.direction The direction in which the deletion should happen.\n * @param {'character'|'codePoint'|'word'} data.unit The \"amount\" of content that should be deleted.\n * @param {Number} data.sequence A number describing which subsequent delete event it is without the key being released.\n * If it's 2 or more it means that the key was pressed and hold.\n * @param {module:engine/view/selection~Selection} [data.selectionToRemove] View selection which content should be removed. If not set,\n * current selection should be used.\n */\n"]},"metadata":{},"sourceType":"module"}