{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/unlinkcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { findAttributeRange } from 'ckeditor5/src/typing';\nimport { isLinkableElement } from './utils';\n/**\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class UnlinkCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const selectedElement = selection.getSelectedElement(); // A check for any integration that allows linking elements (e.g. `LinkImage`).\n    // Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n\n    if (isLinkableElement(selectedElement, model.schema)) {\n      this.isEnabled = model.schema.checkAttribute(selectedElement, 'linkHref');\n    } else {\n      this.isEnabled = model.schema.checkAttributeInSelection(selection, 'linkHref');\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   * When the selection is collapsed, it removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\n   * When the selection is non-collapsed, it removes the `linkHref` attribute from each node in selected ranges.\n   *\n   * # Decorators\n   *\n   * If {@link module:link/link~LinkConfig#decorators `config.link.decorators`} is specified,\n   * all configured decorators are removed together with the `linkHref` attribute.\n   *\n   * @fires execute\n   */\n\n\n  execute() {\n    const editor = this.editor;\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const linkCommand = editor.commands.get('link');\n    model.change(writer => {\n      // Get ranges to unlink.\n      const rangesToUnlink = selection.isCollapsed ? [findAttributeRange(selection.getFirstPosition(), 'linkHref', selection.getAttribute('linkHref'), model)] : model.schema.getValidRanges(selection.getRanges(), 'linkHref'); // Remove `linkHref` attribute from specified ranges.\n\n      for (const range of rangesToUnlink) {\n        writer.removeAttribute('linkHref', range); // If there are registered custom attributes, then remove them during unlink.\n\n        if (linkCommand) {\n          for (const manualDecorator of linkCommand.manualDecorators) {\n            writer.removeAttribute(manualDecorator.id, range);\n          }\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-link/src/unlinkcommand.js"],"names":["Command","findAttributeRange","isLinkableElement","UnlinkCommand","refresh","model","editor","selection","document","selectedElement","getSelectedElement","schema","isEnabled","checkAttribute","checkAttributeInSelection","execute","linkCommand","commands","get","change","writer","rangesToUnlink","isCollapsed","getFirstPosition","getAttribute","getValidRanges","getRanges","range","removeAttribute","manualDecorator","manualDecorators","id"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,SAASC,iBAAT,QAAkC,SAAlC;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,aAAN,SAA4BH,OAA5B,CAAoC;AAClD;AACD;AACA;AACCI,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,SAAS,GAAGF,KAAK,CAACG,QAAN,CAAeD,SAAjC;AACA,UAAME,eAAe,GAAGF,SAAS,CAACG,kBAAV,EAAxB,CAHS,CAKT;AACA;;AACA,QAAKR,iBAAiB,CAAEO,eAAF,EAAmBJ,KAAK,CAACM,MAAzB,CAAtB,EAA0D;AACzD,WAAKC,SAAL,GAAiBP,KAAK,CAACM,MAAN,CAAaE,cAAb,CAA6BJ,eAA7B,EAA8C,UAA9C,CAAjB;AACA,KAFD,MAEO;AACN,WAAKG,SAAL,GAAiBP,KAAK,CAACM,MAAN,CAAaG,yBAAb,CAAwCP,SAAxC,EAAmD,UAAnD,CAAjB;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCQ,EAAAA,OAAO,GAAG;AACT,UAAMT,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMD,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,SAAS,GAAGF,KAAK,CAACG,QAAN,CAAeD,SAAjC;AACA,UAAMS,WAAW,GAAGV,MAAM,CAACW,QAAP,CAAgBC,GAAhB,CAAqB,MAArB,CAApB;AAEAb,IAAAA,KAAK,CAACc,MAAN,CAAcC,MAAM,IAAI;AACvB;AACA,YAAMC,cAAc,GAAGd,SAAS,CAACe,WAAV,GACtB,CAAErB,kBAAkB,CACnBM,SAAS,CAACgB,gBAAV,EADmB,EAEnB,UAFmB,EAGnBhB,SAAS,CAACiB,YAAV,CAAwB,UAAxB,CAHmB,EAInBnB,KAJmB,CAApB,CADsB,GAOtBA,KAAK,CAACM,MAAN,CAAac,cAAb,CAA6BlB,SAAS,CAACmB,SAAV,EAA7B,EAAoD,UAApD,CAPD,CAFuB,CAWvB;;AACA,WAAM,MAAMC,KAAZ,IAAqBN,cAArB,EAAsC;AACrCD,QAAAA,MAAM,CAACQ,eAAP,CAAwB,UAAxB,EAAoCD,KAApC,EADqC,CAErC;;AACA,YAAKX,WAAL,EAAmB;AAClB,eAAM,MAAMa,eAAZ,IAA+Bb,WAAW,CAACc,gBAA3C,EAA8D;AAC7DV,YAAAA,MAAM,CAACQ,eAAP,CAAwBC,eAAe,CAACE,EAAxC,EAA4CJ,KAA5C;AACA;AACD;AACD;AACD,KArBD;AAsBA;;AA3DiD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/unlinkcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { findAttributeRange } from 'ckeditor5/src/typing';\n\nimport { isLinkableElement } from './utils';\n\n/**\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\n *\n * @extends module:core/command~Command\n */\nexport default class UnlinkCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t// A check for any integration that allows linking elements (e.g. `LinkImage`).\n\t\t// Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n\t\tif ( isLinkableElement( selectedElement, model.schema ) ) {\n\t\t\tthis.isEnabled = model.schema.checkAttribute( selectedElement, 'linkHref' );\n\t\t} else {\n\t\t\tthis.isEnabled = model.schema.checkAttributeInSelection( selection, 'linkHref' );\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is collapsed, it removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\n\t * When the selection is non-collapsed, it removes the `linkHref` attribute from each node in selected ranges.\n\t *\n\t * # Decorators\n\t *\n\t * If {@link module:link/link~LinkConfig#decorators `config.link.decorators`} is specified,\n\t * all configured decorators are removed together with the `linkHref` attribute.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\n\t\tmodel.change( writer => {\n\t\t\t// Get ranges to unlink.\n\t\t\tconst rangesToUnlink = selection.isCollapsed ?\n\t\t\t\t[ findAttributeRange(\n\t\t\t\t\tselection.getFirstPosition(),\n\t\t\t\t\t'linkHref',\n\t\t\t\t\tselection.getAttribute( 'linkHref' ),\n\t\t\t\t\tmodel\n\t\t\t\t) ] :\n\t\t\t\tmodel.schema.getValidRanges( selection.getRanges(), 'linkHref' );\n\n\t\t\t// Remove `linkHref` attribute from specified ranges.\n\t\t\tfor ( const range of rangesToUnlink ) {\n\t\t\t\twriter.removeAttribute( 'linkHref', range );\n\t\t\t\t// If there are registered custom attributes, then remove them during unlink.\n\t\t\t\tif ( linkCommand ) {\n\t\t\t\t\tfor ( const manualDecorator of linkCommand.manualDecorators ) {\n\t\t\t\t\t\twriter.removeAttribute( manualDecorator.id, range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}