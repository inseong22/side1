{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizeediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageUtils from '../imageutils';\nimport ResizeImageCommand from './resizeimagecommand';\n/**\n * The image resize editing feature.\n *\n * It adds the ability to resize each image using handles or manually by\n * {@link module:image/imageresize/imageresizebuttons~ImageResizeButtons} buttons.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageResizeEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageUtils];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageResizeEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define('image', {\n      resizeUnit: '%',\n      resizeOptions: [{\n        name: 'resizeImage:original',\n        value: null,\n        icon: 'original'\n      }, {\n        name: 'resizeImage:25',\n        value: '25',\n        icon: 'small'\n      }, {\n        name: 'resizeImage:50',\n        value: '50',\n        icon: 'medium'\n      }, {\n        name: 'resizeImage:75',\n        value: '75',\n        icon: 'large'\n      }]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const resizeImageCommand = new ResizeImageCommand(editor);\n\n    this._registerSchema();\n\n    this._registerConverters('imageBlock');\n\n    this._registerConverters('imageInline'); // Register `resizeImage` command and add `imageResize` command as an alias for backward compatibility.\n\n\n    editor.commands.add('resizeImage', resizeImageCommand);\n    editor.commands.add('imageResize', resizeImageCommand);\n  }\n  /**\n   * @private\n   */\n\n\n  _registerSchema() {\n    if (this.editor.plugins.has('ImageBlockEditing')) {\n      this.editor.model.schema.extend('imageBlock', {\n        allowAttributes: 'width'\n      });\n    }\n\n    if (this.editor.plugins.has('ImageInlineEditing')) {\n      this.editor.model.schema.extend('imageInline', {\n        allowAttributes: 'width'\n      });\n    }\n  }\n  /**\n   * Registers image resize converters.\n   *\n   * @private\n   * @param {'imageBlock'|'imageInline'} imageType The type of the image.\n   */\n\n\n  _registerConverters(imageType) {\n    const editor = this.editor; // Dedicated converter to propagate image's attribute to the img tag.\n\n    editor.conversion.for('downcast').add(dispatcher => dispatcher.on(`attribute:width:${imageType}`, (evt, data, conversionApi) => {\n      if (!conversionApi.consumable.consume(data.item, evt.name)) {\n        return;\n      }\n\n      const viewWriter = conversionApi.writer;\n      const figure = conversionApi.mapper.toViewElement(data.item);\n\n      if (data.attributeNewValue !== null) {\n        viewWriter.setStyle('width', data.attributeNewValue, figure);\n        viewWriter.addClass('image_resized', figure);\n      } else {\n        viewWriter.removeStyle('width', figure);\n        viewWriter.removeClass('image_resized', figure);\n      }\n    }));\n    editor.conversion.for('upcast').attributeToAttribute({\n      view: {\n        name: imageType === 'imageBlock' ? 'figure' : 'img',\n        styles: {\n          width: /.+/\n        }\n      },\n      model: {\n        key: 'width',\n        value: viewElement => viewElement.getStyle('width')\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imageresize/imageresizeediting.js"],"names":["Plugin","ImageUtils","ResizeImageCommand","ImageResizeEditing","requires","pluginName","constructor","editor","config","define","resizeUnit","resizeOptions","name","value","icon","init","resizeImageCommand","_registerSchema","_registerConverters","commands","add","plugins","has","model","schema","extend","allowAttributes","imageType","conversion","for","dispatcher","on","evt","data","conversionApi","consumable","consume","item","viewWriter","writer","figure","mapper","toViewElement","attributeNewValue","setStyle","addClass","removeStyle","removeClass","attributeToAttribute","view","styles","width","key","viewElement","getStyle"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,oBAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCH,MAAjC,CAAwC;AACtD;AACD;AACA;AACoB,aAARI,QAAQ,GAAG;AACrB,WAAO,CAAEH,UAAF,CAAP;AACA;AAED;AACD;AACA;;;AACsB,aAAVI,UAAU,GAAG;AACvB,WAAO,oBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEAA,IAAAA,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAsB,OAAtB,EAA+B;AAC9BC,MAAAA,UAAU,EAAE,GADkB;AAE9BC,MAAAA,aAAa,EAAE,CAAE;AAChBC,QAAAA,IAAI,EAAE,sBADU;AAEhBC,QAAAA,KAAK,EAAE,IAFS;AAGhBC,QAAAA,IAAI,EAAE;AAHU,OAAF,EAKf;AACCF,QAAAA,IAAI,EAAE,gBADP;AAECC,QAAAA,KAAK,EAAE,IAFR;AAGCC,QAAAA,IAAI,EAAE;AAHP,OALe,EAUf;AACCF,QAAAA,IAAI,EAAE,gBADP;AAECC,QAAAA,KAAK,EAAE,IAFR;AAGCC,QAAAA,IAAI,EAAE;AAHP,OAVe,EAef;AACCF,QAAAA,IAAI,EAAE,gBADP;AAECC,QAAAA,KAAK,EAAE,IAFR;AAGCC,QAAAA,IAAI,EAAE;AAHP,OAfe;AAFe,KAA/B;AAuBA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMR,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMS,kBAAkB,GAAG,IAAId,kBAAJ,CAAwBK,MAAxB,CAA3B;;AAEA,SAAKU,eAAL;;AACA,SAAKC,mBAAL,CAA0B,YAA1B;;AACA,SAAKA,mBAAL,CAA0B,aAA1B,EANM,CAQN;;;AACAX,IAAAA,MAAM,CAACY,QAAP,CAAgBC,GAAhB,CAAqB,aAArB,EAAoCJ,kBAApC;AACAT,IAAAA,MAAM,CAACY,QAAP,CAAgBC,GAAhB,CAAqB,aAArB,EAAoCJ,kBAApC;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,eAAe,GAAG;AACjB,QAAK,KAAKV,MAAL,CAAYc,OAAZ,CAAoBC,GAApB,CAAyB,mBAAzB,CAAL,EAAsD;AACrD,WAAKf,MAAL,CAAYgB,KAAZ,CAAkBC,MAAlB,CAAyBC,MAAzB,CAAiC,YAAjC,EAA+C;AAAEC,QAAAA,eAAe,EAAE;AAAnB,OAA/C;AACA;;AAED,QAAK,KAAKnB,MAAL,CAAYc,OAAZ,CAAoBC,GAApB,CAAyB,oBAAzB,CAAL,EAAuD;AACtD,WAAKf,MAAL,CAAYgB,KAAZ,CAAkBC,MAAlB,CAAyBC,MAAzB,CAAiC,aAAjC,EAAgD;AAAEC,QAAAA,eAAe,EAAE;AAAnB,OAAhD;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCR,EAAAA,mBAAmB,CAAES,SAAF,EAAc;AAChC,UAAMpB,MAAM,GAAG,KAAKA,MAApB,CADgC,CAGhC;;AACAA,IAAAA,MAAM,CAACqB,UAAP,CAAkBC,GAAlB,CAAuB,UAAvB,EAAoCT,GAApC,CAAyCU,UAAU,IAClDA,UAAU,CAACC,EAAX,CAAgB,mBAAmBJ,SAAW,EAA9C,EAAiD,CAAEK,GAAF,EAAOC,IAAP,EAAaC,aAAb,KAAgC;AAChF,UAAK,CAACA,aAAa,CAACC,UAAd,CAAyBC,OAAzB,CAAkCH,IAAI,CAACI,IAAvC,EAA6CL,GAAG,CAACpB,IAAjD,CAAN,EAAgE;AAC/D;AACA;;AAED,YAAM0B,UAAU,GAAGJ,aAAa,CAACK,MAAjC;AACA,YAAMC,MAAM,GAAGN,aAAa,CAACO,MAAd,CAAqBC,aAArB,CAAoCT,IAAI,CAACI,IAAzC,CAAf;;AAEA,UAAKJ,IAAI,CAACU,iBAAL,KAA2B,IAAhC,EAAuC;AACtCL,QAAAA,UAAU,CAACM,QAAX,CAAqB,OAArB,EAA8BX,IAAI,CAACU,iBAAnC,EAAsDH,MAAtD;AACAF,QAAAA,UAAU,CAACO,QAAX,CAAqB,eAArB,EAAsCL,MAAtC;AACA,OAHD,MAGO;AACNF,QAAAA,UAAU,CAACQ,WAAX,CAAwB,OAAxB,EAAiCN,MAAjC;AACAF,QAAAA,UAAU,CAACS,WAAX,CAAwB,eAAxB,EAAyCP,MAAzC;AACA;AACD,KAfD,CADD;AAmBAjC,IAAAA,MAAM,CAACqB,UAAP,CAAkBC,GAAlB,CAAuB,QAAvB,EACEmB,oBADF,CACwB;AACtBC,MAAAA,IAAI,EAAE;AACLrC,QAAAA,IAAI,EAAEe,SAAS,KAAK,YAAd,GAA6B,QAA7B,GAAwC,KADzC;AAELuB,QAAAA,MAAM,EAAE;AACPC,UAAAA,KAAK,EAAE;AADA;AAFH,OADgB;AAOtB5B,MAAAA,KAAK,EAAE;AACN6B,QAAAA,GAAG,EAAE,OADC;AAENvC,QAAAA,KAAK,EAAEwC,WAAW,IAAIA,WAAW,CAACC,QAAZ,CAAsB,OAAtB;AAFhB;AAPe,KADxB;AAaA;;AArHqD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizeediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageUtils from '../imageutils';\nimport ResizeImageCommand from './resizeimagecommand';\n\n/**\n * The image resize editing feature.\n *\n * It adds the ability to resize each image using handles or manually by\n * {@link module:image/imageresize/imageresizebuttons~ImageResizeButtons} buttons.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageResizeEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageUtils ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageResizeEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'image', {\n\t\t\tresizeUnit: '%',\n\t\t\tresizeOptions: [ {\n\t\t\t\tname: 'resizeImage:original',\n\t\t\t\tvalue: null,\n\t\t\t\ticon: 'original'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'resizeImage:25',\n\t\t\t\tvalue: '25',\n\t\t\t\ticon: 'small'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'resizeImage:50',\n\t\t\t\tvalue: '50',\n\t\t\t\ticon: 'medium'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'resizeImage:75',\n\t\t\t\tvalue: '75',\n\t\t\t\ticon: 'large'\n\t\t\t} ]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst resizeImageCommand = new ResizeImageCommand( editor );\n\n\t\tthis._registerSchema();\n\t\tthis._registerConverters( 'imageBlock' );\n\t\tthis._registerConverters( 'imageInline' );\n\n\t\t// Register `resizeImage` command and add `imageResize` command as an alias for backward compatibility.\n\t\teditor.commands.add( 'resizeImage', resizeImageCommand );\n\t\teditor.commands.add( 'imageResize', resizeImageCommand );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_registerSchema() {\n\t\tif ( this.editor.plugins.has( 'ImageBlockEditing' ) ) {\n\t\t\tthis.editor.model.schema.extend( 'imageBlock', { allowAttributes: 'width' } );\n\t\t}\n\n\t\tif ( this.editor.plugins.has( 'ImageInlineEditing' ) ) {\n\t\t\tthis.editor.model.schema.extend( 'imageInline', { allowAttributes: 'width' } );\n\t\t}\n\t}\n\n\t/**\n\t * Registers image resize converters.\n\t *\n\t * @private\n\t * @param {'imageBlock'|'imageInline'} imageType The type of the image.\n\t */\n\t_registerConverters( imageType ) {\n\t\tconst editor = this.editor;\n\n\t\t// Dedicated converter to propagate image's attribute to the img tag.\n\t\teditor.conversion.for( 'downcast' ).add( dispatcher =>\n\t\t\tdispatcher.on( `attribute:width:${ imageType }`, ( evt, data, conversionApi ) => {\n\t\t\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\n\t\t\t\tif ( data.attributeNewValue !== null ) {\n\t\t\t\t\tviewWriter.setStyle( 'width', data.attributeNewValue, figure );\n\t\t\t\t\tviewWriter.addClass( 'image_resized', figure );\n\t\t\t\t} else {\n\t\t\t\t\tviewWriter.removeStyle( 'width', figure );\n\t\t\t\t\tviewWriter.removeClass( 'image_resized', figure );\n\t\t\t\t}\n\t\t\t} )\n\t\t);\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.attributeToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: imageType === 'imageBlock' ? 'figure' : 'img',\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\twidth: /.+/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'width',\n\t\t\t\t\tvalue: viewElement => viewElement.getStyle( 'width' )\n\t\t\t\t}\n\t\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}