{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageStyleCommand from './imagestylecommand';\nimport ImageUtils from '../imageutils';\nimport utils from './utils';\nimport { viewToModelStyleAttribute, modelToViewStyleAttribute } from './converters';\n/**\n * The image style engine plugin. It sets the default configuration, creates converters and registers\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand ImageStyleCommand}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageStyleEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageStyleEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [ImageUtils];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const {\n      normalizeStyles,\n      getDefaultStylesConfiguration\n    } = utils;\n    const editor = this.editor;\n    const isBlockPluginLoaded = editor.plugins.has('ImageBlockEditing');\n    const isInlinePluginLoaded = editor.plugins.has('ImageInlineEditing');\n    editor.config.define('image.styles', getDefaultStylesConfiguration(isBlockPluginLoaded, isInlinePluginLoaded));\n    /**\n     * It contains a list of the normalized and validated style options.\n     *\n     * * Each option contains a complete icon markup.\n     * * The style options not supported by any of the loaded image editing plugins (\n     * {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} or\n     * {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`}) are filtered out.\n     *\n     * @protected\n     * @readonly\n     * @type {module:image/imagestyle~ImageStyleConfig}\n     */\n\n    this.normalizedStyles = normalizeStyles({\n      configuredStyles: editor.config.get('image.styles'),\n      isBlockPluginLoaded,\n      isInlinePluginLoaded\n    });\n\n    this._setupConversion(isBlockPluginLoaded, isInlinePluginLoaded);\n\n    this._setupPostFixer(); // Register imageStyle command.\n\n\n    editor.commands.add('imageStyle', new ImageStyleCommand(editor, this.normalizedStyles));\n  }\n  /**\n   * Sets the editor conversion taking the presence of\n   * {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`}\n   * and {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugins into consideration.\n   *\n   * @private\n   * @param {Boolean} isBlockPluginLoaded\n   * @param {Boolean} isInlinePluginLoaded\n   */\n\n\n  _setupConversion(isBlockPluginLoaded, isInlinePluginLoaded) {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const modelToViewConverter = modelToViewStyleAttribute(this.normalizedStyles);\n    const viewToModelConverter = viewToModelStyleAttribute(this.normalizedStyles);\n    editor.editing.downcastDispatcher.on('attribute:imageStyle', modelToViewConverter);\n    editor.data.downcastDispatcher.on('attribute:imageStyle', modelToViewConverter); // Allow imageStyle attribute in image and imageInline.\n    // We could call it 'style' but https://github.com/ckeditor/ckeditor5-engine/issues/559.\n\n    if (isBlockPluginLoaded) {\n      schema.extend('imageBlock', {\n        allowAttributes: 'imageStyle'\n      }); // Converter for figure element from view to model.\n\n      editor.data.upcastDispatcher.on('element:figure', viewToModelConverter, {\n        priority: 'low'\n      });\n    }\n\n    if (isInlinePluginLoaded) {\n      schema.extend('imageInline', {\n        allowAttributes: 'imageStyle'\n      }); // Converter for the img element from view to model.\n\n      editor.data.upcastDispatcher.on('element:img', viewToModelConverter, {\n        priority: 'low'\n      });\n    }\n  }\n  /**\n   * Registers a post-fixer that will make sure that the style attribute value is correct for a specific image type (block vs inline).\n   *\n   * @private\n   */\n\n\n  _setupPostFixer() {\n    const editor = this.editor;\n    const document = editor.model.document;\n    const imageUtils = editor.plugins.get(ImageUtils);\n    const stylesMap = new Map(this.normalizedStyles.map(style => [style.name, style])); // Make sure that style attribute is valid for the image type.\n\n    document.registerPostFixer(writer => {\n      let changed = false;\n\n      for (const change of document.differ.getChanges()) {\n        if (change.type == 'insert' || change.type == 'attribute' && change.attributeKey == 'imageStyle') {\n          let element = change.type == 'insert' ? change.position.nodeAfter : change.range.start.nodeAfter;\n\n          if (element && element.is('element', 'paragraph') && element.childCount > 0) {\n            element = element.getChild(0);\n          }\n\n          if (!imageUtils.isImage(element)) {\n            continue;\n          }\n\n          const imageStyle = element.getAttribute('imageStyle');\n\n          if (!imageStyle) {\n            continue;\n          }\n\n          const imageStyleDefinition = stylesMap.get(imageStyle);\n\n          if (!imageStyleDefinition || !imageStyleDefinition.modelElements.includes(element.name)) {\n            writer.removeAttribute('imageStyle', element);\n            changed = true;\n          }\n        }\n      }\n\n      return changed;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestyleediting.js"],"names":["Plugin","ImageStyleCommand","ImageUtils","utils","viewToModelStyleAttribute","modelToViewStyleAttribute","ImageStyleEditing","pluginName","requires","init","normalizeStyles","getDefaultStylesConfiguration","editor","isBlockPluginLoaded","plugins","has","isInlinePluginLoaded","config","define","normalizedStyles","configuredStyles","get","_setupConversion","_setupPostFixer","commands","add","schema","model","modelToViewConverter","viewToModelConverter","editing","downcastDispatcher","on","data","extend","allowAttributes","upcastDispatcher","priority","document","imageUtils","stylesMap","Map","map","style","name","registerPostFixer","writer","changed","change","differ","getChanges","type","attributeKey","element","position","nodeAfter","range","start","is","childCount","getChild","isImage","imageStyle","getAttribute","imageStyleDefinition","modelElements","includes","removeAttribute"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageStyleCommand from './imagestylecommand';\nimport ImageUtils from '../imageutils';\nimport utils from './utils';\nimport { viewToModelStyleAttribute, modelToViewStyleAttribute } from './converters';\n\n/**\n * The image style engine plugin. It sets the default configuration, creates converters and registers\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand ImageStyleCommand}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyleEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyleEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageUtils ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst { normalizeStyles, getDefaultStylesConfiguration } = utils;\n\t\tconst editor = this.editor;\n\t\tconst isBlockPluginLoaded = editor.plugins.has( 'ImageBlockEditing' );\n\t\tconst isInlinePluginLoaded = editor.plugins.has( 'ImageInlineEditing' );\n\n\t\teditor.config.define( 'image.styles', getDefaultStylesConfiguration( isBlockPluginLoaded, isInlinePluginLoaded ) );\n\n\t\t/**\n\t\t * It contains a list of the normalized and validated style options.\n\t\t *\n\t\t * * Each option contains a complete icon markup.\n\t\t * * The style options not supported by any of the loaded image editing plugins (\n\t\t * {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} or\n\t\t * {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`}) are filtered out.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @type {module:image/imagestyle~ImageStyleConfig}\n\t\t */\n\t\tthis.normalizedStyles = normalizeStyles( {\n\t\t\tconfiguredStyles: editor.config.get( 'image.styles' ),\n\t\t\tisBlockPluginLoaded,\n\t\t\tisInlinePluginLoaded\n\t\t} );\n\n\t\tthis._setupConversion( isBlockPluginLoaded, isInlinePluginLoaded );\n\t\tthis._setupPostFixer();\n\n\t\t// Register imageStyle command.\n\t\teditor.commands.add( 'imageStyle', new ImageStyleCommand( editor, this.normalizedStyles ) );\n\t}\n\n\t/**\n\t * Sets the editor conversion taking the presence of\n\t * {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`}\n\t * and {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugins into consideration.\n\t *\n\t * @private\n\t * @param {Boolean} isBlockPluginLoaded\n\t * @param {Boolean} isInlinePluginLoaded\n\t */\n\t_setupConversion( isBlockPluginLoaded, isInlinePluginLoaded ) {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\n\t\tconst modelToViewConverter = modelToViewStyleAttribute( this.normalizedStyles );\n\t\tconst viewToModelConverter = viewToModelStyleAttribute( this.normalizedStyles );\n\n\t\teditor.editing.downcastDispatcher.on( 'attribute:imageStyle', modelToViewConverter );\n\t\teditor.data.downcastDispatcher.on( 'attribute:imageStyle', modelToViewConverter );\n\n\t\t// Allow imageStyle attribute in image and imageInline.\n\t\t// We could call it 'style' but https://github.com/ckeditor/ckeditor5-engine/issues/559.\n\t\tif ( isBlockPluginLoaded ) {\n\t\t\tschema.extend( 'imageBlock', { allowAttributes: 'imageStyle' } );\n\n\t\t\t// Converter for figure element from view to model.\n\t\t\teditor.data.upcastDispatcher.on( 'element:figure', viewToModelConverter, { priority: 'low' } );\n\t\t}\n\n\t\tif ( isInlinePluginLoaded ) {\n\t\t\tschema.extend( 'imageInline', { allowAttributes: 'imageStyle' } );\n\n\t\t\t// Converter for the img element from view to model.\n\t\t\teditor.data.upcastDispatcher.on( 'element:img', viewToModelConverter, { priority: 'low' } );\n\t\t}\n\t}\n\n\t/**\n\t * Registers a post-fixer that will make sure that the style attribute value is correct for a specific image type (block vs inline).\n\t *\n\t * @private\n\t */\n\t_setupPostFixer() {\n\t\tconst editor = this.editor;\n\t\tconst document = editor.model.document;\n\n\t\tconst imageUtils = editor.plugins.get( ImageUtils );\n\t\tconst stylesMap = new Map( this.normalizedStyles.map( style => [ style.name, style ] ) );\n\n\t\t// Make sure that style attribute is valid for the image type.\n\t\tdocument.registerPostFixer( writer => {\n\t\t\tlet changed = false;\n\n\t\t\tfor ( const change of document.differ.getChanges() ) {\n\t\t\t\tif ( change.type == 'insert' || change.type == 'attribute' && change.attributeKey == 'imageStyle' ) {\n\t\t\t\t\tlet element = change.type == 'insert' ? change.position.nodeAfter : change.range.start.nodeAfter;\n\n\t\t\t\t\tif ( element && element.is( 'element', 'paragraph' ) && element.childCount > 0 ) {\n\t\t\t\t\t\telement = element.getChild( 0 );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !imageUtils.isImage( element ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst imageStyle = element.getAttribute( 'imageStyle' );\n\n\t\t\t\t\tif ( !imageStyle ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst imageStyleDefinition = stylesMap.get( imageStyle );\n\n\t\t\t\t\tif ( !imageStyleDefinition || !imageStyleDefinition.modelElements.includes( element.name ) ) {\n\t\t\t\t\t\twriter.removeAttribute( 'imageStyle', element );\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}