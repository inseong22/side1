{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageStyleEditing from './imagestyle/imagestyleediting';\nimport ImageStyleUI from './imagestyle/imagestyleui';\n/**\n * The image style plugin.\n *\n * For a detailed overview of the image styles feature, check the {@glink features/images/images-styles documentation}.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n * * {@link module:image/imagestyle/imagestyleediting~ImageStyleEditing},\n * * {@link module:image/imagestyle/imagestyleui~ImageStyleUI}\n *\n * It provides a default configuration, which can be extended or overwritten.\n * Read more about the {@link module:image/image~ImageConfig#styles image styles configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageStyle extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageStyleEditing, ImageStyleUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageStyle';\n  }\n\n}\n/**\n * The configuration for the {@link module:image/imagestyle~ImageStyle} plugin that should be provided\n * while creating the editor instance.\n *\n * A detailed information about the default configuration and customization can be found in\n * {@link module:image/image~ImageConfig#styles `ImageConfig#styles`}.\n *\n * @interface ImageStyleConfig\n */\n\n/**\n * A list of the image style options.\n *\n * @member {Array.<module:image/imagestyle~ImageStyleOptionDefinition>} module:image/imagestyle~ImageStyleConfig#options\n */\n\n/**\n * The {@link module:image/imagestyle `ImageStyle`} plugin requires a list of the\n * {@link module:image/imagestyle~ImageStyleConfig#options image style options} to work properly.\n * The default configuration is provided (listed below) and can be customized while creating the editor instance.\n *\n * # **Command**\n *\n * The {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand `imageStyleCommand`}\n * is configured based on the defined options,\n * so you can change the style of the selected image by executing the following command:\n *\n *\t\teditor.execute( 'imageStyle' { value: 'alignLeft' } );\n *\n * # **Buttons**\n *\n * All of the image style options provided in the configuration are registered\n * in the {@link module:ui/componentfactory~ComponentFactory UI components factory} with the \"imageStyle:\" prefixes and can be used\n * in the {@link module:image/image~ImageConfig#toolbar image toolbar configuration}. The buttons available by default depending\n * on the loaded plugins are listed in the next section.\n *\n * Read more about styling images in the {@glink features/images/images-styles Image styles guide}.\n *\n * # **Default options and buttons**\n *\n * If the custom configuration is not provided, the default configuration will be used depending on the loaded\n * image editing plugins.\n *\n * * If both {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} and\n * {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugins are loaded\n * (which is usually the default editor configuration), the following options will be available for the toolbar\n * configuration. These options will be registered as the buttons with the \"imageStyle:\" prefixes.\n *\n *\t\tconst imageDefaultConfig = {\n *\t\t\tstyles: {\n *\t\t\t\toptions: [\n *\t\t\t\t\t'inline', 'alignLeft', 'alignRight',\n *\t\t\t\t\t'alignCenter', 'alignBlockLeft', 'alignBlockRight',\n *\t\t\t\t\t'block', 'side'\n *\t\t\t\t]\n *\t\t\t}\n *\t\t};\n *\n * * If only the {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugin is loaded,\n * the following buttons (options) and groups will be available for the toolbar configuration.\n * These options will be registered as the buttons with the \"imageStyle:\" prefixes.\n *\n *\t\tconst imageDefaultConfig = {\n *\t\t\tstyles: {\n *\t\t\t\toptions: [ 'block', 'side' ]\n *\t\t\t}\n *\t\t};\n *\n * * If only the {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugin is loaded,\n * the following buttons (options) and groups will available for the toolbar configuration.\n * These options will be registered as the buttons with the \"imageStyle:\" prefixes.\n *\n *\t\tconst imageDefaultConfig = {\n *\t\t\tstyles: {\n *\t\t\t\toptions: [ 'inline', 'alignLeft', 'alignRight' ]\n *\t\t\t}\n *\t\t};\n *\n * Read more about the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options}.\n *\n * # **Custom configuration**\n *\n * The image styles configuration can be customized in several ways:\n *\n * * Any of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options}\n * can be loaded by the reference to its name as follows:\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\timage: {\n *\t\t\t\t\tstyles: {\n *\t\t\t\t\t\toptions: [ 'alignLeft', 'alignRight' ]\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} );\n *\n * * Each of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default image style options} can be customized,\n * e.g. to change the `icon`, `title` or CSS `className` of the style. The feature also provides several\n * {@link module:image/imagestyle/utils~DEFAULT_ICONS default icons} to choose from.\n *\n *\t\timport customIcon from 'custom-icon.svg';\n *\n *\t\t// ...\n *\n *\t\tClassicEditor.create( editorElement, { image:\n *\t\t\tstyles: {\n *\t\t\t\toptions: {\n *\t\t\t\t\t// This will only customize the icon of the \"block\" style.\n *\t\t\t\t\t// Note: 'right' is one of default icons provided by the feature.\n *\t\t\t\t\t{\n *\t\t\t\t\t\tname: 'block',\n *\t\t\t\t\t\ticon: 'right'\n *\t\t\t\t\t},\n *\n *\t\t\t\t\t// This will customize the icon, title and CSS class of the default \"side\" style.\n *\t\t\t\t\t{\n *\t\t\t\t\t\tname: 'side',\n *\t\t\t\t\t\ticon: customIcon,\n *\t\t\t\t\t\ttitle: 'My side style',\n *\t\t\t\t\t\tclassName: 'custom-side-image'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * * If none of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default image style options}\n * works for the integration, it is possible to define independent custom styles, too.\n *\n * See the documentation about the image style {@link module:image/imagestyle~ImageStyleOptionDefinition options}\n * to define the custom image style configuration properly.\n *\n *\t\timport redIcon from 'red-icon.svg';\n *\t\timport blueIcon from 'blue-icon.svg';\n *\n *\t\t// ...\n *\n *\t\tClassicEditor.create( editorElement, { image:\n *\t\t\tstyles: {\n *\t\t\t\t// A list of completely custom styling options.\n *\t\t\t\toptions: [\n *\t\t\t\t\t{\n *\t\t\t\t\t\tname: 'regular',\n *\t\t\t\t\t\tmodelElements: [ 'imageBlock', 'imageInline' ],\n *\t\t\t\t\t\ttitle: 'Regular image',\n *\t\t\t\t\t\ticon: 'full',\n *\t\t\t\t\t\tisDefault: true\n *\t\t\t\t\t}, {\n *\t\t\t\t\t\tname: 'blue',\n *\t\t\t\t\t\tmodelElements: [ 'imageInline' ],\n *\t\t\t\t\t\ttitle: 'Blue image',\n *\t\t\t\t\t\ticon: blueIcon,\n *\t\t\t\t\t\tclassName: 'image-blue'\n *\t\t\t\t\t}, {\n *\t\t\t\t\t\tname: 'red',\n *\t\t\t\t\t\tmodelElements: [ 'imageBlock' ],\n *\t\t\t\t\t\ttitle: 'Red image',\n *\t\t\t\t\t\ticon: redIcon,\n *\t\t\t\t\t\tclassName: 'image-red'\n *\t\t\t\t\t}\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} );\n *\n * @member {module:image/imagestyle~ImageStyleConfig} module:image/image~ImageConfig#styles\n */\n\n/**\n * The image styling option definition descriptor.\n *\n * This definition should be implemented in the `Image` plugin {@link module:image/image~ImageConfig#styles configuration} for:\n *\n * * customizing one of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} by providing the proper name\n * of the default style and the properties that should be overridden,\n * * or defining a completely custom styling option by providing a custom name and implementing the following properties.\n *\n *\t\timport fullSizeIcon from 'path/to/icon.svg';\n *\n *\t\tconst imageStyleOptionDefinition = {\n *\t\t\tname: 'fullSize',\n *\t\t\ticon: fullSizeIcon,\n *\t\t\ttitle: 'Full size image',\n *\t\t\tclassName: 'image-full-size',\n *\t\t\tmodelElements: [ 'imageBlock', 'imageInline' ]\n *\t\t}\n *\n * The styling option will be registered as the button under the name `'imageStyle:{name}'` in the\n * {@link module:ui/componentfactory~ComponentFactory UI components factory} (this functionality is provided by the\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugin).\n *\n * @property {String} name The unique name of the styling option. It will be used to:\n *\n * * refer to one of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} or define the custom style,\n * * store the chosen style in the model by setting the `imageStyle` attribute of the model image element,\n * * as a value of the {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle` command},\n * * when registering a button for the style in the following manner: (`'imageStyle:{name}'`).\n *\n * @property {Boolean} [isDefault] When set, the style will be used as the default one for the model elements\n * listed in the `modelElements` property. A default style does not apply any CSS class to the view element.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @property {String} icon One of the following to be used when creating the styles's button:\n *\n * * an SVG icon source (as an XML string),\n * * one of the keys in {@link module:image/imagestyle/utils~DEFAULT_ICONS} to use one of default icons provided by the plugin.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @property {String} title The styles's title. Setting `title` to one of\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI#localizedDefaultStylesTitles}\n * will automatically translate it to the language of the editor.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @property {String} [className] The CSS class used to represent the style in the view.\n * It should be used only for the non-default styles.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @property {Array.<String>} modelElements The list of the names of the model elements that are supported by the style.\n * The possible values are:\n * * `[ 'imageBlock' ]` if the style can be applied to the image type introduced by the\n * {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugin,\n * * `[ 'imageInline' ]` if the style can be applied to the image type introduced by the\n * {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugin,\n * * `[ 'imageInline', 'imageBlock' ]` if the style can be applied to both image types introduced by the plugins mentioned above.\n *\n * This property determines which model element names work with the style. If the model element name of the currently selected\n * image is different, upon executing the\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle`} command the image type (model element name)\n * will automatically change.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @typedef {Object} module:image/imagestyle~ImageStyleOptionDefinition\n */","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imagestyle.js"],"names":["Plugin","ImageStyleEditing","ImageStyleUI","ImageStyle","requires","pluginName"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,oBAAvB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,UAAN,SAAyBH,MAAzB,CAAgC;AAC9C;AACD;AACA;AACoB,aAARI,QAAQ,GAAG;AACrB,WAAO,CAAEH,iBAAF,EAAqBC,YAArB,CAAP;AACA;AAED;AACD;AACA;;;AACsB,aAAVG,UAAU,GAAG;AACvB,WAAO,YAAP;AACA;;AAb6C;AAgB/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageStyleEditing from './imagestyle/imagestyleediting';\nimport ImageStyleUI from './imagestyle/imagestyleui';\n\n/**\n * The image style plugin.\n *\n * For a detailed overview of the image styles feature, check the {@glink features/images/images-styles documentation}.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n * * {@link module:image/imagestyle/imagestyleediting~ImageStyleEditing},\n * * {@link module:image/imagestyle/imagestyleui~ImageStyleUI}\n *\n * It provides a default configuration, which can be extended or overwritten.\n * Read more about the {@link module:image/image~ImageConfig#styles image styles configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyle extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageStyleEditing, ImageStyleUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyle';\n\t}\n}\n\n/**\n * The configuration for the {@link module:image/imagestyle~ImageStyle} plugin that should be provided\n * while creating the editor instance.\n *\n * A detailed information about the default configuration and customization can be found in\n * {@link module:image/image~ImageConfig#styles `ImageConfig#styles`}.\n *\n * @interface ImageStyleConfig\n */\n\n/**\n * A list of the image style options.\n *\n * @member {Array.<module:image/imagestyle~ImageStyleOptionDefinition>} module:image/imagestyle~ImageStyleConfig#options\n */\n\n/**\n * The {@link module:image/imagestyle `ImageStyle`} plugin requires a list of the\n * {@link module:image/imagestyle~ImageStyleConfig#options image style options} to work properly.\n * The default configuration is provided (listed below) and can be customized while creating the editor instance.\n *\n * # **Command**\n *\n * The {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand `imageStyleCommand`}\n * is configured based on the defined options,\n * so you can change the style of the selected image by executing the following command:\n *\n *\t\teditor.execute( 'imageStyle' { value: 'alignLeft' } );\n *\n * # **Buttons**\n *\n * All of the image style options provided in the configuration are registered\n * in the {@link module:ui/componentfactory~ComponentFactory UI components factory} with the \"imageStyle:\" prefixes and can be used\n * in the {@link module:image/image~ImageConfig#toolbar image toolbar configuration}. The buttons available by default depending\n * on the loaded plugins are listed in the next section.\n *\n * Read more about styling images in the {@glink features/images/images-styles Image styles guide}.\n *\n * # **Default options and buttons**\n *\n * If the custom configuration is not provided, the default configuration will be used depending on the loaded\n * image editing plugins.\n *\n * * If both {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} and\n * {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugins are loaded\n * (which is usually the default editor configuration), the following options will be available for the toolbar\n * configuration. These options will be registered as the buttons with the \"imageStyle:\" prefixes.\n *\n *\t\tconst imageDefaultConfig = {\n *\t\t\tstyles: {\n *\t\t\t\toptions: [\n *\t\t\t\t\t'inline', 'alignLeft', 'alignRight',\n *\t\t\t\t\t'alignCenter', 'alignBlockLeft', 'alignBlockRight',\n *\t\t\t\t\t'block', 'side'\n *\t\t\t\t]\n *\t\t\t}\n *\t\t};\n *\n * * If only the {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugin is loaded,\n * the following buttons (options) and groups will be available for the toolbar configuration.\n * These options will be registered as the buttons with the \"imageStyle:\" prefixes.\n *\n *\t\tconst imageDefaultConfig = {\n *\t\t\tstyles: {\n *\t\t\t\toptions: [ 'block', 'side' ]\n *\t\t\t}\n *\t\t};\n *\n * * If only the {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugin is loaded,\n * the following buttons (options) and groups will available for the toolbar configuration.\n * These options will be registered as the buttons with the \"imageStyle:\" prefixes.\n *\n *\t\tconst imageDefaultConfig = {\n *\t\t\tstyles: {\n *\t\t\t\toptions: [ 'inline', 'alignLeft', 'alignRight' ]\n *\t\t\t}\n *\t\t};\n *\n * Read more about the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options}.\n *\n * # **Custom configuration**\n *\n * The image styles configuration can be customized in several ways:\n *\n * * Any of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options}\n * can be loaded by the reference to its name as follows:\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\timage: {\n *\t\t\t\t\tstyles: {\n *\t\t\t\t\t\toptions: [ 'alignLeft', 'alignRight' ]\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} );\n *\n * * Each of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default image style options} can be customized,\n * e.g. to change the `icon`, `title` or CSS `className` of the style. The feature also provides several\n * {@link module:image/imagestyle/utils~DEFAULT_ICONS default icons} to choose from.\n *\n *\t\timport customIcon from 'custom-icon.svg';\n *\n *\t\t// ...\n *\n *\t\tClassicEditor.create( editorElement, { image:\n *\t\t\tstyles: {\n *\t\t\t\toptions: {\n *\t\t\t\t\t// This will only customize the icon of the \"block\" style.\n *\t\t\t\t\t// Note: 'right' is one of default icons provided by the feature.\n *\t\t\t\t\t{\n *\t\t\t\t\t\tname: 'block',\n *\t\t\t\t\t\ticon: 'right'\n *\t\t\t\t\t},\n *\n *\t\t\t\t\t// This will customize the icon, title and CSS class of the default \"side\" style.\n *\t\t\t\t\t{\n *\t\t\t\t\t\tname: 'side',\n *\t\t\t\t\t\ticon: customIcon,\n *\t\t\t\t\t\ttitle: 'My side style',\n *\t\t\t\t\t\tclassName: 'custom-side-image'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * * If none of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default image style options}\n * works for the integration, it is possible to define independent custom styles, too.\n *\n * See the documentation about the image style {@link module:image/imagestyle~ImageStyleOptionDefinition options}\n * to define the custom image style configuration properly.\n *\n *\t\timport redIcon from 'red-icon.svg';\n *\t\timport blueIcon from 'blue-icon.svg';\n *\n *\t\t// ...\n *\n *\t\tClassicEditor.create( editorElement, { image:\n *\t\t\tstyles: {\n *\t\t\t\t// A list of completely custom styling options.\n *\t\t\t\toptions: [\n *\t\t\t\t\t{\n *\t\t\t\t\t\tname: 'regular',\n *\t\t\t\t\t\tmodelElements: [ 'imageBlock', 'imageInline' ],\n *\t\t\t\t\t\ttitle: 'Regular image',\n *\t\t\t\t\t\ticon: 'full',\n *\t\t\t\t\t\tisDefault: true\n *\t\t\t\t\t}, {\n *\t\t\t\t\t\tname: 'blue',\n *\t\t\t\t\t\tmodelElements: [ 'imageInline' ],\n *\t\t\t\t\t\ttitle: 'Blue image',\n *\t\t\t\t\t\ticon: blueIcon,\n *\t\t\t\t\t\tclassName: 'image-blue'\n *\t\t\t\t\t}, {\n *\t\t\t\t\t\tname: 'red',\n *\t\t\t\t\t\tmodelElements: [ 'imageBlock' ],\n *\t\t\t\t\t\ttitle: 'Red image',\n *\t\t\t\t\t\ticon: redIcon,\n *\t\t\t\t\t\tclassName: 'image-red'\n *\t\t\t\t\t}\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} );\n *\n * @member {module:image/imagestyle~ImageStyleConfig} module:image/image~ImageConfig#styles\n */\n\n/**\n * The image styling option definition descriptor.\n *\n * This definition should be implemented in the `Image` plugin {@link module:image/image~ImageConfig#styles configuration} for:\n *\n * * customizing one of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} by providing the proper name\n * of the default style and the properties that should be overridden,\n * * or defining a completely custom styling option by providing a custom name and implementing the following properties.\n *\n *\t\timport fullSizeIcon from 'path/to/icon.svg';\n *\n *\t\tconst imageStyleOptionDefinition = {\n *\t\t\tname: 'fullSize',\n *\t\t\ticon: fullSizeIcon,\n *\t\t\ttitle: 'Full size image',\n *\t\t\tclassName: 'image-full-size',\n *\t\t\tmodelElements: [ 'imageBlock', 'imageInline' ]\n *\t\t}\n *\n * The styling option will be registered as the button under the name `'imageStyle:{name}'` in the\n * {@link module:ui/componentfactory~ComponentFactory UI components factory} (this functionality is provided by the\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugin).\n *\n * @property {String} name The unique name of the styling option. It will be used to:\n *\n * * refer to one of the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} or define the custom style,\n * * store the chosen style in the model by setting the `imageStyle` attribute of the model image element,\n * * as a value of the {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle` command},\n * * when registering a button for the style in the following manner: (`'imageStyle:{name}'`).\n *\n * @property {Boolean} [isDefault] When set, the style will be used as the default one for the model elements\n * listed in the `modelElements` property. A default style does not apply any CSS class to the view element.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @property {String} icon One of the following to be used when creating the styles's button:\n *\n * * an SVG icon source (as an XML string),\n * * one of the keys in {@link module:image/imagestyle/utils~DEFAULT_ICONS} to use one of default icons provided by the plugin.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @property {String} title The styles's title. Setting `title` to one of\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI#localizedDefaultStylesTitles}\n * will automatically translate it to the language of the editor.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @property {String} [className] The CSS class used to represent the style in the view.\n * It should be used only for the non-default styles.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @property {Array.<String>} modelElements The list of the names of the model elements that are supported by the style.\n * The possible values are:\n * * `[ 'imageBlock' ]` if the style can be applied to the image type introduced by the\n * {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugin,\n * * `[ 'imageInline' ]` if the style can be applied to the image type introduced by the\n * {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugin,\n * * `[ 'imageInline', 'imageBlock' ]` if the style can be applied to both image types introduced by the plugins mentioned above.\n *\n * This property determines which model element names work with the style. If the model element name of the currently selected\n * image is different, upon executing the\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle`} command the image type (model element name)\n * will automatically change.\n *\n * If this property is not defined, its value is inherited\n * from the {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default styling options} addressed in the name property.\n *\n * @typedef {Object} module:image/imagestyle~ImageStyleOptionDefinition\n */\n"]},"metadata":{},"sourceType":"module"}