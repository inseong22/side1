{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/parse\n */\n\n/* globals DOMParser */\nimport { DomConverter, ViewDocument } from 'ckeditor5/src/engine';\nimport { normalizeSpacing, normalizeSpacerunSpans } from './space';\n/**\n * Parses provided HTML extracting contents of `<body>` and `<style>` tags.\n *\n * @param {String} htmlString HTML string to be parsed.\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n * @returns {Object} result\n * @returns {module:engine/view/documentfragment~DocumentFragment} result.body Parsed body\n * content as a traversable structure.\n * @returns {String} result.bodyString Entire body content as a string.\n * @returns {Array.<CSSStyleSheet>} result.styles Array of native `CSSStyleSheet` objects, each representing\n * separate `style` tag from the source HTML.\n * @returns {String} result.stylesString All `style` tags contents combined in the order of occurrence into one string.\n */\n\nexport function parseHtml(htmlString, stylesProcessor) {\n  const domParser = new DOMParser(); // Remove Word specific \"if comments\" so content inside is not omitted by the parser.\n\n  htmlString = htmlString.replace(/<!--\\[if gte vml 1]>/g, '');\n  const normalizedHtml = normalizeSpacing(cleanContentAfterBody(htmlString)); // Parse htmlString as native Document object.\n\n  const htmlDocument = domParser.parseFromString(normalizedHtml, 'text/html');\n  normalizeSpacerunSpans(htmlDocument); // Get `innerHTML` first as transforming to View modifies the source document.\n\n  const bodyString = htmlDocument.body.innerHTML; // Transform document.body to View.\n\n  const bodyView = documentToView(htmlDocument, stylesProcessor); // Extract stylesheets.\n\n  const stylesObject = extractStyles(htmlDocument);\n  return {\n    body: bodyView,\n    bodyString,\n    styles: stylesObject.styles,\n    stylesString: stylesObject.stylesString\n  };\n} // Transforms native `Document` object into {@link module:engine/view/documentfragment~DocumentFragment}. Comments are skipped.\n//\n// @param {Document} htmlDocument Native `Document` object to be transformed.\n// @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n// @returns {module:engine/view/documentfragment~DocumentFragment}\n\nfunction documentToView(htmlDocument, stylesProcessor) {\n  const viewDocument = new ViewDocument(stylesProcessor);\n  const domConverter = new DomConverter(viewDocument, {\n    renderingMode: 'data'\n  });\n  const fragment = htmlDocument.createDocumentFragment();\n  const nodes = htmlDocument.body.childNodes;\n\n  while (nodes.length > 0) {\n    fragment.appendChild(nodes[0]);\n  }\n\n  return domConverter.domToView(fragment, {\n    skipComments: true\n  });\n} // Extracts both `CSSStyleSheet` and string representation from all `style` elements available in a provided `htmlDocument`.\n//\n// @param {Document} htmlDocument Native `Document` object from which styles will be extracted.\n// @returns {Object} result\n// @returns {Array.<CSSStyleSheet>} result.styles Array of native `CSSStyleSheet` object, each representing\n// separate `style` tag from the source object.\n// @returns {String} result.stylesString All `style` tags contents combined in the order of occurrence as one string.\n\n\nfunction extractStyles(htmlDocument) {\n  const styles = [];\n  const stylesString = [];\n  const styleTags = Array.from(htmlDocument.getElementsByTagName('style'));\n\n  for (const style of styleTags) {\n    if (style.sheet && style.sheet.cssRules && style.sheet.cssRules.length) {\n      styles.push(style.sheet);\n      stylesString.push(style.innerHTML);\n    }\n  }\n\n  return {\n    styles,\n    stylesString: stylesString.join(' ')\n  };\n} // Removes leftover content from between closing </body> and closing </html> tag:\n//\n// \t\t<html><body><p>Foo Bar</p></body><span>Fo</span></html> -> <html><body><p>Foo Bar</p></body></html>\n//\n// This function is used as specific browsers (Edge) add some random content after `body` tag when pasting from Word.\n// @param {String} htmlString The HTML string to be cleaned.\n// @returns {String} The HTML string with leftover content removed.\n\n\nfunction cleanContentAfterBody(htmlString) {\n  const bodyCloseTag = '</body>';\n  const htmlCloseTag = '</html>';\n  const bodyCloseIndex = htmlString.indexOf(bodyCloseTag);\n\n  if (bodyCloseIndex < 0) {\n    return htmlString;\n  }\n\n  const htmlCloseIndex = htmlString.indexOf(htmlCloseTag, bodyCloseIndex + bodyCloseTag.length);\n  return htmlString.substring(0, bodyCloseIndex + bodyCloseTag.length) + (htmlCloseIndex >= 0 ? htmlString.substring(htmlCloseIndex) : '');\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-paste-from-office/src/filters/parse.js"],"names":["DomConverter","ViewDocument","normalizeSpacing","normalizeSpacerunSpans","parseHtml","htmlString","stylesProcessor","domParser","DOMParser","replace","normalizedHtml","cleanContentAfterBody","htmlDocument","parseFromString","bodyString","body","innerHTML","bodyView","documentToView","stylesObject","extractStyles","styles","stylesString","viewDocument","domConverter","renderingMode","fragment","createDocumentFragment","nodes","childNodes","length","appendChild","domToView","skipComments","styleTags","Array","from","getElementsByTagName","style","sheet","cssRules","push","join","bodyCloseTag","htmlCloseTag","bodyCloseIndex","indexOf","htmlCloseIndex","substring"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/parse\n */\n\n/* globals DOMParser */\n\nimport { DomConverter, ViewDocument } from 'ckeditor5/src/engine';\n\nimport { normalizeSpacing, normalizeSpacerunSpans } from './space';\n\n/**\n * Parses provided HTML extracting contents of `<body>` and `<style>` tags.\n *\n * @param {String} htmlString HTML string to be parsed.\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n * @returns {Object} result\n * @returns {module:engine/view/documentfragment~DocumentFragment} result.body Parsed body\n * content as a traversable structure.\n * @returns {String} result.bodyString Entire body content as a string.\n * @returns {Array.<CSSStyleSheet>} result.styles Array of native `CSSStyleSheet` objects, each representing\n * separate `style` tag from the source HTML.\n * @returns {String} result.stylesString All `style` tags contents combined in the order of occurrence into one string.\n */\nexport function parseHtml( htmlString, stylesProcessor ) {\n\tconst domParser = new DOMParser();\n\n\t// Remove Word specific \"if comments\" so content inside is not omitted by the parser.\n\thtmlString = htmlString.replace( /<!--\\[if gte vml 1]>/g, '' );\n\n\tconst normalizedHtml = normalizeSpacing( cleanContentAfterBody( htmlString ) );\n\n\t// Parse htmlString as native Document object.\n\tconst htmlDocument = domParser.parseFromString( normalizedHtml, 'text/html' );\n\n\tnormalizeSpacerunSpans( htmlDocument );\n\n\t// Get `innerHTML` first as transforming to View modifies the source document.\n\tconst bodyString = htmlDocument.body.innerHTML;\n\n\t// Transform document.body to View.\n\tconst bodyView = documentToView( htmlDocument, stylesProcessor );\n\n\t// Extract stylesheets.\n\tconst stylesObject = extractStyles( htmlDocument );\n\n\treturn {\n\t\tbody: bodyView,\n\t\tbodyString,\n\t\tstyles: stylesObject.styles,\n\t\tstylesString: stylesObject.stylesString\n\t};\n}\n\n// Transforms native `Document` object into {@link module:engine/view/documentfragment~DocumentFragment}. Comments are skipped.\n//\n// @param {Document} htmlDocument Native `Document` object to be transformed.\n// @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n// @returns {module:engine/view/documentfragment~DocumentFragment}\nfunction documentToView( htmlDocument, stylesProcessor ) {\n\tconst viewDocument = new ViewDocument( stylesProcessor );\n\tconst domConverter = new DomConverter( viewDocument, { renderingMode: 'data' } );\n\tconst fragment = htmlDocument.createDocumentFragment();\n\tconst nodes = htmlDocument.body.childNodes;\n\n\twhile ( nodes.length > 0 ) {\n\t\tfragment.appendChild( nodes[ 0 ] );\n\t}\n\n\treturn domConverter.domToView( fragment, { skipComments: true } );\n}\n\n// Extracts both `CSSStyleSheet` and string representation from all `style` elements available in a provided `htmlDocument`.\n//\n// @param {Document} htmlDocument Native `Document` object from which styles will be extracted.\n// @returns {Object} result\n// @returns {Array.<CSSStyleSheet>} result.styles Array of native `CSSStyleSheet` object, each representing\n// separate `style` tag from the source object.\n// @returns {String} result.stylesString All `style` tags contents combined in the order of occurrence as one string.\nfunction extractStyles( htmlDocument ) {\n\tconst styles = [];\n\tconst stylesString = [];\n\tconst styleTags = Array.from( htmlDocument.getElementsByTagName( 'style' ) );\n\n\tfor ( const style of styleTags ) {\n\t\tif ( style.sheet && style.sheet.cssRules && style.sheet.cssRules.length ) {\n\t\t\tstyles.push( style.sheet );\n\t\t\tstylesString.push( style.innerHTML );\n\t\t}\n\t}\n\n\treturn {\n\t\tstyles,\n\t\tstylesString: stylesString.join( ' ' )\n\t};\n}\n\n// Removes leftover content from between closing </body> and closing </html> tag:\n//\n// \t\t<html><body><p>Foo Bar</p></body><span>Fo</span></html> -> <html><body><p>Foo Bar</p></body></html>\n//\n// This function is used as specific browsers (Edge) add some random content after `body` tag when pasting from Word.\n// @param {String} htmlString The HTML string to be cleaned.\n// @returns {String} The HTML string with leftover content removed.\nfunction cleanContentAfterBody( htmlString ) {\n\tconst bodyCloseTag = '</body>';\n\tconst htmlCloseTag = '</html>';\n\n\tconst bodyCloseIndex = htmlString.indexOf( bodyCloseTag );\n\n\tif ( bodyCloseIndex < 0 ) {\n\t\treturn htmlString;\n\t}\n\n\tconst htmlCloseIndex = htmlString.indexOf( htmlCloseTag, bodyCloseIndex + bodyCloseTag.length );\n\n\treturn htmlString.substring( 0, bodyCloseIndex + bodyCloseTag.length ) +\n\t\t( htmlCloseIndex >= 0 ? htmlString.substring( htmlCloseIndex ) : '' );\n}\n"]},"metadata":{},"sourceType":"module"}