{"ast":null,"code":"var _jsxFileName = \"/Users/oyejin/Surfee/kiwi/src/components/Make/Edit/tools/ColorCustom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useRef } from 'react';\nimport { Chrome } from '@uiw/react-color';\nimport { MyContext } from '../../../../pages/Make/MakePageV2';\nimport { Alpha } from '@uiw/react-color';\nimport Popover from '@mui/material/Popover';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditColor({\n  onChange,\n  value\n}) {\n  _s();\n\n  const {\n    state,\n    action\n  } = useContext(MyContext); //ContextAPI로 state와 action을 넘겨받는다.\n\n  const colorRef = useRef(null);\n  const [colorShow, setColorShow] = useState(null);\n  const [usedColors, setUsedColors] = useState([\"rgb(0,0,0)\", \"rgb(0,0,255)\", \"rgb(0,255,0)\", \"rgb(255,0,0)\", \"rgb(255,255,255)\"]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-button\",\n      style: {\n        backgroundColor: `${state.setting.color}`\n      },\n      onClick: () => onChange(`${state.setting.color}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-button\",\n      style: {\n        backgroundColor: \"blue\"\n      },\n      onClick: () => onChange('blue')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: colorRef,\n      className: \"color-button\",\n      style: {\n        backgroundColor: \"green\"\n      },\n      onClick: e => {\n        setColorShow(e.currentTarget);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popover, {\n      id: Boolean(colorShow) ? 'simple-popover' : undefined // 수정\n      ,\n      open: Boolean(colorShow) // 수정\n      ,\n      anchorEl: colorShow // 수정 // 수정\n      ,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      transformOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      },\n      onClose: () => {\n        setColorShow(null);\n\n        if (usedColors.includes(value)) {\n          return;\n        } else {\n          if (usedColors.length > 4) {\n            usedColors.pop();\n            setUsedColors([...usedColors, value]);\n          } else {\n            setUsedColors([...usedColors, value]);\n          }\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Chrome, {\n              color: value // placement={GithubPlacement.Right}\n              ,\n              onChange: color => {\n                onChange(color.hex);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uC0AC\\uC6A9\\uD55C \\uC0C9\\uC0C1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"center-row\",\n            children: usedColors.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"color-button\",\n                style: {\n                  backgroundColor: `${item}`\n                },\n                onClick: () => onChange(item)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EditColor, \"5fD9PVRe5rFRWNoUuWkqtNMgK80=\");\n\n_c = EditColor;\nexport const returnColorContainer = (text, value, func) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"edit-element\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-element__one\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit-element__left\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit-element__right\",\n        children: /*#__PURE__*/_jsxDEV(EditColor, {\n          onChange: func,\n          value: value || '#ffffff'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\nexport const EditColorContainer = ({\n  text,\n  value,\n  func\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"edit-element\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-element__one\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit-element__left\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit-element__right\",\n        children: /*#__PURE__*/_jsxDEV(EditColor, {\n          onChange: e => func(e),\n          value: value || 'white'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_c2 = EditColorContainer;\nexport default EditColor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditColor\");\n$RefreshReg$(_c2, \"EditColorContainer\");","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/src/components/Make/Edit/tools/ColorCustom.js"],"names":["React","useContext","useState","useRef","Chrome","MyContext","Alpha","Popover","EditColor","onChange","value","state","action","colorRef","colorShow","setColorShow","usedColors","setUsedColors","backgroundColor","setting","color","e","currentTarget","Boolean","undefined","vertical","horizontal","includes","length","pop","hex","map","item","index","returnColorContainer","text","func","EditColorContainer"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useRef} from 'react'\nimport { Chrome } from '@uiw/react-color';\nimport { MyContext } from '../../../../pages/Make/MakePageV2'\nimport { Alpha } from '@uiw/react-color';\n\nimport Popover from '@mui/material/Popover';\n\nfunction EditColor({onChange, value}) {\n    const {state, action} = useContext(MyContext) //ContextAPI로 state와 action을 넘겨받는다.\n    const colorRef = useRef(null)\n    const [colorShow, setColorShow] = useState(null);\n    const [usedColors, setUsedColors] = useState([\n        \"rgb(0,0,0)\",\n        \"rgb(0,0,255)\",\n        \"rgb(0,255,0)\",\n        \"rgb(255,0,0)\",\n        \"rgb(255,255,255)\",\n    ]);\n\n\n    return (\n        <div className=\"center-row\">\n            <div className=\"color-button\" style={{backgroundColor:`${state.setting.color}`}} onClick={() => onChange(`${state.setting.color}`)}>\n                \n            </div>\n            <div className=\"color-button\" style={{backgroundColor:\"blue\"}} onClick={() => onChange('blue')}>\n                \n            </div>\n            <div>\n\n            </div>\n            {/* <input className=\"color-button\" type=\"color\" value onChange={(e) => {onChange(e.currentTarget.value); console.log(e)}}/> */}\n\n            <div ref={colorRef} className=\"color-button\" style={{backgroundColor:\"green\"}} onClick={(e) =>{ setColorShow(e.currentTarget)}}>    \n            </div>\n\n            <Popover\n                id={Boolean(colorShow) ? 'simple-popover' : undefined} // 수정\n                open={Boolean(colorShow)} // 수정\n                anchorEl={colorShow} // 수정 // 수정\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n\n                onClose={() => {\n                    setColorShow(null)\n                    if(usedColors.includes(value)){\n                        return\n                    }else{\n                        if(usedColors.length > 4){\n                            usedColors.pop()\n                            setUsedColors([...usedColors, value])\n                        }else{\n                            setUsedColors([...usedColors, value])\n                        }\n                    }\n                }}>\n                <div>\n                    <div>\n                        <div>\n                            <Chrome\n                                color={value}\n                                // placement={GithubPlacement.Right}\n                                onChange={(color) => {\n                                    onChange(color.hex);\n                                }}\n                            />\n                        </div>\n                        <div>\n                            사용한 색상\n                        </div>\n                        <div className=\"center-row\">\n                            {usedColors.map((item, index) => {\n                                return(\n                                    <div className=\"color-button\" style={{backgroundColor:`${item}`}} onClick={() => onChange(item)} key={index}>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </Popover>\n        </div>\n    )\n}\n\nexport const returnColorContainer = (text, value, func) => {\n    return(\n        <div className=\"edit-element\">\n            <div className=\"edit-element__one\">\n                <div className=\"edit-element__left\">\n                    {text}\n                </div>\n                <div className=\"edit-element__right\">\n                    <EditColor onChange={func} value={value || '#ffffff'} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport const EditColorContainer = ({text, value, func}) => {\n    return(\n        <div className=\"edit-element\">\n            <div className=\"edit-element__one\">\n                <div className=\"edit-element__left\">{text}</div>\n                <div className=\"edit-element__right\">\n                    <EditColor onChange={(e) => func(e)} value={value || 'white'} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EditColor\n"]},"metadata":{},"sourceType":"module"}