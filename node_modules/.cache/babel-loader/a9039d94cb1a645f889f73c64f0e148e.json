{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"radius\", \"pointer\", \"className\", \"style\", \"width\", \"height\", \"direction\", \"angle\", \"color\", \"onChange\"];\nimport React from 'react';\nimport { validHex, hexToHsva, hsvaToHex, color as handleColor } from '@uiw/color-convert';\nimport Interactive from '@uiw/react-drag-event-interactive';\nimport { Pointer } from './Pointer';\nimport { getWheelHandlePosition, getWheelValueFromInput } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar HUE_GRADIENT_CLOCKWISE = 'conic-gradient(red, yellow, lime, aqua, blue, magenta, red)';\nvar HUE_GRADIENT_ANTICLOCKWISE = 'conic-gradient(red, magenta, blue, aqua, lime, yellow, red)';\nvar Wheel = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var {\n    prefixCls = 'w-color-wheel',\n    radius = 0,\n    pointer,\n    className,\n    style,\n    width = 200,\n    height = 200,\n    direction = 'anticlockwise',\n    angle = 180,\n    color,\n    onChange\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var hsva = typeof color === 'string' && validHex(color) ? hexToHsva(color) : color || {};\n  var hex = color ? hsvaToHex(hsva) : '';\n  var positions = getWheelHandlePosition({\n    width\n  }, hsva);\n  var comProps = {\n    top: '0',\n    left: '0',\n    color: hex\n  };\n\n  var handleChange = (interaction, event) => {\n    var result = getWheelValueFromInput({\n      width\n    }, width - interaction.x, height - interaction.y);\n    var handleHsva = {\n      h: result.h,\n      s: result.s,\n      v: hsva.v,\n      a: hsva.a\n    };\n    onChange && onChange(handleColor(handleHsva));\n  };\n\n  return /*#__PURE__*/_jsxs(Interactive, _extends({\n    className: [prefixCls, className || ''].filter(Boolean).join(' ')\n  }, other, {\n    style: _extends({}, style, {\n      position: 'relative',\n      width,\n      height\n    }),\n    ref: ref,\n    onMove: handleChange,\n    onDown: handleChange,\n    children: [/*#__PURE__*/React.createElement(pointer || Pointer, _extends({\n      prefixCls,\n      style: {\n        zIndex: 1,\n        transform: \"translate(\" + positions.x + \"px, \" + positions.y + \"px)\"\n      }\n    }, comProps)), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        borderRadius: '50%',\n        background: direction === 'anticlockwise' ? HUE_GRADIENT_CLOCKWISE : HUE_GRADIENT_ANTICLOCKWISE,\n        transform: \"rotateZ(\" + (angle + 90) + \"deg)\",\n        inset: 0\n      }\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        borderRadius: '50%',\n        background: 'radial-gradient(circle closest-side, #fff, transparent)',\n        inset: 0\n      }\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        backgroundColor: '#000',\n        borderRadius: '50%',\n        position: 'absolute',\n        inset: 0,\n        opacity: typeof hsva.v === 'number' ? 1 - hsva.v / 100 : 0\n      }\n    })]\n  }));\n});\nWheel.displayName = 'Wheel';\nexport default Wheel;","map":{"version":3,"sources":["../src/index.tsx"],"names":["color","HUE_GRADIENT_CLOCKWISE","HUE_GRADIENT_ANTICLOCKWISE","Wheel","prefixCls","radius","width","height","direction","angle","onChange","other","hsva","validHex","hexToHsva","hex","hsvaToHex","positions","getWheelHandlePosition","comProps","top","left","handleChange","result","getWheelValueFromInput","interaction","handleHsva","h","s","v","a","handleColor","className","position","pointer","style","zIndex","transform","borderRadius","background","inset","backgroundColor","opacity"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { HsvaColor, ColorResult, validHex, hexToHsva, hsvaToHex, color as handleColor } from '@uiw/color-convert';\nimport Interactive, { Interaction } from '@uiw/react-drag-event-interactive';\nimport { Pointer, PointerProps } from './Pointer';\nimport { getWheelHandlePosition, getWheelValueFromInput } from './utils';\n\nexport interface WheelProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'color'> {\n  prefixCls?: string;\n  color?: string | HsvaColor;\n  width?: number;\n  height?: number;\n  radius?: React.CSSProperties['borderRadius'];\n  /** Starting angle of the color wheel's hue gradient, measured in degrees. */\n  angle?: number;\n  /** Direction of the color wheel's hue gradient; either clockwise or anticlockwise. Default: `anticlockwise` */\n  direction?: 'clockwise' | 'anticlockwise';\n  pointer?: ({ prefixCls, left, top, color }: PointerProps) => JSX.Element;\n  onChange?: (color: ColorResult) => void;\n}\n\nconst HUE_GRADIENT_CLOCKWISE = 'conic-gradient(red, yellow, lime, aqua, blue, magenta, red)';\nconst HUE_GRADIENT_ANTICLOCKWISE = 'conic-gradient(red, magenta, blue, aqua, lime, yellow, red)';\n\nconst Wheel = React.forwardRef<HTMLDivElement, WheelProps>((props, ref) => {\n  const {\n    prefixCls = 'w-color-wheel',\n    radius = 0,\n    pointer,\n    className,\n    style,\n    width = 200,\n    height = 200,\n    direction = 'anticlockwise',\n    angle = 180,\n    color,\n    onChange,\n    ...other\n  } = props;\n  const hsva = (typeof color === 'string' && validHex(color) ? hexToHsva(color) : color || {}) as HsvaColor;\n  const hex = color ? hsvaToHex(hsva) : '';\n  const positions = getWheelHandlePosition({ width }, hsva);\n  const comProps = {\n    top: '0',\n    left: '0',\n    color: hex,\n  };\n  const handleChange = (interaction: Interaction, event: MouseEvent | TouchEvent) => {\n    const result = getWheelValueFromInput({ width }, width - interaction.x, height - interaction.y);\n    const handleHsva = {\n      h: result.h,\n      s: result.s,\n      v: hsva.v,\n      a: hsva.a,\n    };\n    onChange && onChange(handleColor(handleHsva));\n  };\n  return (\n    <Interactive\n      className={[prefixCls, className || ''].filter(Boolean).join(' ')}\n      {...other}\n      style={{\n        ...style,\n        position: 'relative',\n        width,\n        height,\n      }}\n      ref={ref}\n      onMove={handleChange}\n      onDown={handleChange}\n    >\n      {React.createElement(pointer || Pointer, {\n        prefixCls,\n        style: {\n          zIndex: 1,\n          transform: `translate(${positions.x}px, ${positions.y}px)`,\n        },\n        ...comProps,\n      })}\n      <div\n        style={{\n          position: 'absolute',\n          borderRadius: '50%',\n          background: direction === 'anticlockwise' ? HUE_GRADIENT_CLOCKWISE : HUE_GRADIENT_ANTICLOCKWISE,\n          transform: `rotateZ(${angle + 90}deg)`,\n          inset: 0,\n        }}\n      />\n      <div\n        style={{\n          position: 'absolute',\n          borderRadius: '50%',\n          background: 'radial-gradient(circle closest-side, #fff, transparent)',\n          inset: 0,\n        }}\n      />\n      <div\n        style={{\n          backgroundColor: '#000',\n          borderRadius: '50%',\n          position: 'absolute',\n          inset: 0,\n          opacity: typeof hsva.v === 'number' ? 1 - hsva.v / 100 : 0,\n        }}\n      />\n    </Interactive>\n  );\n});\n\nWheel.displayName = 'Wheel';\n\nexport default Wheel;\n"]},"metadata":{},"sourceType":"module"}