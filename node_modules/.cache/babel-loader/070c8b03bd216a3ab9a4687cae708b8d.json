{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestylecommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The image style command. It is used to apply {@link module:image/imagestyle~ImageStyleConfig#options image style option}\n * to a selected image.\n *\n * **Note**: Executing this command may change the image model element if the desired style requires an image of a different\n * type. See {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute} to learn more.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ImageStyleCommand extends Command {\n  /**\n   * Creates an instance of the image style command. When executed, the command applies one of\n   * {@link module:image/imagestyle~ImageStyleConfig#options style options} to the currently selected image.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {Array.<module:image/imagestyle~ImageStyleOptionDefinition>} styles\n   * The style options that this command supports.\n   */\n  constructor(editor, styles) {\n    super(editor);\n    /**\n     * An object containing names of default style options for the inline and block images.\n     * If there is no default style option for the given image type in the configuration,\n     * the name will be `false`.\n     *\n     * @private\n     * @type {Object.<String,module:image/imagestyle~ImageStyleOptionDefinition#name>}\n     */\n\n    this._defaultStyles = {\n      imageBlock: false,\n      imageInline: false\n    };\n    /**\n     * The styles handled by this command.\n     *\n     * @private\n     * @type {module:image/imagestyle~ImageStyleConfig#options}\n     */\n\n    this._styles = new Map(styles.map(style => {\n      if (style.isDefault) {\n        for (const modelElementName of style.modelElements) {\n          this._defaultStyles[modelElementName] = style.name;\n        }\n      }\n\n      return [style.name, style];\n    }));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const editor = this.editor;\n    const imageUtils = editor.plugins.get('ImageUtils');\n    const element = imageUtils.getClosestSelectedImageElement(this.editor.model.document.selection);\n    this.isEnabled = !!element;\n\n    if (!this.isEnabled) {\n      this.value = false;\n    } else if (element.hasAttribute('imageStyle')) {\n      this.value = element.getAttribute('imageStyle');\n    } else {\n      this.value = this._defaultStyles[element.name];\n    }\n  }\n  /**\n   * Executes the command and applies the style to the currently selected image:\n   *\n   *\t\teditor.execute( 'imageStyle', { value: 'side' } );\n   *\n   * **Note**: Executing this command may change the image model element if the desired style requires an image\n   * of a different type. Learn more about {@link module:image/imagestyle~ImageStyleOptionDefinition#modelElements model element}\n   * configuration for the style option.\n   *\n   * @param {Object} options\n   * @param {module:image/imagestyle~ImageStyleOptionDefinition#name} options.value The name of the style (as configured in\n   * {@link module:image/imagestyle~ImageStyleConfig#options}).\n   * @fires execute\n   */\n\n\n  execute(options = {}) {\n    const editor = this.editor;\n    const model = editor.model;\n    const imageUtils = editor.plugins.get('ImageUtils');\n    model.change(writer => {\n      const requestedStyle = options.value;\n      let imageElement = imageUtils.getClosestSelectedImageElement(model.document.selection); // Change the image type if a style requires it.\n\n      if (requestedStyle && this.shouldConvertImageType(requestedStyle, imageElement)) {\n        this.editor.execute(imageUtils.isBlockImage(imageElement) ? 'imageTypeInline' : 'imageTypeBlock'); // Update the imageElement to the newly created image.\n\n        imageElement = imageUtils.getClosestSelectedImageElement(model.document.selection);\n      } // Default style means that there is no `imageStyle` attribute in the model.\n      // https://github.com/ckeditor/ckeditor5-image/issues/147\n\n\n      if (!requestedStyle || this._styles.get(requestedStyle).isDefault) {\n        writer.removeAttribute('imageStyle', imageElement);\n      } else {\n        writer.setAttribute('imageStyle', requestedStyle, imageElement);\n      }\n    });\n  }\n  /**\n   * Returns `true` if requested style change would trigger the image type change.\n   *\n   * @param {module:image/imagestyle~ImageStyleOptionDefinition} requestedStyle The name of the style (as configured in\n   * {@link module:image/imagestyle~ImageStyleConfig#options}).\n   * @param {module:engine/model/element~Element} imageElement The image model element.\n   * @returns {Boolean}\n   */\n\n\n  shouldConvertImageType(requestedStyle, imageElement) {\n    const supportedTypes = this._styles.get(requestedStyle).modelElements;\n\n    return !supportedTypes.includes(imageElement.name);\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestylecommand.js"],"names":["Command","ImageStyleCommand","constructor","editor","styles","_defaultStyles","imageBlock","imageInline","_styles","Map","map","style","isDefault","modelElementName","modelElements","name","refresh","imageUtils","plugins","get","element","getClosestSelectedImageElement","model","document","selection","isEnabled","value","hasAttribute","getAttribute","execute","options","change","writer","requestedStyle","imageElement","shouldConvertImageType","isBlockImage","removeAttribute","setAttribute","supportedTypes","includes"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestylecommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\n/**\n * The image style command. It is used to apply {@link module:image/imagestyle~ImageStyleConfig#options image style option}\n * to a selected image.\n *\n * **Note**: Executing this command may change the image model element if the desired style requires an image of a different\n * type. See {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute} to learn more.\n *\n * @extends module:core/command~Command\n */\nexport default class ImageStyleCommand extends Command {\n\t/**\n\t * Creates an instance of the image style command. When executed, the command applies one of\n\t * {@link module:image/imagestyle~ImageStyleConfig#options style options} to the currently selected image.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {Array.<module:image/imagestyle~ImageStyleOptionDefinition>} styles\n\t * The style options that this command supports.\n\t */\n\tconstructor( editor, styles ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * An object containing names of default style options for the inline and block images.\n\t\t * If there is no default style option for the given image type in the configuration,\n\t\t * the name will be `false`.\n\t\t *\n\t\t * @private\n\t\t * @type {Object.<String,module:image/imagestyle~ImageStyleOptionDefinition#name>}\n\t\t */\n\t\tthis._defaultStyles = {\n\t\t\timageBlock: false,\n\t\t\timageInline: false\n\t\t};\n\n\t\t/**\n\t\t * The styles handled by this command.\n\t\t *\n\t\t * @private\n\t\t * @type {module:image/imagestyle~ImageStyleConfig#options}\n\t\t */\n\t\tthis._styles = new Map( styles.map( style => {\n\t\t\tif ( style.isDefault ) {\n\t\t\t\tfor ( const modelElementName of style.modelElements ) {\n\t\t\t\t\tthis._defaultStyles[ modelElementName ] = style.name;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [ style.name, style ];\n\t\t} ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\t\tconst element = imageUtils.getClosestSelectedImageElement( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = !!element;\n\n\t\tif ( !this.isEnabled ) {\n\t\t\tthis.value = false;\n\t\t} else if ( element.hasAttribute( 'imageStyle' ) ) {\n\t\t\tthis.value = element.getAttribute( 'imageStyle' );\n\t\t} else {\n\t\t\tthis.value = this._defaultStyles[ element.name ];\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command and applies the style to the currently selected image:\n\t *\n\t *\t\teditor.execute( 'imageStyle', { value: 'side' } );\n\t *\n\t * **Note**: Executing this command may change the image model element if the desired style requires an image\n\t * of a different type. Learn more about {@link module:image/imagestyle~ImageStyleOptionDefinition#modelElements model element}\n\t * configuration for the style option.\n\t *\n\t * @param {Object} options\n\t * @param {module:image/imagestyle~ImageStyleOptionDefinition#name} options.value The name of the style (as configured in\n\t * {@link module:image/imagestyle~ImageStyleConfig#options}).\n\t * @fires execute\n\t */\n\texecute( options = {} ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\n\t\tmodel.change( writer => {\n\t\t\tconst requestedStyle = options.value;\n\n\t\t\tlet imageElement = imageUtils.getClosestSelectedImageElement( model.document.selection );\n\n\t\t\t// Change the image type if a style requires it.\n\t\t\tif ( requestedStyle && this.shouldConvertImageType( requestedStyle, imageElement ) ) {\n\t\t\t\tthis.editor.execute( imageUtils.isBlockImage( imageElement ) ? 'imageTypeInline' : 'imageTypeBlock' );\n\n\t\t\t\t// Update the imageElement to the newly created image.\n\t\t\t\timageElement = imageUtils.getClosestSelectedImageElement( model.document.selection );\n\t\t\t}\n\n\t\t\t// Default style means that there is no `imageStyle` attribute in the model.\n\t\t\t// https://github.com/ckeditor/ckeditor5-image/issues/147\n\t\t\tif ( !requestedStyle || this._styles.get( requestedStyle ).isDefault ) {\n\t\t\t\twriter.removeAttribute( 'imageStyle', imageElement );\n\t\t\t} else {\n\t\t\t\twriter.setAttribute( 'imageStyle', requestedStyle, imageElement );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns `true` if requested style change would trigger the image type change.\n\t *\n\t * @param {module:image/imagestyle~ImageStyleOptionDefinition} requestedStyle The name of the style (as configured in\n\t * {@link module:image/imagestyle~ImageStyleConfig#options}).\n\t * @param {module:engine/model/element~Element} imageElement The image model element.\n\t * @returns {Boolean}\n\t */\n\tshouldConvertImageType( requestedStyle, imageElement ) {\n\t\tconst supportedTypes = this._styles.get( requestedStyle ).modelElements;\n\n\t\treturn !supportedTypes.includes( imageElement.name );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}