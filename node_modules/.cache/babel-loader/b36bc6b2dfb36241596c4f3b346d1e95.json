{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/insertparagraphcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n/**\n * The insert paragraph command. It inserts a new paragraph at a specific\n * {@link module:engine/model/position~Position document position}.\n *\n *\t\t// Insert a new paragraph before an element in the document.\n *\t\teditor.execute( 'insertParagraph', {\n *\t\t\tposition: editor.model.createPositionBefore( element )\n *\t\t} );\n *\n * If a paragraph is disallowed in the context of the specific position, the command\n * will attempt to split position ancestors to find a place where it is possible\n * to insert a paragraph.\n *\n * **Note**: This command moves the selection to the inserted paragraph.\n *\n * @extends module:core/command~Command\n */\n\nexport default class InsertParagraphCommand extends Command {\n  /**\n   * Executes the command.\n   *\n   * @param {Object} options Options for the executed command.\n   * @param {module:engine/model/position~Position} options.position The model position at which\n   * the new paragraph will be inserted.\n   * @fires execute\n   */\n  execute(options) {\n    const model = this.editor.model;\n    let position = options.position;\n    model.change(writer => {\n      const paragraph = writer.createElement('paragraph');\n\n      if (!model.schema.checkChild(position.parent, paragraph)) {\n        const allowedParent = model.schema.findAllowedParent(position, paragraph); // It could be there's no ancestor limit that would allow paragraph.\n        // In theory, \"paragraph\" could be disallowed even in the \"$root\".\n\n        if (!allowedParent) {\n          return;\n        }\n\n        position = writer.split(position, allowedParent).position;\n      }\n\n      model.insertContent(paragraph, position);\n      writer.setSelection(paragraph, 'in');\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-paragraph/src/insertparagraphcommand.js"],"names":["Command","InsertParagraphCommand","execute","options","model","editor","position","change","writer","paragraph","createElement","schema","checkChild","parent","allowedParent","findAllowedParent","split","insertContent","setSelection"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,sCAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,sBAAN,SAAqCD,OAArC,CAA6C;AAC3D;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,OAAO,CAAEC,OAAF,EAAY;AAClB,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,QAAIE,QAAQ,GAAGH,OAAO,CAACG,QAAvB;AAEAF,IAAAA,KAAK,CAACG,MAAN,CAAcC,MAAM,IAAI;AACvB,YAAMC,SAAS,GAAGD,MAAM,CAACE,aAAP,CAAsB,WAAtB,CAAlB;;AAEA,UAAK,CAACN,KAAK,CAACO,MAAN,CAAaC,UAAb,CAAyBN,QAAQ,CAACO,MAAlC,EAA0CJ,SAA1C,CAAN,EAA8D;AAC7D,cAAMK,aAAa,GAAGV,KAAK,CAACO,MAAN,CAAaI,iBAAb,CAAgCT,QAAhC,EAA0CG,SAA1C,CAAtB,CAD6D,CAG7D;AACA;;AACA,YAAK,CAACK,aAAN,EAAsB;AACrB;AACA;;AAEDR,QAAAA,QAAQ,GAAGE,MAAM,CAACQ,KAAP,CAAcV,QAAd,EAAwBQ,aAAxB,EAAwCR,QAAnD;AACA;;AAEDF,MAAAA,KAAK,CAACa,aAAN,CAAqBR,SAArB,EAAgCH,QAAhC;AAEAE,MAAAA,MAAM,CAACU,YAAP,CAAqBT,SAArB,EAAgC,IAAhC;AACA,KAlBD;AAmBA;;AAhC0D","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/insertparagraphcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * The insert paragraph command. It inserts a new paragraph at a specific\n * {@link module:engine/model/position~Position document position}.\n *\n *\t\t// Insert a new paragraph before an element in the document.\n *\t\teditor.execute( 'insertParagraph', {\n *\t\t\tposition: editor.model.createPositionBefore( element )\n *\t\t} );\n *\n * If a paragraph is disallowed in the context of the specific position, the command\n * will attempt to split position ancestors to find a place where it is possible\n * to insert a paragraph.\n *\n * **Note**: This command moves the selection to the inserted paragraph.\n *\n * @extends module:core/command~Command\n */\nexport default class InsertParagraphCommand extends Command {\n\t/**\n\t * Executes the command.\n\t *\n\t * @param {Object} options Options for the executed command.\n\t * @param {module:engine/model/position~Position} options.position The model position at which\n\t * the new paragraph will be inserted.\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tlet position = options.position;\n\n\t\tmodel.change( writer => {\n\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\t\tif ( !model.schema.checkChild( position.parent, paragraph ) ) {\n\t\t\t\tconst allowedParent = model.schema.findAllowedParent( position, paragraph );\n\n\t\t\t\t// It could be there's no ancestor limit that would allow paragraph.\n\t\t\t\t// In theory, \"paragraph\" could be disallowed even in the \"$root\".\n\t\t\t\tif ( !allowedParent ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tposition = writer.split( position, allowedParent ).position;\n\t\t\t}\n\n\t\t\tmodel.insertContent( paragraph, position );\n\n\t\t\twriter.setSelection( paragraph, 'in' );\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}