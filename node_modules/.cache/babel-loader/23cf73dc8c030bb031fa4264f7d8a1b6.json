{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/texttransformation\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TextWatcher from './textwatcher';\nimport { escapeRegExp } from 'lodash-es'; // All named transformations.\n\nconst TRANSFORMATIONS = {\n  // Common symbols:\n  copyright: {\n    from: '(c)',\n    to: '©'\n  },\n  registeredTrademark: {\n    from: '(r)',\n    to: '®'\n  },\n  trademark: {\n    from: '(tm)',\n    to: '™'\n  },\n  // Mathematical:\n  oneHalf: {\n    from: /(^|[^/a-z0-9])(1\\/2)([^/a-z0-9])$/i,\n    to: [null, '½', null]\n  },\n  oneThird: {\n    from: /(^|[^/a-z0-9])(1\\/3)([^/a-z0-9])$/i,\n    to: [null, '⅓', null]\n  },\n  twoThirds: {\n    from: /(^|[^/a-z0-9])(2\\/3)([^/a-z0-9])$/i,\n    to: [null, '⅔', null]\n  },\n  oneForth: {\n    from: /(^|[^/a-z0-9])(1\\/4)([^/a-z0-9])$/i,\n    to: [null, '¼', null]\n  },\n  threeQuarters: {\n    from: /(^|[^/a-z0-9])(3\\/4)([^/a-z0-9])$/i,\n    to: [null, '¾', null]\n  },\n  lessThanOrEqual: {\n    from: '<=',\n    to: '≤'\n  },\n  greaterThanOrEqual: {\n    from: '>=',\n    to: '≥'\n  },\n  notEqual: {\n    from: '!=',\n    to: '≠'\n  },\n  arrowLeft: {\n    from: '<-',\n    to: '←'\n  },\n  arrowRight: {\n    from: '->',\n    to: '→'\n  },\n  // Typography:\n  horizontalEllipsis: {\n    from: '...',\n    to: '…'\n  },\n  enDash: {\n    from: /(^| )(--)( )$/,\n    to: [null, '–', null]\n  },\n  emDash: {\n    from: /(^| )(---)( )$/,\n    to: [null, '—', null]\n  },\n  // Quotations:\n  // English, US\n  quotesPrimary: {\n    from: buildQuotesRegExp('\"'),\n    to: [null, '“', null, '”']\n  },\n  quotesSecondary: {\n    from: buildQuotesRegExp('\\''),\n    to: [null, '‘', null, '’']\n  },\n  // English, UK\n  quotesPrimaryEnGb: {\n    from: buildQuotesRegExp('\\''),\n    to: [null, '‘', null, '’']\n  },\n  quotesSecondaryEnGb: {\n    from: buildQuotesRegExp('\"'),\n    to: [null, '“', null, '”']\n  },\n  // Polish\n  quotesPrimaryPl: {\n    from: buildQuotesRegExp('\"'),\n    to: [null, '„', null, '”']\n  },\n  quotesSecondaryPl: {\n    from: buildQuotesRegExp('\\''),\n    to: [null, '‚', null, '’']\n  }\n}; // Transformation groups.\n\nconst TRANSFORMATION_GROUPS = {\n  symbols: ['copyright', 'registeredTrademark', 'trademark'],\n  mathematical: ['oneHalf', 'oneThird', 'twoThirds', 'oneForth', 'threeQuarters', 'lessThanOrEqual', 'greaterThanOrEqual', 'notEqual', 'arrowLeft', 'arrowRight'],\n  typography: ['horizontalEllipsis', 'enDash', 'emDash'],\n  quotes: ['quotesPrimary', 'quotesSecondary']\n}; // A set of default transformations provided by the feature.\n\nconst DEFAULT_TRANSFORMATIONS = ['symbols', 'mathematical', 'typography', 'quotes'];\n/**\n * The text transformation plugin.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TextTransformation extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return ['Delete', 'Input'];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'TextTransformation';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define('typing', {\n      transformations: {\n        include: DEFAULT_TRANSFORMATIONS\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const model = this.editor.model;\n    const modelSelection = model.document.selection;\n    modelSelection.on('change:range', () => {\n      // Disable plugin when selection is inside a code block.\n      this.isEnabled = !modelSelection.anchor.parent.is('element', 'codeBlock');\n    });\n\n    this._enableTransformationWatchers();\n  }\n  /**\n   * Create new TextWatcher listening to the editor for typing and selection events.\n   *\n   * @private\n   */\n\n\n  _enableTransformationWatchers() {\n    const editor = this.editor;\n    const model = editor.model;\n    const inputPlugin = editor.plugins.get('Input');\n    const deletePlugin = editor.plugins.get('Delete');\n    const normalizedTransformations = normalizeTransformations(editor.config.get('typing.transformations'));\n\n    const testCallback = text => {\n      for (const normalizedTransformation of normalizedTransformations) {\n        const from = normalizedTransformation.from;\n        const match = from.test(text);\n\n        if (match) {\n          return {\n            normalizedTransformation\n          };\n        }\n      }\n    };\n\n    const watcherCallback = (evt, data) => {\n      if (!inputPlugin.isInput(data.batch)) {\n        return;\n      }\n\n      const {\n        from,\n        to\n      } = data.normalizedTransformation;\n      const matches = from.exec(data.text);\n      const replaces = to(matches.slice(1));\n      const matchedRange = data.range;\n      let changeIndex = matches.index;\n      model.enqueueChange(writer => {\n        for (let i = 1; i < matches.length; i++) {\n          const match = matches[i];\n          const replaceWith = replaces[i - 1];\n\n          if (replaceWith == null) {\n            changeIndex += match.length;\n            continue;\n          }\n\n          const replacePosition = matchedRange.start.getShiftedBy(changeIndex);\n          const replaceRange = model.createRange(replacePosition, replacePosition.getShiftedBy(match.length));\n          const attributes = getTextAttributesAfterPosition(replacePosition);\n          model.insertContent(writer.createText(replaceWith, attributes), replaceRange);\n          changeIndex += replaceWith.length;\n        }\n\n        model.enqueueChange(() => {\n          deletePlugin.requestUndoOnBackspace();\n        });\n      });\n    };\n\n    const watcher = new TextWatcher(editor.model, testCallback);\n    watcher.on('matched:data', watcherCallback);\n    watcher.bind('isEnabled').to(this);\n  }\n\n} // Normalizes the configuration `from` parameter value.\n// The normalized value for the `from` parameter is a RegExp instance. If the passed `from` is already a RegExp instance,\n// it is returned unchanged.\n//\n// @param {String|RegExp} from\n// @returns {RegExp}\n\nfunction normalizeFrom(from) {\n  if (typeof from == 'string') {\n    return new RegExp(`(${escapeRegExp(from)})$`);\n  } // `from` is already a regular expression.\n\n\n  return from;\n} // Normalizes the configuration `to` parameter value.\n// The normalized value for the `to` parameter is a function that takes an array and returns an array. See more in the\n// configuration description. If the passed `to` is already a function, it is returned unchanged.\n//\n// @param {String|Array.<null|String>|Function} to\n// @returns {Function}\n\n\nfunction normalizeTo(to) {\n  if (typeof to == 'string') {\n    return () => [to];\n  } else if (to instanceof Array) {\n    return () => to;\n  } // `to` is already a function.\n\n\n  return to;\n} // For given `position` returns attributes for the text that is after that position.\n// The text can be in the same text node as the position (`foo[]bar`) or in the next text node (`foo[]<$text bold=\"true\">bar</$text>`).\n//\n// @param {module:engine/model/position~Position} position\n// @returns {Iterable.<*>}\n\n\nfunction getTextAttributesAfterPosition(position) {\n  const textNode = position.textNode ? position.textNode : position.nodeAfter;\n  return textNode.getAttributes();\n} // Returns a RegExp pattern string that detects a sentence inside a quote.\n//\n// @param {String} quoteCharacter The character to create a pattern for.\n// @returns {String}\n\n\nfunction buildQuotesRegExp(quoteCharacter) {\n  return new RegExp(`(^|\\\\s)(${quoteCharacter})([^${quoteCharacter}]*)(${quoteCharacter})$`);\n} // Reads text transformation config and returns normalized array of transformations objects.\n//\n// @param {module:typing/texttransformation~TextTransformationDescription} config\n// @returns {Array.<{from:String,to:Function}>}\n\n\nfunction normalizeTransformations(config) {\n  const extra = config.extra || [];\n  const remove = config.remove || [];\n\n  const isNotRemoved = transformation => !remove.includes(transformation);\n\n  const configured = config.include.concat(extra).filter(isNotRemoved);\n  return expandGroupsAndRemoveDuplicates(configured).filter(isNotRemoved) // Filter out 'remove' transformations as they might be set in group\n  .map(transformation => TRANSFORMATIONS[transformation] || transformation).map(transformation => ({\n    from: normalizeFrom(transformation.from),\n    to: normalizeTo(transformation.to)\n  }));\n} // Reads definitions and expands named groups if needed to transformation names.\n// This method also removes duplicated named transformations if any.\n//\n// @param {Array.<String|Object>} definitions\n// @returns {Array.<String|Object>}\n\n\nfunction expandGroupsAndRemoveDuplicates(definitions) {\n  // Set is using to make sure that transformation names are not duplicated.\n  const definedTransformations = new Set();\n\n  for (const transformationOrGroup of definitions) {\n    if (TRANSFORMATION_GROUPS[transformationOrGroup]) {\n      for (const transformation of TRANSFORMATION_GROUPS[transformationOrGroup]) {\n        definedTransformations.add(transformation);\n      }\n    } else {\n      definedTransformations.add(transformationOrGroup);\n    }\n  }\n\n  return Array.from(definedTransformations);\n}\n/**\n * The text transformation definition object. It describes what should be replaced with what.\n *\n * The input value (`from`) can be passed either as a string or as a regular expression.\n *\n * * If a string is passed, it will be simply checked if the end of the input matches it.\n * * If a regular expression is passed, its entire length must be covered with capturing groups (e.g. `/(foo)(bar)$/`).\n * Also, since it is compared against the end of the input, it has to end with  `$` to be correctly matched.\n * See examples below.\n *\n * The output value (`to`) can be passed as a string, as an array or as a function.\n *\n * * If a string is passed, it will be used as a replacement value as-is. Note that a string output value can be used only if\n * the input value is a string, too.\n * * If an array is passed, it has to have the same number of elements as there are capturing groups in the input value regular expression.\n * Each capture group will be replaced with a corresponding string from the passed array. If a given capturing group should not be replaced,\n * use `null` instead of passing a string.\n * * If a function is used, it should return an array as described above. The function is passed one parameter &mdash; an array with matches\n * by the regular expression. See the examples below.\n *\n * A simple string-to-string replacement:\n *\n *\t\t{ from: '(c)', to: '©' }\n *\n * Change quote styles using a regular expression. Note how all the parts are in separate capturing groups and the space at the beginning\n * and the text inside quotes are not replaced (`null` passed as the first and the third value in the `to` parameter):\n *\n *\t\t{\n *\t\t\tfrom: /(^|\\s)(\")([^\"]*)(\")$/,\n *\t\t\tto: [ null, '“', null, '”' ]\n *\t\t}\n *\n * Automatic uppercase after a dot using a callback:\n *\n *\t\t{\n *\t\t\tfrom: /(\\. )([a-z])$/,\n *\t\t\tto: matches => [ null, matches[ 1 ].toUpperCase() ]\n *\t\t}\n *\n * @typedef {Object} module:typing/texttransformation~TextTransformationDescription\n * @property {String|RegExp} from The string or regular expression to transform.\n * @property {String} to The text to transform compatible with `String.replace()`.\n */\n\n/**\n * The configuration of the {@link module:typing/texttransformation~TextTransformation} feature.\n *\n * Read more in {@link module:typing/texttransformation~TextTransformationConfig}.\n *\n * @member {module:typing/texttransformation~TextTransformationConfig} module:typing/typing~TypingConfig#transformations\n */\n\n/**\n * The configuration of the text transformation feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\ttyping: {\n *\t\t\t\t\ttransformations: ... // Text transformation feature options.\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * By default, the feature comes pre-configured\n * (via {@link module:typing/texttransformation~TextTransformationConfig#include `config.typing.transformations.include`}) with the\n * following groups of transformations:\n *\n * * Typography (group name: `typography`)\n *   - `ellipsis`: transforms `...` to `…`\n *   - `enDash`: transforms ` -- ` to ` – `\n *   - `emDash`: transforms ` --- ` to ` — `\n * * Quotations (group name: `quotes`)\n *   - `quotesPrimary`: transforms `\"Foo bar\"` to `“Foo bar”`\n *   - `quotesSecondary`: transforms `'Foo bar'` to `‘Foo bar’`\n * * Symbols (group name: `symbols`)\n *   - `trademark`: transforms `(tm)` to `™`\n *   - `registeredTrademark`: transforms `(r)` to `®`\n *   - `copyright`: transforms `(c)` to `©`\n * * Mathematical (group name: `mathematical`)\n *   - `oneHalf`: transforms `1/2` to: `½`\n *   - `oneThird`: transforms `1/3` to: `⅓`\n *   - `twoThirds`: transforms `2/3` to: `⅔`\n *   - `oneForth`: transforms `1/4` to: `¼`\n *   - `threeQuarters`: transforms `3/4` to: `¾`\n *   - `lessThanOrEqual`: transforms `<=` to: `≤`\n *   - `greaterThanOrEqual`: transforms `>=` to: `≥`\n *   - `notEqual`: transforms `!=` to: `≠`\n *   - `arrowLeft`: transforms `<-` to: `←`\n *   - `arrowRight`: transforms `->` to: `→`\n * * Misc:\n *   - `quotesPrimaryEnGb`: transforms `'Foo bar'` to `‘Foo bar’`\n *   - `quotesSecondaryEnGb`: transforms `\"Foo bar\"` to `“Foo bar”`\n *   - `quotesPrimaryPl`: transforms `\"Foo bar\"` to `„Foo bar”`\n *   - `quotesSecondaryPl`:  transforms `'Foo bar'` to `‚Foo bar’`\n *\n * In order to load additional transformations, use the\n * {@link module:typing/texttransformation~TextTransformationConfig#extra `transformations.extra` option}.\n *\n * In order to narrow down the list of transformations, use the\n * {@link module:typing/texttransformation~TextTransformationConfig#remove `transformations.remove` option}.\n *\n * In order to completely override the supported transformations, use the\n * {@link module:typing/texttransformation~TextTransformationConfig#include `transformations.include` option}.\n *\n * Examples:\n *\n *\t\tconst transformationsConfig = {\n *\t\t\tinclude: [\n *\t\t\t\t// Use only the 'quotes' and 'typography' groups.\n *\t\t\t\t'quotes',\n *\t\t\t\t'typography',\n *\n *\t\t\t\t// Plus, some custom transformation.\n *\t\t\t\t{ from: 'CKE', to: 'CKEditor' }\n *\t\t\t]\n *\t\t};\n *\n *\t\tconst transformationsConfig = {\n *\t\t\t// Remove the 'ellipsis' transformation loaded by the 'typography' group.\n *\t\t\tremove: [ 'ellipsis' ]\n *\t\t}\n *\n * @interface TextTransformationConfig\n */\n\n/* eslint-disable max-len */\n\n/**\n * The standard list of text transformations supported by the editor. By default it comes pre-configured with a couple dozen of them\n * (see {@link module:typing/texttransformation~TextTransformationConfig} for the full list). You can override this list completely\n * by setting this option or use the other two options\n * ({@link module:typing/texttransformation~TextTransformationConfig#extra `transformations.extra`},\n * {@link module:typing/texttransformation~TextTransformationConfig#remove `transformations.remove`}) to fine-tune the default list.\n *\n * @member {Array.<module:typing/texttransformation~TextTransformationDescription>} module:typing/texttransformation~TextTransformationConfig#include\n */\n\n/**\n * Additional text transformations that are added to the transformations defined in\n * {@link module:typing/texttransformation~TextTransformationConfig#include `transformations.include`}.\n *\n *\t\tconst transformationsConfig = {\n *\t\t\textra: [\n *\t\t\t\t{ from: 'CKE', to: 'CKEditor' }\n *\t\t\t]\n *\t\t};\n *\n * @member {Array.<module:typing/texttransformation~TextTransformationDescription>} module:typing/texttransformation~TextTransformationConfig#extra\n */\n\n/**\n * The text transformation names that are removed from transformations defined in\n * {@link module:typing/texttransformation~TextTransformationConfig#include `transformations.include`} or\n * {@link module:typing/texttransformation~TextTransformationConfig#extra `transformations.extra`}.\n *\n *\t\tconst transformationsConfig = {\n *\t\t\tremove: [\n *\t\t\t\t'ellipsis',    // Remove only 'ellipsis' from the 'typography' group.\n *\t\t\t\t'mathematical' // Remove all transformations from the 'mathematical' group.\n *\t\t\t]\n *\t\t}\n *\n * @member {Array.<module:typing/texttransformation~TextTransformationDescription>} module:typing/texttransformation~TextTransformationConfig#remove\n */\n\n/* eslint-enable max-len */","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-typing/src/texttransformation.js"],"names":["Plugin","TextWatcher","escapeRegExp","TRANSFORMATIONS","copyright","from","to","registeredTrademark","trademark","oneHalf","oneThird","twoThirds","oneForth","threeQuarters","lessThanOrEqual","greaterThanOrEqual","notEqual","arrowLeft","arrowRight","horizontalEllipsis","enDash","emDash","quotesPrimary","buildQuotesRegExp","quotesSecondary","quotesPrimaryEnGb","quotesSecondaryEnGb","quotesPrimaryPl","quotesSecondaryPl","TRANSFORMATION_GROUPS","symbols","mathematical","typography","quotes","DEFAULT_TRANSFORMATIONS","TextTransformation","requires","pluginName","constructor","editor","config","define","transformations","include","init","model","modelSelection","document","selection","on","isEnabled","anchor","parent","is","_enableTransformationWatchers","inputPlugin","plugins","get","deletePlugin","normalizedTransformations","normalizeTransformations","testCallback","text","normalizedTransformation","match","test","watcherCallback","evt","data","isInput","batch","matches","exec","replaces","slice","matchedRange","range","changeIndex","index","enqueueChange","writer","i","length","replaceWith","replacePosition","start","getShiftedBy","replaceRange","createRange","attributes","getTextAttributesAfterPosition","insertContent","createText","requestUndoOnBackspace","watcher","bind","normalizeFrom","RegExp","normalizeTo","Array","position","textNode","nodeAfter","getAttributes","quoteCharacter","extra","remove","isNotRemoved","transformation","includes","configured","concat","filter","expandGroupsAndRemoveDuplicates","map","definitions","definedTransformations","Set","transformationOrGroup","add"],"mappings":"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2F,aAAa,CAAEY,cAAc,CAACvG,IAAjB,CADM;AAEzBC,IAAAA,EAAE,EAAE4F,WAAW,CAAEU,cAAc,CAACtG,EAAjB;AAFU,GAAN,CAHd,CAAP;AAOA,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAAS2G,+BAAT,CAA0CE,WAA1C,EAAwD;AACvD;AACA,QAAMC,sBAAsB,GAAG,IAAIC,GAAJ,EAA/B;;AAEA,OAAM,MAAMC,qBAAZ,IAAqCH,WAArC,EAAmD;AAClD,QAAKtF,qBAAqB,CAAEyF,qBAAF,CAA1B,EAAsD;AACrD,WAAM,MAAMV,cAAZ,IAA8B/E,qBAAqB,CAAEyF,qBAAF,CAAnD,EAA+E;AAC9EF,QAAAA,sBAAsB,CAACG,GAAvB,CAA4BX,cAA5B;AACA;AACD,KAJD,MAIO;AACNQ,MAAAA,sBAAsB,CAACG,GAAvB,CAA4BD,qBAA5B;AACA;AACD;;AAED,SAAOnB,KAAK,CAAC9F,IAAN,CAAY+G,sBAAZ,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/texttransformation\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TextWatcher from './textwatcher';\nimport { escapeRegExp } from 'lodash-es';\n\n// All named transformations.\nconst TRANSFORMATIONS = {\n\t// Common symbols:\n\tcopyright: { from: '(c)', to: '©' },\n\tregisteredTrademark: { from: '(r)', to: '®' },\n\ttrademark: { from: '(tm)', to: '™' },\n\n\t// Mathematical:\n\toneHalf: { from: /(^|[^/a-z0-9])(1\\/2)([^/a-z0-9])$/i, to: [ null, '½', null ] },\n\toneThird: { from: /(^|[^/a-z0-9])(1\\/3)([^/a-z0-9])$/i, to: [ null, '⅓', null ] },\n\ttwoThirds: { from: /(^|[^/a-z0-9])(2\\/3)([^/a-z0-9])$/i, to: [ null, '⅔', null ] },\n\toneForth: { from: /(^|[^/a-z0-9])(1\\/4)([^/a-z0-9])$/i, to: [ null, '¼', null ] },\n\tthreeQuarters: { from: /(^|[^/a-z0-9])(3\\/4)([^/a-z0-9])$/i, to: [ null, '¾', null ] },\n\tlessThanOrEqual: { from: '<=', to: '≤' },\n\tgreaterThanOrEqual: { from: '>=', to: '≥' },\n\tnotEqual: { from: '!=', to: '≠' },\n\tarrowLeft: { from: '<-', to: '←' },\n\tarrowRight: { from: '->', to: '→' },\n\n\t// Typography:\n\thorizontalEllipsis: { from: '...', to: '…' },\n\tenDash: { from: /(^| )(--)( )$/, to: [ null, '–', null ] },\n\temDash: { from: /(^| )(---)( )$/, to: [ null, '—', null ] },\n\t// Quotations:\n\t// English, US\n\tquotesPrimary: { from: buildQuotesRegExp( '\"' ), to: [ null, '“', null, '”' ] },\n\tquotesSecondary: { from: buildQuotesRegExp( '\\'' ), to: [ null, '‘', null, '’' ] },\n\n\t// English, UK\n\tquotesPrimaryEnGb: { from: buildQuotesRegExp( '\\'' ), to: [ null, '‘', null, '’' ] },\n\tquotesSecondaryEnGb: { from: buildQuotesRegExp( '\"' ), to: [ null, '“', null, '”' ] },\n\n\t// Polish\n\tquotesPrimaryPl: { from: buildQuotesRegExp( '\"' ), to: [ null, '„', null, '”' ] },\n\tquotesSecondaryPl: { from: buildQuotesRegExp( '\\'' ), to: [ null, '‚', null, '’' ] }\n};\n\n// Transformation groups.\nconst TRANSFORMATION_GROUPS = {\n\tsymbols: [ 'copyright', 'registeredTrademark', 'trademark' ],\n\tmathematical: [\n\t\t'oneHalf', 'oneThird', 'twoThirds', 'oneForth', 'threeQuarters',\n\t\t'lessThanOrEqual', 'greaterThanOrEqual', 'notEqual',\n\t\t'arrowLeft', 'arrowRight'\n\t],\n\ttypography: [ 'horizontalEllipsis', 'enDash', 'emDash' ],\n\tquotes: [ 'quotesPrimary', 'quotesSecondary' ]\n};\n\n// A set of default transformations provided by the feature.\nconst DEFAULT_TRANSFORMATIONS = [\n\t'symbols',\n\t'mathematical',\n\t'typography',\n\t'quotes'\n];\n\n/**\n * The text transformation plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TextTransformation extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ 'Delete', 'Input' ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TextTransformation';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'typing', {\n\t\t\ttransformations: {\n\t\t\t\tinclude: DEFAULT_TRANSFORMATIONS\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst model = this.editor.model;\n\t\tconst modelSelection = model.document.selection;\n\n\t\tmodelSelection.on( 'change:range', () => {\n\t\t\t// Disable plugin when selection is inside a code block.\n\t\t\tthis.isEnabled = !modelSelection.anchor.parent.is( 'element', 'codeBlock' );\n\t\t} );\n\n\t\tthis._enableTransformationWatchers();\n\t}\n\n\t/**\n\t * Create new TextWatcher listening to the editor for typing and selection events.\n\t *\n\t * @private\n\t */\n\t_enableTransformationWatchers() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst inputPlugin = editor.plugins.get( 'Input' );\n\t\tconst deletePlugin = editor.plugins.get( 'Delete' );\n\t\tconst normalizedTransformations = normalizeTransformations( editor.config.get( 'typing.transformations' ) );\n\n\t\tconst testCallback = text => {\n\t\t\tfor ( const normalizedTransformation of normalizedTransformations ) {\n\t\t\t\tconst from = normalizedTransformation.from;\n\t\t\t\tconst match = from.test( text );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn { normalizedTransformation };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst watcherCallback = ( evt, data ) => {\n\t\t\tif ( !inputPlugin.isInput( data.batch ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { from, to } = data.normalizedTransformation;\n\n\t\t\tconst matches = from.exec( data.text );\n\t\t\tconst replaces = to( matches.slice( 1 ) );\n\n\t\t\tconst matchedRange = data.range;\n\n\t\t\tlet changeIndex = matches.index;\n\n\t\t\tmodel.enqueueChange( writer => {\n\t\t\t\tfor ( let i = 1; i < matches.length; i++ ) {\n\t\t\t\t\tconst match = matches[ i ];\n\t\t\t\t\tconst replaceWith = replaces[ i - 1 ];\n\n\t\t\t\t\tif ( replaceWith == null ) {\n\t\t\t\t\t\tchangeIndex += match.length;\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst replacePosition = matchedRange.start.getShiftedBy( changeIndex );\n\t\t\t\t\tconst replaceRange = model.createRange( replacePosition, replacePosition.getShiftedBy( match.length ) );\n\t\t\t\t\tconst attributes = getTextAttributesAfterPosition( replacePosition );\n\n\t\t\t\t\tmodel.insertContent( writer.createText( replaceWith, attributes ), replaceRange );\n\n\t\t\t\t\tchangeIndex += replaceWith.length;\n\t\t\t\t}\n\n\t\t\t\tmodel.enqueueChange( () => {\n\t\t\t\t\tdeletePlugin.requestUndoOnBackspace();\n\t\t\t\t} );\n\t\t\t} );\n\t\t};\n\n\t\tconst watcher = new TextWatcher( editor.model, testCallback );\n\n\t\twatcher.on( 'matched:data', watcherCallback );\n\t\twatcher.bind( 'isEnabled' ).to( this );\n\t}\n}\n\n// Normalizes the configuration `from` parameter value.\n// The normalized value for the `from` parameter is a RegExp instance. If the passed `from` is already a RegExp instance,\n// it is returned unchanged.\n//\n// @param {String|RegExp} from\n// @returns {RegExp}\nfunction normalizeFrom( from ) {\n\tif ( typeof from == 'string' ) {\n\t\treturn new RegExp( `(${ escapeRegExp( from ) })$` );\n\t}\n\n\t// `from` is already a regular expression.\n\treturn from;\n}\n\n// Normalizes the configuration `to` parameter value.\n// The normalized value for the `to` parameter is a function that takes an array and returns an array. See more in the\n// configuration description. If the passed `to` is already a function, it is returned unchanged.\n//\n// @param {String|Array.<null|String>|Function} to\n// @returns {Function}\nfunction normalizeTo( to ) {\n\tif ( typeof to == 'string' ) {\n\t\treturn () => [ to ];\n\t} else if ( to instanceof Array ) {\n\t\treturn () => to;\n\t}\n\n\t// `to` is already a function.\n\treturn to;\n}\n\n// For given `position` returns attributes for the text that is after that position.\n// The text can be in the same text node as the position (`foo[]bar`) or in the next text node (`foo[]<$text bold=\"true\">bar</$text>`).\n//\n// @param {module:engine/model/position~Position} position\n// @returns {Iterable.<*>}\nfunction getTextAttributesAfterPosition( position ) {\n\tconst textNode = position.textNode ? position.textNode : position.nodeAfter;\n\n\treturn textNode.getAttributes();\n}\n\n// Returns a RegExp pattern string that detects a sentence inside a quote.\n//\n// @param {String} quoteCharacter The character to create a pattern for.\n// @returns {String}\nfunction buildQuotesRegExp( quoteCharacter ) {\n\treturn new RegExp( `(^|\\\\s)(${ quoteCharacter })([^${ quoteCharacter }]*)(${ quoteCharacter })$` );\n}\n\n// Reads text transformation config and returns normalized array of transformations objects.\n//\n// @param {module:typing/texttransformation~TextTransformationDescription} config\n// @returns {Array.<{from:String,to:Function}>}\nfunction normalizeTransformations( config ) {\n\tconst extra = config.extra || [];\n\tconst remove = config.remove || [];\n\tconst isNotRemoved = transformation => !remove.includes( transformation );\n\n\tconst configured = config.include.concat( extra ).filter( isNotRemoved );\n\n\treturn expandGroupsAndRemoveDuplicates( configured )\n\t\t.filter( isNotRemoved ) // Filter out 'remove' transformations as they might be set in group\n\t\t.map( transformation => TRANSFORMATIONS[ transformation ] || transformation )\n\t\t.map( transformation => ( {\n\t\t\tfrom: normalizeFrom( transformation.from ),\n\t\t\tto: normalizeTo( transformation.to )\n\t\t} ) );\n}\n\n// Reads definitions and expands named groups if needed to transformation names.\n// This method also removes duplicated named transformations if any.\n//\n// @param {Array.<String|Object>} definitions\n// @returns {Array.<String|Object>}\nfunction expandGroupsAndRemoveDuplicates( definitions ) {\n\t// Set is using to make sure that transformation names are not duplicated.\n\tconst definedTransformations = new Set();\n\n\tfor ( const transformationOrGroup of definitions ) {\n\t\tif ( TRANSFORMATION_GROUPS[ transformationOrGroup ] ) {\n\t\t\tfor ( const transformation of TRANSFORMATION_GROUPS[ transformationOrGroup ] ) {\n\t\t\t\tdefinedTransformations.add( transformation );\n\t\t\t}\n\t\t} else {\n\t\t\tdefinedTransformations.add( transformationOrGroup );\n\t\t}\n\t}\n\n\treturn Array.from( definedTransformations );\n}\n\n/**\n * The text transformation definition object. It describes what should be replaced with what.\n *\n * The input value (`from`) can be passed either as a string or as a regular expression.\n *\n * * If a string is passed, it will be simply checked if the end of the input matches it.\n * * If a regular expression is passed, its entire length must be covered with capturing groups (e.g. `/(foo)(bar)$/`).\n * Also, since it is compared against the end of the input, it has to end with  `$` to be correctly matched.\n * See examples below.\n *\n * The output value (`to`) can be passed as a string, as an array or as a function.\n *\n * * If a string is passed, it will be used as a replacement value as-is. Note that a string output value can be used only if\n * the input value is a string, too.\n * * If an array is passed, it has to have the same number of elements as there are capturing groups in the input value regular expression.\n * Each capture group will be replaced with a corresponding string from the passed array. If a given capturing group should not be replaced,\n * use `null` instead of passing a string.\n * * If a function is used, it should return an array as described above. The function is passed one parameter &mdash; an array with matches\n * by the regular expression. See the examples below.\n *\n * A simple string-to-string replacement:\n *\n *\t\t{ from: '(c)', to: '©' }\n *\n * Change quote styles using a regular expression. Note how all the parts are in separate capturing groups and the space at the beginning\n * and the text inside quotes are not replaced (`null` passed as the first and the third value in the `to` parameter):\n *\n *\t\t{\n *\t\t\tfrom: /(^|\\s)(\")([^\"]*)(\")$/,\n *\t\t\tto: [ null, '“', null, '”' ]\n *\t\t}\n *\n * Automatic uppercase after a dot using a callback:\n *\n *\t\t{\n *\t\t\tfrom: /(\\. )([a-z])$/,\n *\t\t\tto: matches => [ null, matches[ 1 ].toUpperCase() ]\n *\t\t}\n *\n * @typedef {Object} module:typing/texttransformation~TextTransformationDescription\n * @property {String|RegExp} from The string or regular expression to transform.\n * @property {String} to The text to transform compatible with `String.replace()`.\n */\n\n/**\n * The configuration of the {@link module:typing/texttransformation~TextTransformation} feature.\n *\n * Read more in {@link module:typing/texttransformation~TextTransformationConfig}.\n *\n * @member {module:typing/texttransformation~TextTransformationConfig} module:typing/typing~TypingConfig#transformations\n */\n\n/**\n * The configuration of the text transformation feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\ttyping: {\n *\t\t\t\t\ttransformations: ... // Text transformation feature options.\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * By default, the feature comes pre-configured\n * (via {@link module:typing/texttransformation~TextTransformationConfig#include `config.typing.transformations.include`}) with the\n * following groups of transformations:\n *\n * * Typography (group name: `typography`)\n *   - `ellipsis`: transforms `...` to `…`\n *   - `enDash`: transforms ` -- ` to ` – `\n *   - `emDash`: transforms ` --- ` to ` — `\n * * Quotations (group name: `quotes`)\n *   - `quotesPrimary`: transforms `\"Foo bar\"` to `“Foo bar”`\n *   - `quotesSecondary`: transforms `'Foo bar'` to `‘Foo bar’`\n * * Symbols (group name: `symbols`)\n *   - `trademark`: transforms `(tm)` to `™`\n *   - `registeredTrademark`: transforms `(r)` to `®`\n *   - `copyright`: transforms `(c)` to `©`\n * * Mathematical (group name: `mathematical`)\n *   - `oneHalf`: transforms `1/2` to: `½`\n *   - `oneThird`: transforms `1/3` to: `⅓`\n *   - `twoThirds`: transforms `2/3` to: `⅔`\n *   - `oneForth`: transforms `1/4` to: `¼`\n *   - `threeQuarters`: transforms `3/4` to: `¾`\n *   - `lessThanOrEqual`: transforms `<=` to: `≤`\n *   - `greaterThanOrEqual`: transforms `>=` to: `≥`\n *   - `notEqual`: transforms `!=` to: `≠`\n *   - `arrowLeft`: transforms `<-` to: `←`\n *   - `arrowRight`: transforms `->` to: `→`\n * * Misc:\n *   - `quotesPrimaryEnGb`: transforms `'Foo bar'` to `‘Foo bar’`\n *   - `quotesSecondaryEnGb`: transforms `\"Foo bar\"` to `“Foo bar”`\n *   - `quotesPrimaryPl`: transforms `\"Foo bar\"` to `„Foo bar”`\n *   - `quotesSecondaryPl`:  transforms `'Foo bar'` to `‚Foo bar’`\n *\n * In order to load additional transformations, use the\n * {@link module:typing/texttransformation~TextTransformationConfig#extra `transformations.extra` option}.\n *\n * In order to narrow down the list of transformations, use the\n * {@link module:typing/texttransformation~TextTransformationConfig#remove `transformations.remove` option}.\n *\n * In order to completely override the supported transformations, use the\n * {@link module:typing/texttransformation~TextTransformationConfig#include `transformations.include` option}.\n *\n * Examples:\n *\n *\t\tconst transformationsConfig = {\n *\t\t\tinclude: [\n *\t\t\t\t// Use only the 'quotes' and 'typography' groups.\n *\t\t\t\t'quotes',\n *\t\t\t\t'typography',\n *\n *\t\t\t\t// Plus, some custom transformation.\n *\t\t\t\t{ from: 'CKE', to: 'CKEditor' }\n *\t\t\t]\n *\t\t};\n *\n *\t\tconst transformationsConfig = {\n *\t\t\t// Remove the 'ellipsis' transformation loaded by the 'typography' group.\n *\t\t\tremove: [ 'ellipsis' ]\n *\t\t}\n *\n * @interface TextTransformationConfig\n */\n\n/* eslint-disable max-len */\n/**\n * The standard list of text transformations supported by the editor. By default it comes pre-configured with a couple dozen of them\n * (see {@link module:typing/texttransformation~TextTransformationConfig} for the full list). You can override this list completely\n * by setting this option or use the other two options\n * ({@link module:typing/texttransformation~TextTransformationConfig#extra `transformations.extra`},\n * {@link module:typing/texttransformation~TextTransformationConfig#remove `transformations.remove`}) to fine-tune the default list.\n *\n * @member {Array.<module:typing/texttransformation~TextTransformationDescription>} module:typing/texttransformation~TextTransformationConfig#include\n */\n\n/**\n * Additional text transformations that are added to the transformations defined in\n * {@link module:typing/texttransformation~TextTransformationConfig#include `transformations.include`}.\n *\n *\t\tconst transformationsConfig = {\n *\t\t\textra: [\n *\t\t\t\t{ from: 'CKE', to: 'CKEditor' }\n *\t\t\t]\n *\t\t};\n *\n * @member {Array.<module:typing/texttransformation~TextTransformationDescription>} module:typing/texttransformation~TextTransformationConfig#extra\n */\n\n/**\n * The text transformation names that are removed from transformations defined in\n * {@link module:typing/texttransformation~TextTransformationConfig#include `transformations.include`} or\n * {@link module:typing/texttransformation~TextTransformationConfig#extra `transformations.extra`}.\n *\n *\t\tconst transformationsConfig = {\n *\t\t\tremove: [\n *\t\t\t\t'ellipsis',    // Remove only 'ellipsis' from the 'typography' group.\n *\t\t\t\t'mathematical' // Remove all transformations from the 'mathematical' group.\n *\t\t\t]\n *\t\t}\n *\n * @member {Array.<module:typing/texttransformation~TextTransformationDescription>} module:typing/texttransformation~TextTransformationConfig#remove\n */\n/* eslint-enable max-len */\n"]},"metadata":{},"sourceType":"module"}