{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undocommand\n */\nimport BaseCommand from './basecommand';\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\n\nexport default class UndoCommand extends BaseCommand {\n  /**\n   * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n   * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n   * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n   *\n   * @fires execute\n   * @fires revert\n   * @param {module:engine/model/batch~Batch} [batch] A batch that should be undone. If not set, the last added batch will be undone.\n   */\n  execute(batch = null) {\n    // If batch is not given, set `batchIndex` to the last index in command stack.\n    const batchIndex = batch ? this._stack.findIndex(a => a.batch == batch) : this._stack.length - 1;\n\n    const item = this._stack.splice(batchIndex, 1)[0];\n\n    const undoingBatch = this.editor.model.createBatch('transparent'); // All changes has to be done in one `enqueueChange` callback so other listeners will not\n    // step between consecutive operations, or won't do changes to the document before selection is properly restored.\n\n    this.editor.model.enqueueChange(undoingBatch, () => {\n      this._undo(item.batch, undoingBatch);\n\n      const operations = this.editor.model.document.history.getOperations(item.batch.baseVersion);\n\n      this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n\n      this.fire('revert', item.batch, undoingBatch);\n    });\n    this.refresh();\n  }\n\n}\n/**\n * Fired when execution of the command reverts some batch.\n *\n * @event revert\n */","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-undo/src/undocommand.js"],"names":["BaseCommand","UndoCommand","execute","batch","batchIndex","_stack","findIndex","a","length","item","splice","undoingBatch","editor","model","createBatch","enqueueChange","_undo","operations","document","history","getOperations","baseVersion","_restoreSelection","selection","ranges","isBackward","fire","refresh"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,WAAP,MAAwB,eAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,SAA0BD,WAA1B,CAAsC;AACpD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,OAAO,CAAEC,KAAK,GAAG,IAAV,EAAiB;AACvB;AACA,UAAMC,UAAU,GAAGD,KAAK,GAAG,KAAKE,MAAL,CAAYC,SAAZ,CAAuBC,CAAC,IAAIA,CAAC,CAACJ,KAAF,IAAWA,KAAvC,CAAH,GAAoD,KAAKE,MAAL,CAAYG,MAAZ,GAAqB,CAAjG;;AAEA,UAAMC,IAAI,GAAG,KAAKJ,MAAL,CAAYK,MAAZ,CAAoBN,UAApB,EAAgC,CAAhC,EAAqC,CAArC,CAAb;;AACA,UAAMO,YAAY,GAAG,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,WAAlB,CAA+B,aAA/B,CAArB,CALuB,CAOvB;AACA;;AACA,SAAKF,MAAL,CAAYC,KAAZ,CAAkBE,aAAlB,CAAiCJ,YAAjC,EAA+C,MAAM;AACpD,WAAKK,KAAL,CAAYP,IAAI,CAACN,KAAjB,EAAwBQ,YAAxB;;AAEA,YAAMM,UAAU,GAAG,KAAKL,MAAL,CAAYC,KAAZ,CAAkBK,QAAlB,CAA2BC,OAA3B,CAAmCC,aAAnC,CAAkDX,IAAI,CAACN,KAAL,CAAWkB,WAA7D,CAAnB;;AACA,WAAKC,iBAAL,CAAwBb,IAAI,CAACc,SAAL,CAAeC,MAAvC,EAA+Cf,IAAI,CAACc,SAAL,CAAeE,UAA9D,EAA0ER,UAA1E;;AAEA,WAAKS,IAAL,CAAW,QAAX,EAAqBjB,IAAI,CAACN,KAA1B,EAAiCQ,YAAjC;AACA,KAPD;AASA,SAAKgB,OAAL;AACA;;AA7BmD;AAgCrD;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class UndoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n\t * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t * @fires revert\n\t * @param {module:engine/model/batch~Batch} [batch] A batch that should be undone. If not set, the last added batch will be undone.\n\t */\n\texecute( batch = null ) {\n\t\t// If batch is not given, set `batchIndex` to the last index in command stack.\n\t\tconst batchIndex = batch ? this._stack.findIndex( a => a.batch == batch ) : this._stack.length - 1;\n\n\t\tconst item = this._stack.splice( batchIndex, 1 )[ 0 ];\n\t\tconst undoingBatch = this.editor.model.createBatch( 'transparent' );\n\n\t\t// All changes has to be done in one `enqueueChange` callback so other listeners will not\n\t\t// step between consecutive operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( undoingBatch, () => {\n\t\t\tthis._undo( item.batch, undoingBatch );\n\n\t\t\tconst operations = this.editor.model.document.history.getOperations( item.batch.baseVersion );\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\n\t\t\tthis.fire( 'revert', item.batch, undoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n\n/**\n * Fired when execution of the command reverts some batch.\n *\n * @event revert\n */\n"]},"metadata":{},"sourceType":"module"}