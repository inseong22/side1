{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/space\n */\n\n/**\n * Replaces last space preceding elements closing tag with `&nbsp;`. Such operation prevents spaces from being removed\n * during further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n * This method also takes into account Word specific `<o:p></o:p>` empty tags.\n * Additionally multiline sequences of spaces and new lines between tags are removed (see #39 and #40).\n *\n * @param {String} htmlString HTML string in which spacing should be normalized.\n * @returns {String} Input HTML with spaces normalized.\n */\nexport function normalizeSpacing(htmlString) {\n  // Run normalizeSafariSpaceSpans() two times to cover nested spans.\n  return normalizeSafariSpaceSpans(normalizeSafariSpaceSpans(htmlString)) // Remove all \\r\\n from \"spacerun spans\" so the last replace line doesn't strip all whitespaces.\n  .replace(/(<span\\s+style=['\"]mso-spacerun:yes['\"]>[^\\S\\r\\n]*?)[\\r\\n]+([^\\S\\r\\n]*<\\/span>)/g, '$1$2').replace(/<span\\s+style=['\"]mso-spacerun:yes['\"]><\\/span>/g, '').replace(/ <\\//g, '\\u00A0</').replace(/ <o:p><\\/o:p>/g, '\\u00A0<o:p></o:p>') // Remove <o:p> block filler from empty paragraph. Safari uses \\u00A0 instead of &nbsp;.\n  .replace(/<o:p>(&nbsp;|\\u00A0)<\\/o:p>/g, '') // Remove all whitespaces when they contain any \\r or \\n.\n  .replace(/>([^\\S\\r\\n]*[\\r\\n]\\s*)</g, '><');\n}\n/**\n * Normalizes spacing in special Word `spacerun spans` (`<span style='mso-spacerun:yes'>\\s+</span>`) by replacing\n * all spaces with `&nbsp; ` pairs. This prevents spaces from being removed during further DOM/View processing\n * (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n *\n * @param {Document} htmlDocument Native `Document` object in which spacing should be normalized.\n */\n\nexport function normalizeSpacerunSpans(htmlDocument) {\n  htmlDocument.querySelectorAll('span[style*=spacerun]').forEach(el => {\n    const innerTextLength = el.innerText.length || 0;\n    el.innerHTML = Array(innerTextLength + 1).join('\\u00A0 ').substr(0, innerTextLength);\n  });\n} // Normalizes specific spacing generated by Safari when content pasted from Word (`<span class=\"Apple-converted-space\"> </span>`)\n// by replacing all spaces sequences longer than 1 space with `&nbsp; ` pairs. This prevents spaces from being removed during\n// further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n//\n// This function is similar to {@link module:clipboard/utils/normalizeclipboarddata normalizeClipboardData util} but uses\n// regular spaces / &nbsp; sequence for replacement.\n//\n// @param {String} htmlString HTML string in which spacing should be normalized\n// @returns {String} Input HTML with spaces normalized.\n\nfunction normalizeSafariSpaceSpans(htmlString) {\n  return htmlString.replace(/<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, (fullMatch, spaces) => {\n    return spaces.length === 1 ? ' ' : Array(spaces.length + 1).join('\\u00A0 ').substr(0, spaces.length);\n  });\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-paste-from-office/src/filters/space.js"],"names":["normalizeSpacing","htmlString","normalizeSafariSpaceSpans","replace","normalizeSpacerunSpans","htmlDocument","querySelectorAll","forEach","el","innerTextLength","innerText","length","innerHTML","Array","join","substr","fullMatch","spaces"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA2BC,UAA3B,EAAwC;AAC9C;AACA,SAAOC,yBAAyB,CAAEA,yBAAyB,CAAED,UAAF,CAA3B,CAAzB,CACN;AADM,GAELE,OAFK,CAEI,kFAFJ,EAEwF,MAFxF,EAGLA,OAHK,CAGI,kDAHJ,EAGwD,EAHxD,EAILA,OAJK,CAII,OAJJ,EAIa,UAJb,EAKLA,OALK,CAKI,gBALJ,EAKsB,mBALtB,EAMN;AANM,GAOLA,OAPK,CAOI,8BAPJ,EAOoC,EAPpC,EAQN;AARM,GASLA,OATK,CASI,0BATJ,EASgC,IAThC,CAAP;AAUA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAiCC,YAAjC,EAAgD;AACtDA,EAAAA,YAAY,CAACC,gBAAb,CAA+B,uBAA/B,EAAyDC,OAAzD,CAAkEC,EAAE,IAAI;AACvE,UAAMC,eAAe,GAAGD,EAAE,CAACE,SAAH,CAAaC,MAAb,IAAuB,CAA/C;AAEAH,IAAAA,EAAE,CAACI,SAAH,GAAeC,KAAK,CAAEJ,eAAe,GAAG,CAApB,CAAL,CAA6BK,IAA7B,CAAmC,SAAnC,EAA+CC,MAA/C,CAAuD,CAAvD,EAA0DN,eAA1D,CAAf;AACA,GAJD;AAKA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASP,yBAAT,CAAoCD,UAApC,EAAiD;AAChD,SAAOA,UAAU,CAACE,OAAX,CAAoB,yDAApB,EAA+E,CAAEa,SAAF,EAAaC,MAAb,KAAyB;AAC9G,WAAOA,MAAM,CAACN,MAAP,KAAkB,CAAlB,GAAsB,GAAtB,GAA4BE,KAAK,CAAEI,MAAM,CAACN,MAAP,GAAgB,CAAlB,CAAL,CAA2BG,IAA3B,CAAiC,SAAjC,EAA6CC,MAA7C,CAAqD,CAArD,EAAwDE,MAAM,CAACN,MAA/D,CAAnC;AACA,GAFM,CAAP;AAGA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/space\n */\n\n/**\n * Replaces last space preceding elements closing tag with `&nbsp;`. Such operation prevents spaces from being removed\n * during further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n * This method also takes into account Word specific `<o:p></o:p>` empty tags.\n * Additionally multiline sequences of spaces and new lines between tags are removed (see #39 and #40).\n *\n * @param {String} htmlString HTML string in which spacing should be normalized.\n * @returns {String} Input HTML with spaces normalized.\n */\nexport function normalizeSpacing( htmlString ) {\n\t// Run normalizeSafariSpaceSpans() two times to cover nested spans.\n\treturn normalizeSafariSpaceSpans( normalizeSafariSpaceSpans( htmlString ) )\n\t\t// Remove all \\r\\n from \"spacerun spans\" so the last replace line doesn't strip all whitespaces.\n\t\t.replace( /(<span\\s+style=['\"]mso-spacerun:yes['\"]>[^\\S\\r\\n]*?)[\\r\\n]+([^\\S\\r\\n]*<\\/span>)/g, '$1$2' )\n\t\t.replace( /<span\\s+style=['\"]mso-spacerun:yes['\"]><\\/span>/g, '' )\n\t\t.replace( / <\\//g, '\\u00A0</' )\n\t\t.replace( / <o:p><\\/o:p>/g, '\\u00A0<o:p></o:p>' )\n\t\t// Remove <o:p> block filler from empty paragraph. Safari uses \\u00A0 instead of &nbsp;.\n\t\t.replace( /<o:p>(&nbsp;|\\u00A0)<\\/o:p>/g, '' )\n\t\t// Remove all whitespaces when they contain any \\r or \\n.\n\t\t.replace( />([^\\S\\r\\n]*[\\r\\n]\\s*)</g, '><' );\n}\n\n/**\n * Normalizes spacing in special Word `spacerun spans` (`<span style='mso-spacerun:yes'>\\s+</span>`) by replacing\n * all spaces with `&nbsp; ` pairs. This prevents spaces from being removed during further DOM/View processing\n * (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n *\n * @param {Document} htmlDocument Native `Document` object in which spacing should be normalized.\n */\nexport function normalizeSpacerunSpans( htmlDocument ) {\n\thtmlDocument.querySelectorAll( 'span[style*=spacerun]' ).forEach( el => {\n\t\tconst innerTextLength = el.innerText.length || 0;\n\n\t\tel.innerHTML = Array( innerTextLength + 1 ).join( '\\u00A0 ' ).substr( 0, innerTextLength );\n\t} );\n}\n\n// Normalizes specific spacing generated by Safari when content pasted from Word (`<span class=\"Apple-converted-space\"> </span>`)\n// by replacing all spaces sequences longer than 1 space with `&nbsp; ` pairs. This prevents spaces from being removed during\n// further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n//\n// This function is similar to {@link module:clipboard/utils/normalizeclipboarddata normalizeClipboardData util} but uses\n// regular spaces / &nbsp; sequence for replacement.\n//\n// @param {String} htmlString HTML string in which spacing should be normalized\n// @returns {String} Input HTML with spaces normalized.\nfunction normalizeSafariSpaceSpans( htmlString ) {\n\treturn htmlString.replace( /<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, ( fullMatch, spaces ) => {\n\t\treturn spaces.length === 1 ? ' ' : Array( spaces.length + 1 ).join( '\\u00A0 ' ).substr( 0, spaces.length );\n\t} );\n}\n"]},"metadata":{},"sourceType":"module"}