{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraph\n */\nimport ParagraphCommand from './paragraphcommand';\nimport InsertParagraphCommand from './insertparagraphcommand';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * It also brings two editors commands:\n *\n * * The {@link module:paragraph/paragraphcommand~ParagraphCommand `'paragraph'`} command that converts all\n * blocks in the model selection into paragraphs.\n * * The {@link module:paragraph/insertparagraphcommand~InsertParagraphCommand `'insertParagraph'`} command\n * that inserts a new paragraph at a specified location in the model.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Paragraph extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Paragraph';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const model = editor.model;\n    editor.commands.add('paragraph', new ParagraphCommand(editor));\n    editor.commands.add('insertParagraph', new InsertParagraphCommand(editor)); // Schema.\n\n    model.schema.register('paragraph', {\n      inheritAllFrom: '$block'\n    });\n    editor.conversion.elementToElement({\n      model: 'paragraph',\n      view: 'p'\n    }); // Conversion for paragraph-like elements which has not been converted by any plugin.\n\n    editor.conversion.for('upcast').elementToElement({\n      model: (viewElement, {\n        writer\n      }) => {\n        if (!Paragraph.paragraphLikeElements.has(viewElement.name)) {\n          return null;\n        } // Do not auto-paragraph empty elements.\n\n\n        if (viewElement.isEmpty) {\n          return null;\n        }\n\n        return writer.createElement('paragraph');\n      },\n      view: /.+/,\n      converterPriority: 'low'\n    });\n  }\n\n}\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\n\nParagraph.paragraphLikeElements = new Set(['blockquote', 'dd', 'div', 'dt', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'p', 'td', 'th']);","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-paragraph/src/paragraph.js"],"names":["ParagraphCommand","InsertParagraphCommand","Plugin","Paragraph","pluginName","init","editor","model","commands","add","schema","register","inheritAllFrom","conversion","elementToElement","view","for","viewElement","writer","paragraphLikeElements","has","name","isEmpty","createElement","converterPriority","Set"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,OAAOC,MAAP,MAAmB,qCAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,SAAN,SAAwBD,MAAxB,CAA+B;AAC7C;AACD;AACA;AACsB,aAAVE,UAAU,GAAG;AACvB,WAAO,WAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AAEAD,IAAAA,MAAM,CAACE,QAAP,CAAgBC,GAAhB,CAAqB,WAArB,EAAkC,IAAIT,gBAAJ,CAAsBM,MAAtB,CAAlC;AACAA,IAAAA,MAAM,CAACE,QAAP,CAAgBC,GAAhB,CAAqB,iBAArB,EAAwC,IAAIR,sBAAJ,CAA4BK,MAA5B,CAAxC,EALM,CAON;;AACAC,IAAAA,KAAK,CAACG,MAAN,CAAaC,QAAb,CAAuB,WAAvB,EAAoC;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAApC;AAEAN,IAAAA,MAAM,CAACO,UAAP,CAAkBC,gBAAlB,CAAoC;AAAEP,MAAAA,KAAK,EAAE,WAAT;AAAsBQ,MAAAA,IAAI,EAAE;AAA5B,KAApC,EAVM,CAYN;;AACAT,IAAAA,MAAM,CAACO,UAAP,CAAkBG,GAAlB,CAAuB,QAAvB,EAAkCF,gBAAlC,CAAoD;AACnDP,MAAAA,KAAK,EAAE,CAAEU,WAAF,EAAe;AAAEC,QAAAA;AAAF,OAAf,KAA+B;AACrC,YAAK,CAACf,SAAS,CAACgB,qBAAV,CAAgCC,GAAhC,CAAqCH,WAAW,CAACI,IAAjD,CAAN,EAAgE;AAC/D,iBAAO,IAAP;AACA,SAHoC,CAKrC;;;AACA,YAAKJ,WAAW,CAACK,OAAjB,EAA2B;AAC1B,iBAAO,IAAP;AACA;;AAED,eAAOJ,MAAM,CAACK,aAAP,CAAsB,WAAtB,CAAP;AACA,OAZkD;AAanDR,MAAAA,IAAI,EAAE,IAb6C;AAcnDS,MAAAA,iBAAiB,EAAE;AAdgC,KAApD;AAgBA;;AAxC4C;AA2C9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACArB,SAAS,CAACgB,qBAAV,GAAkC,IAAIM,GAAJ,CAAS,CAC1C,YAD0C,EAE1C,IAF0C,EAG1C,KAH0C,EAI1C,IAJ0C,EAK1C,IAL0C,EAM1C,IAN0C,EAO1C,IAP0C,EAQ1C,IAR0C,EAS1C,IAT0C,EAU1C,IAV0C,EAW1C,IAX0C,EAY1C,GAZ0C,EAa1C,IAb0C,EAc1C,IAd0C,CAAT,CAAlC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraph\n */\n\nimport ParagraphCommand from './paragraphcommand';\nimport InsertParagraphCommand from './insertparagraphcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * It also brings two editors commands:\n *\n * * The {@link module:paragraph/paragraphcommand~ParagraphCommand `'paragraph'`} command that converts all\n * blocks in the model selection into paragraphs.\n * * The {@link module:paragraph/insertparagraphcommand~InsertParagraphCommand `'insertParagraph'`} command\n * that inserts a new paragraph at a specified location in the model.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Paragraph extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Paragraph';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\teditor.commands.add( 'paragraph', new ParagraphCommand( editor ) );\n\t\teditor.commands.add( 'insertParagraph', new InsertParagraphCommand( editor ) );\n\n\t\t// Schema.\n\t\tmodel.schema.register( 'paragraph', { inheritAllFrom: '$block' } );\n\n\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\n\t\t// Conversion for paragraph-like elements which has not been converted by any plugin.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: ( viewElement, { writer } ) => {\n\t\t\t\tif ( !Paragraph.paragraphLikeElements.has( viewElement.name ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Do not auto-paragraph empty elements.\n\t\t\t\tif ( viewElement.isEmpty ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn writer.createElement( 'paragraph' );\n\t\t\t},\n\t\t\tview: /.+/,\n\t\t\tconverterPriority: 'low'\n\t\t} );\n\t}\n}\n\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\nParagraph.paragraphLikeElements = new Set( [\n\t'blockquote',\n\t'dd',\n\t'div',\n\t'dt',\n\t'h1',\n\t'h2',\n\t'h3',\n\t'h4',\n\t'h5',\n\t'h6',\n\t'li',\n\t'p',\n\t'td',\n\t'th'\n] );\n"]},"metadata":{},"sourceType":"module"}