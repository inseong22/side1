{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftentercommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ShiftEnterCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  execute() {\n    const model = this.editor.model;\n    const doc = model.document;\n    model.change(writer => {\n      softBreakAction(model, writer, doc.selection);\n      this.fire('afterExecute', {\n        writer\n      });\n    });\n  }\n\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    this.isEnabled = isEnabled(model.schema, doc.selection);\n  }\n\n} // Checks whether the ShiftEnter command should be enabled in the specified selection.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\nfunction isEnabled(schema, selection) {\n  // At this moment it is okay to support single range selections only.\n  // But in the future we may need to change that.\n  if (selection.rangeCount > 1) {\n    return false;\n  }\n\n  const anchorPos = selection.anchor; // Check whether the break element can be inserted in the current selection anchor.\n\n  if (!anchorPos || !schema.checkChild(anchorPos, 'softBreak')) {\n    return false;\n  }\n\n  const range = selection.getFirstRange();\n  const startElement = range.start.parent;\n  const endElement = range.end.parent; // Do not modify the content if selection is cross-limit elements.\n\n  if ((isInsideLimitElement(startElement, schema) || isInsideLimitElement(endElement, schema)) && startElement !== endElement) {\n    return false;\n  }\n\n  return true;\n} // Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\n\n\nfunction softBreakAction(model, writer, selection) {\n  const isSelectionEmpty = selection.isCollapsed;\n  const range = selection.getFirstRange();\n  const startElement = range.start.parent;\n  const endElement = range.end.parent;\n  const isContainedWithinOneElement = startElement == endElement;\n\n  if (isSelectionEmpty) {\n    const attributesToCopy = getCopyOnEnterAttributes(model.schema, selection.getAttributes());\n    insertBreak(model, writer, range.end);\n    writer.removeSelectionAttribute(selection.getAttributeKeys());\n    writer.setSelectionAttribute(attributesToCopy);\n  } else {\n    const leaveUnmerged = !(range.start.isAtStart && range.end.isAtEnd);\n    model.deleteContent(selection, {\n      leaveUnmerged\n    }); // Selection within one element:\n    //\n    // <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n\n    if (isContainedWithinOneElement) {\n      insertBreak(model, writer, selection.focus);\n    } // Selection over multiple elements.\n    //\n    // <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n    //\n    // We chose not to insert a line break in this case because:\n    //\n    // * it's not a very common scenario,\n    // * it actually surprised me when I saw the \"expected behavior\" in real life.\n    //\n    // It's ok if the user will need to be more specific where they want the <br> to be inserted.\n    else {\n        // Move the selection to the 2nd element (last step of the example above).\n        if (leaveUnmerged) {\n          writer.setSelection(endElement, 0);\n        }\n      }\n  }\n}\n\nfunction insertBreak(model, writer, position) {\n  const breakLineElement = writer.createElement('softBreak');\n  model.insertContent(breakLineElement, position);\n  writer.setSelection(breakLineElement, 'after');\n} // Checks whether the specified `element` is a child of the limit element.\n//\n// Checking whether the `<p>` element is inside a limit element:\n//   - <$root><p>Text.</p></$root> => false\n//   - <$root><limitElement><p>Text</p></limitElement></$root> => true\n//\n// @param {module:engine/model/element~Element} element\n// @param {module:engine/schema~Schema} schema\n// @returns {Boolean}\n\n\nfunction isInsideLimitElement(element, schema) {\n  // `$root` is a limit element but in this case is an invalid element.\n  if (element.is('rootElement')) {\n    return false;\n  }\n\n  return schema.isLimit(element) || isInsideLimitElement(element.parent, schema);\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-enter/src/shiftentercommand.js"],"names":["Command","getCopyOnEnterAttributes","ShiftEnterCommand","execute","model","editor","doc","document","change","writer","softBreakAction","selection","fire","refresh","isEnabled","schema","rangeCount","anchorPos","anchor","checkChild","range","getFirstRange","startElement","start","parent","endElement","end","isInsideLimitElement","isSelectionEmpty","isCollapsed","isContainedWithinOneElement","attributesToCopy","getAttributes","insertBreak","removeSelectionAttribute","getAttributeKeys","setSelectionAttribute","leaveUnmerged","isAtStart","isAtEnd","deleteContent","focus","setSelection","position","breakLineElement","createElement","insertContent","element","is","isLimit"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftentercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n *\n * @extends module:core/command~Command\n */\nexport default class ShiftEnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tsoftBreakAction( model, writer, doc.selection );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.isEnabled = isEnabled( model.schema, doc.selection );\n\t}\n}\n\n// Checks whether the ShiftEnter command should be enabled in the specified selection.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\nfunction isEnabled( schema, selection ) {\n\t// At this moment it is okay to support single range selections only.\n\t// But in the future we may need to change that.\n\tif ( selection.rangeCount > 1 ) {\n\t\treturn false;\n\t}\n\n\tconst anchorPos = selection.anchor;\n\n\t// Check whether the break element can be inserted in the current selection anchor.\n\tif ( !anchorPos || !schema.checkChild( anchorPos, 'softBreak' ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Do not modify the content if selection is cross-limit elements.\n\tif ( ( isInsideLimitElement( startElement, schema ) || isInsideLimitElement( endElement, schema ) ) && startElement !== endElement ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\nfunction softBreakAction( model, writer, selection ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\tif ( isSelectionEmpty ) {\n\t\tconst attributesToCopy = getCopyOnEnterAttributes( model.schema, selection.getAttributes() );\n\t\tinsertBreak( model, writer, range.end );\n\n\t\twriter.removeSelectionAttribute( selection.getAttributeKeys() );\n\t\twriter.setSelectionAttribute( attributesToCopy );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\t// Selection within one element:\n\t\t//\n\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n\t\tif ( isContainedWithinOneElement ) {\n\t\t\tinsertBreak( model, writer, selection.focus );\n\t\t}\n\t\t// Selection over multiple elements.\n\t\t//\n\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t//\n\t\t// We chose not to insert a line break in this case because:\n\t\t//\n\t\t// * it's not a very common scenario,\n\t\t// * it actually surprised me when I saw the \"expected behavior\" in real life.\n\t\t//\n\t\t// It's ok if the user will need to be more specific where they want the <br> to be inserted.\n\t\telse {\n\t\t\t// Move the selection to the 2nd element (last step of the example above).\n\t\t\tif ( leaveUnmerged ) {\n\t\t\t\twriter.setSelection( endElement, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction insertBreak( model, writer, position ) {\n\tconst breakLineElement = writer.createElement( 'softBreak' );\n\n\tmodel.insertContent( breakLineElement, position );\n\twriter.setSelection( breakLineElement, 'after' );\n}\n\n// Checks whether the specified `element` is a child of the limit element.\n//\n// Checking whether the `<p>` element is inside a limit element:\n//   - <$root><p>Text.</p></$root> => false\n//   - <$root><limitElement><p>Text</p></limitElement></$root> => true\n//\n// @param {module:engine/model/element~Element} element\n// @param {module:engine/schema~Schema} schema\n// @returns {Boolean}\nfunction isInsideLimitElement( element, schema ) {\n\t// `$root` is a limit element but in this case is an invalid element.\n\tif ( element.is( 'rootElement' ) ) {\n\t\treturn false;\n\t}\n\n\treturn schema.isLimit( element ) || isInsideLimitElement( element.parent, schema );\n}\n"]},"metadata":{},"sourceType":"module"}