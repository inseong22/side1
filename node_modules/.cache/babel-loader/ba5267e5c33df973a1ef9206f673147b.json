{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/normalizers/mswordnormalizer\n */\nimport { transformListItemLikeElementsIntoLists } from '../filters/list';\nimport { replaceImagesSourceWithBase64 } from '../filters/image';\nconst msWordMatch1 = /<meta\\s*name=\"?generator\"?\\s*content=\"?microsoft\\s*word\\s*\\d+\"?\\/?>/i;\nconst msWordMatch2 = /xmlns:o=\"urn:schemas-microsoft-com/i;\n/**\n * Normalizer for the content pasted from Microsoft Word.\n *\n * @implements module:paste-from-office/normalizer~Normalizer\n */\n\nexport default class MSWordNormalizer {\n  /**\n   * Creates a new `MSWordNormalizer` instance.\n   *\n   * @param {module:engine/view/document~Document} document View document.\n   */\n  constructor(document) {\n    /**\n     * @readonly\n     * @type {module:engine/view/document~Document}\n     */\n    this.document = document;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  isActive(htmlString) {\n    return msWordMatch1.test(htmlString) || msWordMatch2.test(htmlString);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute(data) {\n    const {\n      body: documentFragment,\n      stylesString\n    } = data._parsedData;\n    transformListItemLikeElementsIntoLists(documentFragment, stylesString);\n    replaceImagesSourceWithBase64(documentFragment, data.dataTransfer.getData('text/rtf'));\n    data.content = documentFragment;\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-paste-from-office/src/normalizers/mswordnormalizer.js"],"names":["transformListItemLikeElementsIntoLists","replaceImagesSourceWithBase64","msWordMatch1","msWordMatch2","MSWordNormalizer","constructor","document","isActive","htmlString","test","execute","data","body","documentFragment","stylesString","_parsedData","dataTransfer","getData","content"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,sCAAT,QAAuD,iBAAvD;AACA,SAASC,6BAAT,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG,sEAArB;AACA,MAAMC,YAAY,GAAG,qCAArB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,CAAuB;AACrC;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,QAAF,EAAa;AACvB;AACF;AACA;AACA;AACE,SAAKA,QAAL,GAAgBA,QAAhB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,QAAQ,CAAEC,UAAF,EAAe;AACtB,WAAON,YAAY,CAACO,IAAb,CAAmBD,UAAnB,KAAmCL,YAAY,CAACM,IAAb,CAAmBD,UAAnB,CAA1C;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,OAAO,CAAEC,IAAF,EAAS;AACf,UAAM;AAAEC,MAAAA,IAAI,EAAEC,gBAAR;AAA0BC,MAAAA;AAA1B,QAA2CH,IAAI,CAACI,WAAtD;AAEAf,IAAAA,sCAAsC,CAAEa,gBAAF,EAAoBC,YAApB,CAAtC;AACAb,IAAAA,6BAA6B,CAAEY,gBAAF,EAAoBF,IAAI,CAACK,YAAL,CAAkBC,OAAlB,CAA2B,UAA3B,CAApB,CAA7B;AAEAN,IAAAA,IAAI,CAACO,OAAL,GAAeL,gBAAf;AACA;;AA/BoC","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/normalizers/mswordnormalizer\n */\n\nimport { transformListItemLikeElementsIntoLists } from '../filters/list';\nimport { replaceImagesSourceWithBase64 } from '../filters/image';\n\nconst msWordMatch1 = /<meta\\s*name=\"?generator\"?\\s*content=\"?microsoft\\s*word\\s*\\d+\"?\\/?>/i;\nconst msWordMatch2 = /xmlns:o=\"urn:schemas-microsoft-com/i;\n\n/**\n * Normalizer for the content pasted from Microsoft Word.\n *\n * @implements module:paste-from-office/normalizer~Normalizer\n */\nexport default class MSWordNormalizer {\n\t/**\n\t * Creates a new `MSWordNormalizer` instance.\n\t *\n\t * @param {module:engine/view/document~Document} document View document.\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = document;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tisActive( htmlString ) {\n\t\treturn msWordMatch1.test( htmlString ) || msWordMatch2.test( htmlString );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute( data ) {\n\t\tconst { body: documentFragment, stylesString } = data._parsedData;\n\n\t\ttransformListItemLikeElementsIntoLists( documentFragment, stylesString );\n\t\treplaceImagesSourceWithBase64( documentFragment, data.dataTransfer.getData( 'text/rtf' ) );\n\n\t\tdata.content = documentFragment;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}