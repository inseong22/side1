{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"placement\", \"label\", \"value\", \"className\", \"style\", \"labelStyle\", \"inputStyle\", \"onChange\", \"onBlur\"];\nimport React from 'react';\nimport { useRef, useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar validHex = hex => /^#?([A-Fa-f0-9]{3,4}){1,2}$/.test(hex);\n\nvar getNumberValue = value => Number(String(value).replace(/%/g, ''));\n\nvar EditableInput = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var {\n    prefixCls = 'w-color-editable-input',\n    placement = 'bottom',\n    label,\n    value: initValue,\n    className,\n    style,\n    labelStyle,\n    inputStyle,\n    onChange,\n    onBlur\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var [value, setValue] = useState(initValue);\n  var isFocus = useRef(false);\n  useEffect(() => {\n    if (props.value !== value) {\n      if (!isFocus.current) {\n        setValue(props.value);\n      }\n    }\n  }, [props.value]);\n\n  function handleChange(evn, valInit) {\n    var value = valInit || evn.target.value;\n\n    if (validHex(value)) {\n      onChange && onChange(evn, value);\n    }\n\n    var val = getNumberValue(value);\n\n    if (!isNaN(val)) {\n      onChange && onChange(evn, val);\n    }\n\n    setValue(value); // setValueProps(value);\n  }\n\n  function handleBlur(evn) {\n    isFocus.current = false;\n    setValue(props.value);\n    onBlur && onBlur(evn);\n  }\n\n  var placementStyle = {};\n\n  if (placement === 'bottom') {\n    placementStyle['flexDirection'] = 'column';\n  }\n\n  if (placement === 'top') {\n    placementStyle['flexDirection'] = 'column-reverse';\n  }\n\n  if (placement === 'left') {\n    placementStyle['flexDirection'] = 'row-reverse';\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: [prefixCls, className || ''].filter(Boolean).join(' '),\n    style: _extends({\n      position: 'relative',\n      alignItems: 'center',\n      display: 'flex',\n      fontSize: 11\n    }, placementStyle, style),\n    children: [/*#__PURE__*/_jsx(\"input\", _extends({\n      ref: ref,\n      value: value,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      autoComplete: \"off\",\n      onFocus: () => isFocus.current = true\n    }, other, {\n      style: _extends({\n        width: '100%',\n        paddingTop: 2,\n        paddingBottom: 2,\n        paddingLeft: 3,\n        paddingRight: 3,\n        fontSize: 11,\n        boxSizing: 'border-box',\n        border: 'none',\n        boxShadow: 'rgb(204 204 204) 0px 0px 0px 1px inset'\n      }, inputStyle)\n    })), label && /*#__PURE__*/_jsx(\"span\", {\n      style: _extends({\n        color: 'rgb(153, 153, 153)',\n        textTransform: 'capitalize'\n      }, labelStyle),\n      children: label\n    })]\n  });\n});\nEditableInput.displayName = 'EditableInput';\nexport default EditableInput;","map":{"version":3,"sources":["../src/index.tsx"],"names":["validHex","hex","getNumberValue","value","Number","String","EditableInput","prefixCls","placement","onBlur","other","useState","isFocus","useRef","useEffect","props","setValue","valInit","evn","onChange","val","isNaN","placementStyle","className","position","alignItems","display","fontSize","width","paddingTop","paddingBottom","paddingLeft","paddingRight","boxSizing","border","boxShadow","label","color","textTransform"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useRef, useEffect, useState } from 'react';\n\nconst validHex = (hex: string): boolean => /^#?([A-Fa-f0-9]{3,4}){1,2}$/.test(hex);\nconst getNumberValue = (value: string) => Number(String(value).replace(/%/g, ''));\n\nexport interface EditableInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'> {\n  prefixCls?: string;\n  value?: string | number;\n  label?: React.ReactNode;\n  labelStyle?: React.CSSProperties;\n  placement?: 'top' | 'left' | 'bottom' | 'right';\n  inputStyle?: React.CSSProperties;\n  onChange?: (evn: React.ChangeEvent<HTMLInputElement>, value: string | number) => void;\n}\n\nconst EditableInput = React.forwardRef<HTMLInputElement, EditableInputProps>((props, ref) => {\n  const {\n    prefixCls = 'w-color-editable-input',\n    placement = 'bottom',\n    label,\n    value: initValue,\n    className,\n    style,\n    labelStyle,\n    inputStyle,\n    onChange,\n    onBlur,\n    ...other\n  } = props;\n  const [value, setValue] = useState<string | number | undefined>(initValue);\n  const isFocus = useRef(false);\n\n  useEffect(() => {\n    if (props.value !== value) {\n      if (!isFocus.current) {\n        setValue(props.value);\n      }\n    }\n  }, [props.value]);\n\n  function handleChange(evn: React.FocusEvent<HTMLInputElement>, valInit?: string) {\n    const value = valInit || evn.target.value;\n    if (validHex(value)) {\n      onChange && onChange(evn, value);\n    }\n    const val = getNumberValue(value);\n    if (!isNaN(val)) {\n      onChange && onChange(evn, val);\n    }\n    setValue(value);\n    // setValueProps(value);\n  }\n  function handleBlur(evn: React.FocusEvent<HTMLInputElement>) {\n    isFocus.current = false;\n    setValue(props.value);\n    onBlur && onBlur(evn);\n  }\n  const placementStyle: React.CSSProperties = {};\n  if (placement === 'bottom') {\n    placementStyle['flexDirection'] = 'column';\n  }\n  if (placement === 'top') {\n    placementStyle['flexDirection'] = 'column-reverse';\n  }\n  if (placement === 'left') {\n    placementStyle['flexDirection'] = 'row-reverse';\n  }\n  return (\n    <div\n      className={[prefixCls, className || ''].filter(Boolean).join(' ')}\n      style={{\n        position: 'relative',\n        alignItems: 'center',\n        display: 'flex',\n        fontSize: 11,\n        ...placementStyle,\n        ...style,\n      }}\n    >\n      <input\n        ref={ref}\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        autoComplete=\"off\"\n        onFocus={() => (isFocus.current = true)}\n        {...other}\n        style={{\n          width: '100%',\n          paddingTop: 2,\n          paddingBottom: 2,\n          paddingLeft: 3,\n          paddingRight: 3,\n          fontSize: 11,\n          boxSizing: 'border-box',\n          border: 'none',\n          boxShadow: 'rgb(204 204 204) 0px 0px 0px 1px inset',\n          ...inputStyle,\n        }}\n      />\n      {label && (\n        <span\n          style={{\n            color: 'rgb(153, 153, 153)',\n            textTransform: 'capitalize',\n            ...labelStyle,\n          }}\n          children={label}\n        />\n      )}\n    </div>\n  );\n});\n\nEditableInput.displayName = 'EditableInput';\n\nexport default EditableInput;\n"]},"metadata":{},"sourceType":"module"}