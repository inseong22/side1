{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undoediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class UndoEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'UndoEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\n     * Created and registered during the {@link #init feature initialization}.\n     *\n     * @private\n     * @member {module:undo/undocommand~UndoCommand} #_undoCommand\n     */\n\n    /**\n     * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\n     * Created and registered during the {@link #init feature initialization}.\n     *\n     * @private\n     * @member {module:undo/undocommand~UndoCommand} #_redoCommand\n     */\n\n    /**\n     * Keeps track of which batches were registered in undo.\n     *\n     * @private\n     * @member {WeakSet.<module:engine/model/batch~Batch>}\n     */\n\n    this._batchRegistry = new WeakSet();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Create commands.\n\n    this._undoCommand = new UndoCommand(editor);\n    this._redoCommand = new RedoCommand(editor); // Register command to the editor.\n\n    editor.commands.add('undo', this._undoCommand);\n    editor.commands.add('redo', this._redoCommand);\n    this.listenTo(editor.model, 'applyOperation', (evt, args) => {\n      const operation = args[0]; // Do not register batch if the operation is not a document operation.\n      // This prevents from creating empty undo steps, where all operations where non-document operations.\n      // Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n      // Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n      // Such operations should not be reversed.\n\n      if (!operation.isDocumentOperation) {\n        return;\n      }\n\n      const batch = operation.batch;\n\n      const isRedoBatch = this._redoCommand._createdBatches.has(batch);\n\n      const isUndoBatch = this._undoCommand._createdBatches.has(batch);\n\n      const isRegisteredBatch = this._batchRegistry.has(batch); // If changes are not a part of a batch or this is not a new batch, omit those changes.\n\n\n      if (isRegisteredBatch || batch.type == 'transparent' && !isRedoBatch && !isUndoBatch) {\n        return;\n      } else {\n        if (isRedoBatch) {\n          // If this batch comes from `redoCommand`, add it to `undoCommand` stack.\n          this._undoCommand.addBatch(batch);\n        } else if (!isUndoBatch) {\n          // A default batch - these are new changes in the document, not introduced by undo feature.\n          // Add them to `undoCommand` stack and clear `redoCommand` stack.\n          this._undoCommand.addBatch(batch);\n\n          this._redoCommand.clearStack();\n        }\n      } // Add the batch to the registry so it will not be processed again.\n\n\n      this._batchRegistry.add(batch);\n    }, {\n      priority: 'highest'\n    });\n    this.listenTo(this._undoCommand, 'revert', (evt, undoneBatch, undoingBatch) => {\n      this._redoCommand.addBatch(undoingBatch);\n    });\n    editor.keystrokes.set('CTRL+Z', 'undo');\n    editor.keystrokes.set('CTRL+Y', 'redo');\n    editor.keystrokes.set('CTRL+SHIFT+Z', 'redo');\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-undo/src/undoediting.js"],"names":["Plugin","UndoCommand","RedoCommand","UndoEditing","pluginName","constructor","editor","_batchRegistry","WeakSet","init","_undoCommand","_redoCommand","commands","add","listenTo","model","evt","args","operation","isDocumentOperation","batch","isRedoBatch","_createdBatches","has","isUndoBatch","isRegisteredBatch","type","addBatch","clearStack","priority","undoneBatch","undoingBatch","keystrokes","set"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undoediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'UndoEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_undoCommand\n\t\t */\n\n\t\t/**\n\t\t * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_redoCommand\n\t\t */\n\n\t\t/**\n\t\t * Keeps track of which batches were registered in undo.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>}\n\t\t */\n\t\tthis._batchRegistry = new WeakSet();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Create commands.\n\t\tthis._undoCommand = new UndoCommand( editor );\n\t\tthis._redoCommand = new RedoCommand( editor );\n\n\t\t// Register command to the editor.\n\t\teditor.commands.add( 'undo', this._undoCommand );\n\t\teditor.commands.add( 'redo', this._redoCommand );\n\n\t\tthis.listenTo( editor.model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\t// Do not register batch if the operation is not a document operation.\n\t\t\t// This prevents from creating empty undo steps, where all operations where non-document operations.\n\t\t\t// Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n\t\t\t// Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n\t\t\t// Such operations should not be reversed.\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst batch = operation.batch;\n\n\t\t\tconst isRedoBatch = this._redoCommand._createdBatches.has( batch );\n\t\t\tconst isUndoBatch = this._undoCommand._createdBatches.has( batch );\n\t\t\tconst isRegisteredBatch = this._batchRegistry.has( batch );\n\n\t\t\t// If changes are not a part of a batch or this is not a new batch, omit those changes.\n\t\t\tif ( isRegisteredBatch || ( batch.type == 'transparent' && !isRedoBatch && !isUndoBatch ) ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif ( isRedoBatch ) {\n\t\t\t\t\t// If this batch comes from `redoCommand`, add it to `undoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t} else if ( !isUndoBatch ) {\n\t\t\t\t\t// A default batch - these are new changes in the document, not introduced by undo feature.\n\t\t\t\t\t// Add them to `undoCommand` stack and clear `redoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t\tthis._redoCommand.clearStack();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the batch to the registry so it will not be processed again.\n\t\t\tthis._batchRegistry.add( batch );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this._undoCommand, 'revert', ( evt, undoneBatch, undoingBatch ) => {\n\t\t\tthis._redoCommand.addBatch( undoingBatch );\n\t\t} );\n\n\t\teditor.keystrokes.set( 'CTRL+Z', 'undo' );\n\t\teditor.keystrokes.set( 'CTRL+Y', 'redo' );\n\t\teditor.keystrokes.set( 'CTRL+SHIFT+Z', 'redo' );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}