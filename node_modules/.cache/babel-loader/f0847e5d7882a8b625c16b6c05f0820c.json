{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/ui/colortableview\n */\nimport { icons } from 'ckeditor5/src/core';\nimport { ButtonView, ColorGridView, ColorTileView, FocusCycler, LabelView, Template, View } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport DocumentColorCollection from '../documentcolorcollection';\nimport '../../theme/fontcolor.css';\n/**\n * A class which represents a view with the following subâ€“components:\n *\n * * A remove color button,\n * * A static {@link module:ui/colorgrid/colorgrid~ColorGridView} of colors defined in the configuration,\n * * A dynamic {@link module:ui/colorgrid/colorgrid~ColorGridView} of colors used in the document.\n *\n * @extends module:ui/view~View\n */\n\nexport default class ColorTableView extends View {\n  /**\n   * Creates a view to be inserted as a child of {@link module:ui/dropdown/dropdownview~DropdownView}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {Object} config The configuration object.\n   * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} config.colors An array with definitions of colors to\n   * be displayed in the table.\n   * @param {Number} config.columns The number of columns in the color grid.\n   * @param {String} config.removeButtonLabel The label of the button responsible for removing the color.\n   * @param {String} config.documentColorsLabel The label for the section with the document colors.\n   * @param {Number} config.documentColorsCount The number of colors in the document colors section inside the color dropdown.\n   */\n  constructor(locale, {\n    colors,\n    columns,\n    removeButtonLabel,\n    documentColorsLabel,\n    documentColorsCount\n  }) {\n    super(locale);\n    /**\n     * A collection of the children of the table.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.items = this.createCollection();\n    /**\n     * An array with objects representing colors to be displayed in the grid.\n     *\n     * @type {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}\n     */\n\n    this.colorDefinitions = colors;\n    /**\n     * Tracks information about the DOM focus in the list.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * Keeps the value of the command associated with the table for the current selection.\n     *\n     * @type {String}\n     */\n\n    this.set('selectedColor');\n    /**\n     * The label of the button responsible for removing color attributes.\n     *\n     * @type {String}\n     */\n\n    this.removeButtonLabel = removeButtonLabel;\n    /**\n     * The number of columns in the color grid.\n     *\n     * @type {Number}\n     */\n\n    this.columns = columns;\n    /**\n     * A collection of definitions that store the document colors.\n     *\n     * @readonly\n     * @member {module:font/documentcolorcollection~DocumentColorCollection}\n     */\n\n    this.documentColors = new DocumentColorCollection();\n    /**\n     * The maximum number of colors in the document colors section.\n     * If it equals 0, the document colors section is not added.\n     *\n     * @readonly\n     * @type {Number}\n     */\n\n    this.documentColorsCount = documentColorsCount;\n    /**\n     * Preserves the reference to {@link module:ui/colorgrid/colorgrid~ColorGridView} used to create\n     * the default (static) color set.\n     *\n     * The property is loaded once the the parent dropdown is opened the first time.\n     *\n     * @readonly\n     * @member {module:ui/colorgrid/colorgrid~ColorGridView|undefined} #staticColorsGrid\n     */\n\n    /**\n     * Preserves the reference to {@link module:ui/colorgrid/colorgrid~ColorGridView} used to create\n     * the document colors. It remains undefined if the document colors feature is disabled.\n     *\n     * The property is loaded once the the parent dropdown is opened the first time.\n     *\n     * @readonly\n     * @member {module:ui/colorgrid/colorgrid~ColorGridView|undefined} #documentColorsGrid\n     */\n\n    /**\n     * Helps cycling over focusable {@link #items} in the list.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this.items,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate list items backwards using the Arrow Up key.\n        focusPrevious: 'arrowup',\n        // Navigate list items forwards using the Arrow Down key.\n        focusNext: 'arrowdown'\n      }\n    });\n    /**\n     * Document color section's label.\n     *\n     * @private\n     * @readonly\n     * @type {String}\n     */\n\n    this._documentColorsLabel = documentColorsLabel;\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-color-table']\n      },\n      children: this.items\n    });\n    this.items.add(this._removeColorButton());\n  }\n  /**\n   * Scans through the editor model and searches for text node attributes with the given attribute name.\n   * Found entries are set as document colors.\n   *\n   * All the previously stored document colors will be lost in the process.\n   *\n   * @param {module:engine/model/model~Model} model The model used as a source to obtain the document colors.\n   * @param {String} attributeName Determines the name of the related model's attribute for a given dropdown.\n   */\n\n\n  updateDocumentColors(model, attributeName) {\n    const document = model.document;\n    const maxCount = this.documentColorsCount;\n    this.documentColors.clear();\n\n    for (const rootName of document.getRootNames()) {\n      const root = document.getRoot(rootName);\n      const range = model.createRangeIn(root);\n\n      for (const node of range.getItems()) {\n        if (node.is('$textProxy') && node.hasAttribute(attributeName)) {\n          this._addColorToDocumentColors(node.getAttribute(attributeName));\n\n          if (this.documentColors.length >= maxCount) {\n            return;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Refreshes the state of the selected color in one or both {@link module:ui/colorgrid/colorgrid~ColorGridView}s\n   * available in the {@link module:font/ui/colortableview~ColorTableView}. It guarantees that the selection will occur only in one\n   * of them.\n   */\n\n\n  updateSelectedColors() {\n    const documentColorsGrid = this.documentColorsGrid;\n    const staticColorsGrid = this.staticColorsGrid;\n    const selectedColor = this.selectedColor;\n    staticColorsGrid.selectedColor = selectedColor;\n\n    if (documentColorsGrid) {\n      documentColorsGrid.selectedColor = selectedColor;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Items added before rendering should be known to the #focusTracker.\n\n    for (const item of this.items) {\n      this.focusTracker.add(item.element);\n    } // Start listening for the keystrokes coming from #element.\n\n\n    this.keystrokes.listenTo(this.element);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n  /**\n   * Appends {@link #staticColorsGrid} and {@link #documentColorsGrid} views.\n   */\n\n\n  appendGrids() {\n    if (this.staticColorsGrid) {\n      return;\n    }\n\n    this.staticColorsGrid = this._createStaticColorsGrid();\n    this.items.add(this.staticColorsGrid);\n\n    if (this.documentColorsCount) {\n      // Create a label for document colors.\n      const bind = Template.bind(this.documentColors, this.documentColors);\n      const label = new LabelView(this.locale);\n      label.text = this._documentColorsLabel;\n      label.extendTemplate({\n        attributes: {\n          class: ['ck', 'ck-color-grid__label', bind.if('isEmpty', 'ck-hidden')]\n        }\n      });\n      this.items.add(label);\n      this.documentColorsGrid = this._createDocumentColorsGrid();\n      this.items.add(this.documentColorsGrid);\n    }\n  }\n  /**\n   * Focuses the first focusable element in {@link #items}.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Focuses the last focusable element in {@link #items}.\n   */\n\n\n  focusLast() {\n    this._focusCycler.focusLast();\n  }\n  /**\n   * Adds the remove color button as a child of the current view.\n   *\n   * @private\n   * @returns {module:ui/button/buttonview~ButtonView}\n   */\n\n\n  _removeColorButton() {\n    const buttonView = new ButtonView();\n    buttonView.set({\n      withText: true,\n      icon: icons.eraser,\n      tooltip: true,\n      label: this.removeButtonLabel\n    });\n    buttonView.class = 'ck-color-table__remove-color';\n    buttonView.on('execute', () => {\n      this.fire('execute', {\n        value: null\n      });\n    });\n    return buttonView;\n  }\n  /**\n   * Creates a static color table grid based on the editor configuration.\n   *\n   * @private\n   * @returns {module:ui/colorgrid/colorgrid~ColorGridView}\n   */\n\n\n  _createStaticColorsGrid() {\n    const colorGrid = new ColorGridView(this.locale, {\n      colorDefinitions: this.colorDefinitions,\n      columns: this.columns\n    });\n    colorGrid.delegate('execute').to(this);\n    return colorGrid;\n  }\n  /**\n   * Creates the document colors section view and binds it to {@link #documentColors}.\n   *\n   * @private\n   * @returns {module:ui/colorgrid/colorgrid~ColorGridView}\n   */\n\n\n  _createDocumentColorsGrid() {\n    const bind = Template.bind(this.documentColors, this.documentColors);\n    const documentColorsGrid = new ColorGridView(this.locale, {\n      columns: this.columns\n    });\n    documentColorsGrid.delegate('execute').to(this);\n    documentColorsGrid.extendTemplate({\n      attributes: {\n        class: bind.if('isEmpty', 'ck-hidden')\n      }\n    });\n    documentColorsGrid.items.bindTo(this.documentColors).using(colorObj => {\n      const colorTile = new ColorTileView();\n      colorTile.set({\n        color: colorObj.color,\n        hasBorder: colorObj.options && colorObj.options.hasBorder\n      });\n\n      if (colorObj.label) {\n        colorTile.set({\n          label: colorObj.label,\n          tooltip: true\n        });\n      }\n\n      colorTile.on('execute', () => {\n        this.fire('execute', {\n          value: colorObj.color\n        });\n      });\n      return colorTile;\n    }); // Selected color should be cleared when document colors became empty.\n\n    this.documentColors.on('change:isEmpty', (evt, name, val) => {\n      if (val) {\n        documentColorsGrid.selectedColor = null;\n      }\n    });\n    return documentColorsGrid;\n  }\n  /**\n   * Adds a given color to the document colors list. If possible, the method will attempt to use\n   * data from the {@link #colorDefinitions} (label, color options).\n   *\n   * @private\n   * @param {String} color A string that stores the value of the recently applied color.\n   */\n\n\n  _addColorToDocumentColors(color) {\n    const predefinedColor = this.colorDefinitions.find(definition => definition.color === color);\n\n    if (!predefinedColor) {\n      this.documentColors.add({\n        color,\n        label: color,\n        options: {\n          hasBorder: false\n        }\n      });\n    } else {\n      this.documentColors.add(Object.assign({}, predefinedColor));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/ui/colortableview.js"],"names":["icons","ButtonView","ColorGridView","ColorTileView","FocusCycler","LabelView","Template","View","FocusTracker","KeystrokeHandler","DocumentColorCollection","ColorTableView","constructor","locale","colors","columns","removeButtonLabel","documentColorsLabel","documentColorsCount","items","createCollection","colorDefinitions","focusTracker","keystrokes","set","documentColors","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","_documentColorsLabel","setTemplate","tag","attributes","class","children","add","_removeColorButton","updateDocumentColors","model","attributeName","document","maxCount","clear","rootName","getRootNames","root","getRoot","range","createRangeIn","node","getItems","is","hasAttribute","_addColorToDocumentColors","getAttribute","length","updateSelectedColors","documentColorsGrid","staticColorsGrid","selectedColor","render","item","element","listenTo","destroy","appendGrids","_createStaticColorsGrid","bind","label","text","extendTemplate","if","_createDocumentColorsGrid","focus","focusFirst","focusLast","buttonView","withText","icon","eraser","tooltip","on","fire","value","colorGrid","delegate","to","bindTo","using","colorObj","colorTile","color","hasBorder","options","evt","name","val","predefinedColor","find","definition","Object","assign"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/ui/colortableview\n */\n\nimport { icons } from 'ckeditor5/src/core';\nimport { ButtonView, ColorGridView, ColorTileView, FocusCycler, LabelView, Template, View } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\n\nimport DocumentColorCollection from '../documentcolorcollection';\n\nimport '../../theme/fontcolor.css';\n\n/**\n * A class which represents a view with the following subâ€“components:\n *\n * * A remove color button,\n * * A static {@link module:ui/colorgrid/colorgrid~ColorGridView} of colors defined in the configuration,\n * * A dynamic {@link module:ui/colorgrid/colorgrid~ColorGridView} of colors used in the document.\n *\n * @extends module:ui/view~View\n */\nexport default class ColorTableView extends View {\n\t/**\n\t * Creates a view to be inserted as a child of {@link module:ui/dropdown/dropdownview~DropdownView}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {Object} config The configuration object.\n\t * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} config.colors An array with definitions of colors to\n\t * be displayed in the table.\n\t * @param {Number} config.columns The number of columns in the color grid.\n\t * @param {String} config.removeButtonLabel The label of the button responsible for removing the color.\n\t * @param {String} config.documentColorsLabel The label for the section with the document colors.\n\t * @param {Number} config.documentColorsCount The number of colors in the document colors section inside the color dropdown.\n\t */\n\tconstructor( locale, { colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount } ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * A collection of the children of the table.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * An array with objects representing colors to be displayed in the grid.\n\t\t *\n\t\t * @type {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}\n\t\t */\n\t\tthis.colorDefinitions = colors;\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Keeps the value of the command associated with the table for the current selection.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.set( 'selectedColor' );\n\n\t\t/**\n\t\t * The label of the button responsible for removing color attributes.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.removeButtonLabel = removeButtonLabel;\n\n\t\t/**\n\t\t * The number of columns in the color grid.\n\t\t *\n\t\t * @type {Number}\n\t\t */\n\t\tthis.columns = columns;\n\n\t\t/**\n\t\t * A collection of definitions that store the document colors.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:font/documentcolorcollection~DocumentColorCollection}\n\t\t */\n\t\tthis.documentColors = new DocumentColorCollection();\n\n\t\t/**\n\t\t * The maximum number of colors in the document colors section.\n\t\t * If it equals 0, the document colors section is not added.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Number}\n\t\t */\n\t\tthis.documentColorsCount = documentColorsCount;\n\n\t\t/**\n\t\t * Preserves the reference to {@link module:ui/colorgrid/colorgrid~ColorGridView} used to create\n\t\t * the default (static) color set.\n\t\t *\n\t\t * The property is loaded once the the parent dropdown is opened the first time.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/colorgrid/colorgrid~ColorGridView|undefined} #staticColorsGrid\n\t\t */\n\n\t\t/**\n\t\t * Preserves the reference to {@link module:ui/colorgrid/colorgrid~ColorGridView} used to create\n\t\t * the document colors. It remains undefined if the document colors feature is disabled.\n\t\t *\n\t\t * The property is loaded once the the parent dropdown is opened the first time.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/colorgrid/colorgrid~ColorGridView|undefined} #documentColorsGrid\n\t\t */\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate list items backwards using the Arrow Up key.\n\t\t\t\tfocusPrevious: 'arrowup',\n\n\t\t\t\t// Navigate list items forwards using the Arrow Down key.\n\t\t\t\tfocusNext: 'arrowdown'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Document color section's label.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @type {String}\n\t\t */\n\t\tthis._documentColorsLabel = documentColorsLabel;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-color-table'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: this.items\n\t\t} );\n\n\t\tthis.items.add( this._removeColorButton() );\n\t}\n\n\t/**\n\t * Scans through the editor model and searches for text node attributes with the given attribute name.\n\t * Found entries are set as document colors.\n\t *\n\t * All the previously stored document colors will be lost in the process.\n\t *\n\t * @param {module:engine/model/model~Model} model The model used as a source to obtain the document colors.\n\t * @param {String} attributeName Determines the name of the related model's attribute for a given dropdown.\n\t */\n\tupdateDocumentColors( model, attributeName ) {\n\t\tconst document = model.document;\n\t\tconst maxCount = this.documentColorsCount;\n\n\t\tthis.documentColors.clear();\n\n\t\tfor ( const rootName of document.getRootNames() ) {\n\t\t\tconst root = document.getRoot( rootName );\n\t\t\tconst range = model.createRangeIn( root );\n\n\t\t\tfor ( const node of range.getItems() ) {\n\t\t\t\tif ( node.is( '$textProxy' ) && node.hasAttribute( attributeName ) ) {\n\t\t\t\t\tthis._addColorToDocumentColors( node.getAttribute( attributeName ) );\n\n\t\t\t\t\tif ( this.documentColors.length >= maxCount ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the state of the selected color in one or both {@link module:ui/colorgrid/colorgrid~ColorGridView}s\n\t * available in the {@link module:font/ui/colortableview~ColorTableView}. It guarantees that the selection will occur only in one\n\t * of them.\n\t */\n\tupdateSelectedColors() {\n\t\tconst documentColorsGrid = this.documentColorsGrid;\n\t\tconst staticColorsGrid = this.staticColorsGrid;\n\t\tconst selectedColor = this.selectedColor;\n\n\t\tstaticColorsGrid.selectedColor = selectedColor;\n\n\t\tif ( documentColorsGrid ) {\n\t\t\tdocumentColorsGrid.selectedColor = selectedColor;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Appends {@link #staticColorsGrid} and {@link #documentColorsGrid} views.\n\t */\n\tappendGrids() {\n\t\tif ( this.staticColorsGrid ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.staticColorsGrid = this._createStaticColorsGrid();\n\n\t\tthis.items.add( this.staticColorsGrid );\n\n\t\tif ( this.documentColorsCount ) {\n\t\t\t// Create a label for document colors.\n\t\t\tconst bind = Template.bind( this.documentColors, this.documentColors );\n\t\t\tconst label = new LabelView( this.locale );\n\t\t\tlabel.text = this._documentColorsLabel;\n\t\t\tlabel.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: [\n\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t'ck-color-grid__label',\n\t\t\t\t\t\tbind.if( 'isEmpty', 'ck-hidden' )\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.items.add( label );\n\t\t\tthis.documentColorsGrid = this._createDocumentColorsGrid();\n\t\t\tthis.items.add( this.documentColorsGrid );\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the first focusable element in {@link #items}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable element in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n\n\t/**\n\t * Adds the remove color button as a child of the current view.\n\t *\n\t * @private\n\t * @returns {module:ui/button/buttonview~ButtonView}\n\t */\n\t_removeColorButton() {\n\t\tconst buttonView = new ButtonView();\n\n\t\tbuttonView.set( {\n\t\t\twithText: true,\n\t\t\ticon: icons.eraser,\n\t\t\ttooltip: true,\n\t\t\tlabel: this.removeButtonLabel\n\t\t} );\n\n\t\tbuttonView.class = 'ck-color-table__remove-color';\n\t\tbuttonView.on( 'execute', () => {\n\t\t\tthis.fire( 'execute', { value: null } );\n\t\t} );\n\n\t\treturn buttonView;\n\t}\n\n\t/**\n\t * Creates a static color table grid based on the editor configuration.\n\t *\n\t * @private\n\t * @returns {module:ui/colorgrid/colorgrid~ColorGridView}\n\t */\n\t_createStaticColorsGrid() {\n\t\tconst colorGrid = new ColorGridView( this.locale, {\n\t\t\tcolorDefinitions: this.colorDefinitions,\n\t\t\tcolumns: this.columns\n\t\t} );\n\n\t\tcolorGrid.delegate( 'execute' ).to( this );\n\n\t\treturn colorGrid;\n\t}\n\n\t/**\n\t * Creates the document colors section view and binds it to {@link #documentColors}.\n\t *\n\t * @private\n\t * @returns {module:ui/colorgrid/colorgrid~ColorGridView}\n\t */\n\t_createDocumentColorsGrid() {\n\t\tconst bind = Template.bind( this.documentColors, this.documentColors );\n\t\tconst documentColorsGrid = new ColorGridView( this.locale, {\n\t\t\tcolumns: this.columns\n\t\t} );\n\n\t\tdocumentColorsGrid.delegate( 'execute' ).to( this );\n\n\t\tdocumentColorsGrid.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: bind.if( 'isEmpty', 'ck-hidden' )\n\t\t\t}\n\t\t} );\n\n\t\tdocumentColorsGrid.items.bindTo( this.documentColors ).using(\n\t\t\tcolorObj => {\n\t\t\t\tconst colorTile = new ColorTileView();\n\n\t\t\t\tcolorTile.set( {\n\t\t\t\t\tcolor: colorObj.color,\n\t\t\t\t\thasBorder: colorObj.options && colorObj.options.hasBorder\n\t\t\t\t} );\n\n\t\t\t\tif ( colorObj.label ) {\n\t\t\t\t\tcolorTile.set( {\n\t\t\t\t\t\tlabel: colorObj.label,\n\t\t\t\t\t\ttooltip: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tcolorTile.on( 'execute', () => {\n\t\t\t\t\tthis.fire( 'execute', {\n\t\t\t\t\t\tvalue: colorObj.color\n\t\t\t\t\t} );\n\t\t\t\t} );\n\n\t\t\t\treturn colorTile;\n\t\t\t}\n\t\t);\n\n\t\t// Selected color should be cleared when document colors became empty.\n\t\tthis.documentColors.on( 'change:isEmpty', ( evt, name, val ) => {\n\t\t\tif ( val ) {\n\t\t\t\tdocumentColorsGrid.selectedColor = null;\n\t\t\t}\n\t\t} );\n\n\t\treturn documentColorsGrid;\n\t}\n\n\t/**\n\t * Adds a given color to the document colors list. If possible, the method will attempt to use\n\t * data from the {@link #colorDefinitions} (label, color options).\n\t *\n\t * @private\n\t * @param {String} color A string that stores the value of the recently applied color.\n\t */\n\t_addColorToDocumentColors( color ) {\n\t\tconst predefinedColor = this.colorDefinitions\n\t\t\t.find( definition => definition.color === color );\n\n\t\tif ( !predefinedColor ) {\n\t\t\tthis.documentColors.add( {\n\t\t\t\tcolor,\n\t\t\t\tlabel: color,\n\t\t\t\toptions: {\n\t\t\t\t\thasBorder: false\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\tthis.documentColors.add( Object.assign( {}, predefinedColor ) );\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}