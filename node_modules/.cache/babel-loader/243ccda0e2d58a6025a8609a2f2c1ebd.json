{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView, createDropdown, addToolbarToDropdown, SplitButtonView } from 'ckeditor5/src/ui';\nimport ImageStyleEditing from './imagestyleediting';\nimport utils from './utils';\nimport { isObject, identity } from 'lodash-es';\nimport '../../theme/imagestyle.css';\n/**\n * The image style UI plugin.\n *\n * It registers buttons corresponding to the {@link module:image/image~ImageConfig#styles} configuration.\n * It also registers the {@link module:image/imagestyle/utils~DEFAULT_DROPDOWN_DEFINITIONS default drop-downs} and the\n * custom drop-downs defined by the developer in the {@link module:image/image~ImageConfig#toolbar} configuration.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageStyleUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageStyleEditing];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageStyleUI';\n  }\n  /**\n   * Returns the default localized style titles provided by the plugin.\n   *\n   * The following localized titles corresponding with\n   * {@link module:image/imagestyle/utils~DEFAULT_OPTIONS} are available:\n   *\n   * * `'Wrap text'`,\n   * * `'Break text'`,\n   * * `'In line'`,\n   * * `'Full size image'`,\n   * * `'Side image'`,\n   * * `'Left aligned image'`,\n   * * `'Centered image'`,\n   * * `'Right aligned image'`\n   *\n   * @returns {Object.<String,String>}\n   */\n\n\n  get localizedDefaultStylesTitles() {\n    const t = this.editor.t;\n    return {\n      'Wrap text': t('Wrap text'),\n      'Break text': t('Break text'),\n      'In line': t('In line'),\n      'Full size image': t('Full size image'),\n      'Side image': t('Side image'),\n      'Left aligned image': t('Left aligned image'),\n      'Centered image': t('Centered image'),\n      'Right aligned image': t('Right aligned image')\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const plugins = this.editor.plugins;\n    const toolbarConfig = this.editor.config.get('image.toolbar') || [];\n    const definedStyles = translateStyles(plugins.get('ImageStyleEditing').normalizedStyles, this.localizedDefaultStylesTitles);\n\n    for (const styleConfig of definedStyles) {\n      this._createButton(styleConfig);\n    }\n\n    const definedDropdowns = translateStyles([...toolbarConfig.filter(isObject), ...utils.getDefaultDropdownDefinitions(plugins)], this.localizedDefaultStylesTitles);\n\n    for (const dropdownConfig of definedDropdowns) {\n      this._createDropdown(dropdownConfig, definedStyles);\n    }\n  }\n  /**\n   * Creates a dropdown and stores it in the editor {@link module:ui/componentfactory~ComponentFactory}.\n   *\n   * @private\n   * @param {module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition} dropdownConfig\n   * @param {Array.<module:image/imagestyle~ImageStyleOptionDefinition>} definedStyles\n   */\n\n\n  _createDropdown(dropdownConfig, definedStyles) {\n    const factory = this.editor.ui.componentFactory;\n    factory.add(dropdownConfig.name, locale => {\n      let defaultButton;\n      const {\n        defaultItem,\n        items,\n        title\n      } = dropdownConfig;\n      const buttonViews = items.filter(itemName => definedStyles.find(({\n        name\n      }) => getUIComponentName(name) === itemName)).map(buttonName => {\n        const button = factory.create(buttonName);\n\n        if (buttonName === defaultItem) {\n          defaultButton = button;\n        }\n\n        return button;\n      });\n\n      if (items.length !== buttonViews.length) {\n        utils.warnInvalidStyle({\n          dropdown: dropdownConfig\n        });\n      }\n\n      const dropdownView = createDropdown(locale, SplitButtonView);\n      const splitButtonView = dropdownView.buttonView;\n      addToolbarToDropdown(dropdownView, buttonViews);\n      splitButtonView.set({\n        label: getDropdownButtonTitle(title, defaultButton.label),\n        class: null,\n        tooltip: true\n      });\n      splitButtonView.bind('icon').toMany(buttonViews, 'isOn', (...areOn) => {\n        const index = areOn.findIndex(identity);\n        return index < 0 ? defaultButton.icon : buttonViews[index].icon;\n      });\n      splitButtonView.bind('label').toMany(buttonViews, 'isOn', (...areOn) => {\n        const index = areOn.findIndex(identity);\n        return getDropdownButtonTitle(title, index < 0 ? defaultButton.label : buttonViews[index].label);\n      });\n      splitButtonView.bind('isOn').toMany(buttonViews, 'isOn', (...areOn) => areOn.some(identity));\n      splitButtonView.bind('class').toMany(buttonViews, 'isOn', (...areOn) => areOn.some(identity) ? 'ck-splitbutton_flatten' : null);\n      splitButtonView.on('execute', () => {\n        if (!buttonViews.some(({\n          isOn\n        }) => isOn)) {\n          defaultButton.fire('execute');\n        } else {\n          dropdownView.isOpen = !dropdownView.isOpen;\n        }\n      });\n      dropdownView.bind('isEnabled').toMany(buttonViews, 'isEnabled', (...areEnabled) => areEnabled.some(identity));\n      return dropdownView;\n    });\n  }\n  /**\n   * Creates a button and stores it in the editor {@link module:ui/componentfactory~ComponentFactory}.\n   *\n   * @private\n   * @param {module:image/imagestyle~ImageStyleOptionDefinition} buttonConfig\n   */\n\n\n  _createButton(buttonConfig) {\n    const buttonName = buttonConfig.name;\n    this.editor.ui.componentFactory.add(getUIComponentName(buttonName), locale => {\n      const command = this.editor.commands.get('imageStyle');\n      const view = new ButtonView(locale);\n      view.set({\n        label: buttonConfig.title,\n        icon: buttonConfig.icon,\n        tooltip: true,\n        isToggleable: true\n      });\n      view.bind('isEnabled').to(command, 'isEnabled');\n      view.bind('isOn').to(command, 'value', value => value === buttonName);\n      view.on('execute', this._executeCommand.bind(this, buttonName));\n      return view;\n    });\n  }\n\n  _executeCommand(name) {\n    this.editor.execute('imageStyle', {\n      value: name\n    });\n    this.editor.editing.view.focus();\n  }\n\n} // Returns the translated `title` from the passed styles array.\n//\n// @param {Array.<module:image/imagestyle~ImageStyleOptionDefinition|\n// module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>} styles\n// @param {Object.<String,String>} titles\n//\n// @returns {Array.<module:image/imagestyle~ImageStyleOptionDefinition|module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>}\n\nfunction translateStyles(styles, titles) {\n  for (const style of styles) {\n    // Localize the titles of the styles, if a title corresponds with\n    // a localized default provided by the plugin.\n    if (titles[style.title]) {\n      style.title = titles[style.title];\n    }\n  }\n\n  return styles;\n} // Returns the image style component name with the \"imageStyle:\" prefix.\n//\n// @param {String} name\n// @returns {String}\n\n\nfunction getUIComponentName(name) {\n  return `imageStyle:${name}`;\n} // Returns title for the splitbutton containing the dropdown title and default action item title.\n//\n// @param {String|undefined} dropdownTitle\n// @param {String} buttonTitle\n// @returns {String}\n\n\nfunction getDropdownButtonTitle(dropdownTitle, buttonTitle) {\n  return (dropdownTitle ? dropdownTitle + ': ' : '') + buttonTitle;\n}\n/**\n * # **The image style custom drop-down definition descriptor**\n *\n * This definition can be implemented in the {@link module:image/image~ImageConfig#toolbar image toolbar configuration}\n * to define a completely custom drop-down in the image toolbar.\n *\n *\t\tClassicEditor.create( editorElement, {\n *\t\t\timage: { toolbar: [\n *\t \t\t\t// One of the predefined drop-downs\n *\t \t\t\t'imageStyle:wrapText',\n *\t\t\t\t// Custom drop-down\n *\t\t\t\t{\n *\t\t\t\t\tname: 'imageStyle:customDropdown',\n *\t\t\t\t\ttitle: Custom drop-down title,\n *\t\t\t\t\titems: [ 'imageStyle:alignLeft', 'imageStyle:alignRight' ],\n *\t\t\t\t\tdefaultItem: 'imageStyle:alignLeft'\n *\t\t\t\t}\n *\t\t\t] }\n *\t\t} );\n *\n * **Note:** At the moment it is possible to populate the custom drop-down with only the buttons registered by the `ImageStyle` plugin.\n *\n * The defined drop-down will be registered\n * as the {@link module:ui/dropdown/dropdownview~DropdownView}\n * with the {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} under the provided name in the\n * {@link module:ui/componentfactory~ComponentFactory}\n *\n * @property {String} name The unique name of the drop-down. It is recommended to precede it with the \"imageStyle:\" prefix\n * to avoid collision with the components' names registered by other plugins.\n *\n * @property {String} [title] The drop-down's title. It will be used as the split button label along with the title of the default item\n * in the following manner: \"Custom drop-down title: Default item title\".\n *\n * Setting `title` to one of\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI#localizedDefaultStylesTitles}\n * will automatically translate it to the language of the editor.\n *\n * @property {Array.<String>} items The list of the names of the buttons that will be placed in the drop-down's toolbar.\n * Each of the buttons has to be one of the {@link module:image/image~ImageConfig#styles default image style buttons}\n * or to be defined as the {@link module:image/imagestyle~ImageStyleOptionDefinition image styling option}.\n *\n * @property {String} defaultItem The name of one of the buttons from the items list,\n * which will be used as a default button for the drop-down's split button.\n *\n * @typedef {Object} module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition\n */","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestyleui.js"],"names":["Plugin","ButtonView","createDropdown","addToolbarToDropdown","SplitButtonView","ImageStyleEditing","utils","isObject","identity","ImageStyleUI","requires","pluginName","localizedDefaultStylesTitles","t","editor","init","plugins","toolbarConfig","config","get","definedStyles","translateStyles","normalizedStyles","styleConfig","_createButton","definedDropdowns","filter","getDefaultDropdownDefinitions","dropdownConfig","_createDropdown","factory","ui","componentFactory","add","name","locale","defaultButton","defaultItem","items","title","buttonViews","itemName","find","getUIComponentName","map","buttonName","button","create","length","warnInvalidStyle","dropdown","dropdownView","splitButtonView","buttonView","set","label","getDropdownButtonTitle","class","tooltip","bind","toMany","areOn","index","findIndex","icon","some","on","isOn","fire","isOpen","areEnabled","buttonConfig","command","commands","view","isToggleable","to","value","_executeCommand","execute","editing","focus","styles","titles","style","dropdownTitle","buttonTitle"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView, createDropdown, addToolbarToDropdown, SplitButtonView } from 'ckeditor5/src/ui';\nimport ImageStyleEditing from './imagestyleediting';\nimport utils from './utils';\nimport { isObject, identity } from 'lodash-es';\n\nimport '../../theme/imagestyle.css';\n\n/**\n * The image style UI plugin.\n *\n * It registers buttons corresponding to the {@link module:image/image~ImageConfig#styles} configuration.\n * It also registers the {@link module:image/imagestyle/utils~DEFAULT_DROPDOWN_DEFINITIONS default drop-downs} and the\n * custom drop-downs defined by the developer in the {@link module:image/image~ImageConfig#toolbar} configuration.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyleUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageStyleEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyleUI';\n\t}\n\n\t/**\n\t * Returns the default localized style titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:image/imagestyle/utils~DEFAULT_OPTIONS} are available:\n\t *\n\t * * `'Wrap text'`,\n\t * * `'Break text'`,\n\t * * `'In line'`,\n\t * * `'Full size image'`,\n\t * * `'Side image'`,\n\t * * `'Left aligned image'`,\n\t * * `'Centered image'`,\n\t * * `'Right aligned image'`\n\t *\n\t * @returns {Object.<String,String>}\n\t */\n\tget localizedDefaultStylesTitles() {\n\t\tconst t = this.editor.t;\n\n\t\treturn {\n\t\t\t'Wrap text': t( 'Wrap text' ),\n\t\t\t'Break text': t( 'Break text' ),\n\t\t\t'In line': t( 'In line' ),\n\t\t\t'Full size image': t( 'Full size image' ),\n\t\t\t'Side image': t( 'Side image' ),\n\t\t\t'Left aligned image': t( 'Left aligned image' ),\n\t\t\t'Centered image': t( 'Centered image' ),\n\t\t\t'Right aligned image': t( 'Right aligned image' )\n\t\t};\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst plugins = this.editor.plugins;\n\t\tconst toolbarConfig = this.editor.config.get( 'image.toolbar' ) || [];\n\n\t\tconst definedStyles = translateStyles(\n\t\t\tplugins.get( 'ImageStyleEditing' ).normalizedStyles,\n\t\t\tthis.localizedDefaultStylesTitles\n\t\t);\n\n\t\tfor ( const styleConfig of definedStyles ) {\n\t\t\tthis._createButton( styleConfig );\n\t\t}\n\n\t\tconst definedDropdowns = translateStyles(\n\t\t\t[ ...toolbarConfig.filter( isObject ), ...utils.getDefaultDropdownDefinitions( plugins ) ],\n\t\t\tthis.localizedDefaultStylesTitles\n\t\t);\n\n\t\tfor ( const dropdownConfig of definedDropdowns ) {\n\t\t\tthis._createDropdown( dropdownConfig, definedStyles );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a dropdown and stores it in the editor {@link module:ui/componentfactory~ComponentFactory}.\n\t *\n\t * @private\n\t * @param {module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition} dropdownConfig\n\t * @param {Array.<module:image/imagestyle~ImageStyleOptionDefinition>} definedStyles\n\t */\n\t_createDropdown( dropdownConfig, definedStyles ) {\n\t\tconst factory = this.editor.ui.componentFactory;\n\n\t\tfactory.add( dropdownConfig.name, locale => {\n\t\t\tlet defaultButton;\n\n\t\t\tconst { defaultItem, items, title } = dropdownConfig;\n\t\t\tconst buttonViews = items\n\t\t\t\t.filter( itemName => definedStyles.find( ( { name } ) => getUIComponentName( name ) === itemName ) )\n\t\t\t\t.map( buttonName => {\n\t\t\t\t\tconst button = factory.create( buttonName );\n\n\t\t\t\t\tif ( buttonName === defaultItem ) {\n\t\t\t\t\t\tdefaultButton = button;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn button;\n\t\t\t\t} );\n\n\t\t\tif ( items.length !== buttonViews.length ) {\n\t\t\t\tutils.warnInvalidStyle( { dropdown: dropdownConfig } );\n\t\t\t}\n\n\t\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\t\tconst splitButtonView = dropdownView.buttonView;\n\n\t\t\taddToolbarToDropdown( dropdownView, buttonViews );\n\n\t\t\tsplitButtonView.set( {\n\t\t\t\tlabel: getDropdownButtonTitle( title, defaultButton.label ),\n\t\t\t\tclass: null,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tsplitButtonView.bind( 'icon' ).toMany( buttonViews, 'isOn', ( ...areOn ) => {\n\t\t\t\tconst index = areOn.findIndex( identity );\n\n\t\t\t\treturn ( index < 0 ) ? defaultButton.icon : buttonViews[ index ].icon;\n\t\t\t} );\n\n\t\t\tsplitButtonView.bind( 'label' ).toMany( buttonViews, 'isOn', ( ...areOn ) => {\n\t\t\t\tconst index = areOn.findIndex( identity );\n\n\t\t\t\treturn getDropdownButtonTitle( title, ( index < 0 ) ? defaultButton.label : buttonViews[ index ].label );\n\t\t\t} );\n\n\t\t\tsplitButtonView.bind( 'isOn' ).toMany( buttonViews, 'isOn', ( ...areOn ) => areOn.some( identity ) );\n\n\t\t\tsplitButtonView.bind( 'class' )\n\t\t\t\t.toMany( buttonViews, 'isOn', ( ...areOn ) => areOn.some( identity ) ? 'ck-splitbutton_flatten' : null );\n\n\t\t\tsplitButtonView.on( 'execute', () => {\n\t\t\t\tif ( !buttonViews.some( ( { isOn } ) => isOn ) ) {\n\t\t\t\t\tdefaultButton.fire( 'execute' );\n\t\t\t\t} else {\n\t\t\t\t\tdropdownView.isOpen = !dropdownView.isOpen;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tdropdownView.bind( 'isEnabled' )\n\t\t\t\t.toMany( buttonViews, 'isEnabled', ( ...areEnabled ) => areEnabled.some( identity ) );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a button and stores it in the editor {@link module:ui/componentfactory~ComponentFactory}.\n\t *\n\t * @private\n\t * @param {module:image/imagestyle~ImageStyleOptionDefinition} buttonConfig\n\t */\n\t_createButton( buttonConfig ) {\n\t\tconst buttonName = buttonConfig.name;\n\n\t\tthis.editor.ui.componentFactory.add( getUIComponentName( buttonName ), locale => {\n\t\t\tconst command = this.editor.commands.get( 'imageStyle' );\n\t\t\tconst view = new ButtonView( locale );\n\n\t\t\tview.set( {\n\t\t\t\tlabel: buttonConfig.title,\n\t\t\t\ticon: buttonConfig.icon,\n\t\t\t\ttooltip: true,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\tview.bind( 'isEnabled' ).to( command, 'isEnabled' );\n\t\t\tview.bind( 'isOn' ).to( command, 'value', value => value === buttonName );\n\t\t\tview.on( 'execute', this._executeCommand.bind( this, buttonName ) );\n\n\t\t\treturn view;\n\t\t} );\n\t}\n\n\t_executeCommand( name ) {\n\t\tthis.editor.execute( 'imageStyle', { value: name } );\n\t\tthis.editor.editing.view.focus();\n\t}\n}\n\n// Returns the translated `title` from the passed styles array.\n//\n// @param {Array.<module:image/imagestyle~ImageStyleOptionDefinition|\n// module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>} styles\n// @param {Object.<String,String>} titles\n//\n// @returns {Array.<module:image/imagestyle~ImageStyleOptionDefinition|module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>}\nfunction translateStyles( styles, titles ) {\n\tfor ( const style of styles ) {\n\t\t// Localize the titles of the styles, if a title corresponds with\n\t\t// a localized default provided by the plugin.\n\t\tif ( titles[ style.title ] ) {\n\t\t\tstyle.title = titles[ style.title ];\n\t\t}\n\t}\n\n\treturn styles;\n}\n\n// Returns the image style component name with the \"imageStyle:\" prefix.\n//\n// @param {String} name\n// @returns {String}\nfunction getUIComponentName( name ) {\n\treturn `imageStyle:${ name }`;\n}\n\n// Returns title for the splitbutton containing the dropdown title and default action item title.\n//\n// @param {String|undefined} dropdownTitle\n// @param {String} buttonTitle\n// @returns {String}\nfunction getDropdownButtonTitle( dropdownTitle, buttonTitle ) {\n\treturn ( dropdownTitle ? dropdownTitle + ': ' : '' ) + buttonTitle;\n}\n\n/**\n * # **The image style custom drop-down definition descriptor**\n *\n * This definition can be implemented in the {@link module:image/image~ImageConfig#toolbar image toolbar configuration}\n * to define a completely custom drop-down in the image toolbar.\n *\n *\t\tClassicEditor.create( editorElement, {\n *\t\t\timage: { toolbar: [\n *\t \t\t\t// One of the predefined drop-downs\n *\t \t\t\t'imageStyle:wrapText',\n *\t\t\t\t// Custom drop-down\n *\t\t\t\t{\n *\t\t\t\t\tname: 'imageStyle:customDropdown',\n *\t\t\t\t\ttitle: Custom drop-down title,\n *\t\t\t\t\titems: [ 'imageStyle:alignLeft', 'imageStyle:alignRight' ],\n *\t\t\t\t\tdefaultItem: 'imageStyle:alignLeft'\n *\t\t\t\t}\n *\t\t\t] }\n *\t\t} );\n *\n * **Note:** At the moment it is possible to populate the custom drop-down with only the buttons registered by the `ImageStyle` plugin.\n *\n * The defined drop-down will be registered\n * as the {@link module:ui/dropdown/dropdownview~DropdownView}\n * with the {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} under the provided name in the\n * {@link module:ui/componentfactory~ComponentFactory}\n *\n * @property {String} name The unique name of the drop-down. It is recommended to precede it with the \"imageStyle:\" prefix\n * to avoid collision with the components' names registered by other plugins.\n *\n * @property {String} [title] The drop-down's title. It will be used as the split button label along with the title of the default item\n * in the following manner: \"Custom drop-down title: Default item title\".\n *\n * Setting `title` to one of\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI#localizedDefaultStylesTitles}\n * will automatically translate it to the language of the editor.\n *\n * @property {Array.<String>} items The list of the names of the buttons that will be placed in the drop-down's toolbar.\n * Each of the buttons has to be one of the {@link module:image/image~ImageConfig#styles default image style buttons}\n * or to be defined as the {@link module:image/imagestyle~ImageStyleOptionDefinition image styling option}.\n *\n * @property {String} defaultItem The name of one of the buttons from the items list,\n * which will be used as a default button for the drop-down's split button.\n *\n * @typedef {Object} module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition\n */\n"]},"metadata":{},"sourceType":"module"}