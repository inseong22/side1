{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraphcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * The paragraph command.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ParagraphCommand extends Command {\n  /**\n   * The value of the command. Indicates whether the selection start is placed in a paragraph.\n   *\n   * @readonly\n   * @observable\n   * @member {Boolean} #value\n   */\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const document = model.document;\n    const block = first(document.selection.getSelectedBlocks());\n    this.value = !!block && block.is('element', 'paragraph');\n    this.isEnabled = !!block && checkCanBecomeParagraph(block, model.schema);\n  }\n  /**\n   * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n   * will be turned to paragraphs.\n   *\n   * @fires execute\n   * @param {Object} [options] Options for the executed command.\n   * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} [options.selection]\n   * The selection that the command should be applied to.\n   * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const document = model.document;\n    model.change(writer => {\n      const blocks = (options.selection || document.selection).getSelectedBlocks();\n\n      for (const block of blocks) {\n        if (!block.is('element', 'paragraph') && checkCanBecomeParagraph(block, model.schema)) {\n          writer.rename(block, 'paragraph');\n        }\n      }\n    });\n  }\n\n} // Checks whether the given block can be replaced by a paragraph.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\n\nfunction checkCanBecomeParagraph(block, schema) {\n  return schema.checkChild(block.parent, 'paragraph') && !schema.isObject(block);\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-paragraph/src/paragraphcommand.js"],"names":["Command","first","ParagraphCommand","refresh","model","editor","document","block","selection","getSelectedBlocks","value","is","isEnabled","checkCanBecomeParagraph","schema","execute","options","change","writer","blocks","rename","checkChild","parent","isObject"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,sCAApB;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BF,OAA/B,CAAuC;AACrD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACCG,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,QAAQ,GAAGF,KAAK,CAACE,QAAvB;AACA,UAAMC,KAAK,GAAGN,KAAK,CAAEK,QAAQ,CAACE,SAAT,CAAmBC,iBAAnB,EAAF,CAAnB;AAEA,SAAKC,KAAL,GAAa,CAAC,CAACH,KAAF,IAAWA,KAAK,CAACI,EAAN,CAAU,SAAV,EAAqB,WAArB,CAAxB;AACA,SAAKC,SAAL,GAAiB,CAAC,CAACL,KAAF,IAAWM,uBAAuB,CAAEN,KAAF,EAASH,KAAK,CAACU,MAAf,CAAnD;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,CAAEC,OAAO,GAAG,EAAZ,EAAiB;AACvB,UAAMZ,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,QAAQ,GAAGF,KAAK,CAACE,QAAvB;AAEAF,IAAAA,KAAK,CAACa,MAAN,CAAcC,MAAM,IAAI;AACvB,YAAMC,MAAM,GAAG,CAAEH,OAAO,CAACR,SAAR,IAAqBF,QAAQ,CAACE,SAAhC,EAA4CC,iBAA5C,EAAf;;AAEA,WAAM,MAAMF,KAAZ,IAAqBY,MAArB,EAA8B;AAC7B,YAAK,CAACZ,KAAK,CAACI,EAAN,CAAU,SAAV,EAAqB,WAArB,CAAD,IAAuCE,uBAAuB,CAAEN,KAAF,EAASH,KAAK,CAACU,MAAf,CAAnE,EAA6F;AAC5FI,UAAAA,MAAM,CAACE,MAAP,CAAeb,KAAf,EAAsB,WAAtB;AACA;AACD;AACD,KARD;AASA;;AA5CoD,C,CA+CtD;AACA;AACA;AACA;AACA;AACA;;AACA,SAASM,uBAAT,CAAkCN,KAAlC,EAAyCO,MAAzC,EAAkD;AACjD,SAAOA,MAAM,CAACO,UAAP,CAAmBd,KAAK,CAACe,MAAzB,EAAiC,WAAjC,KAAkD,CAACR,MAAM,CAACS,QAAP,CAAiBhB,KAAjB,CAA1D;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraphcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The paragraph command.\n *\n * @extends module:core/command~Command\n */\nexport default class ParagraphCommand extends Command {\n\t/**\n\t * The value of the command. Indicates whether the selection start is placed in a paragraph.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && block.is( 'element', 'paragraph' );\n\t\tthis.isEnabled = !!block && checkCanBecomeParagraph( block, model.schema );\n\t}\n\n\t/**\n\t * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n\t * will be turned to paragraphs.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} [options.selection]\n\t * The selection that the command should be applied to.\n\t * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = ( options.selection || document.selection ).getSelectedBlocks();\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( 'element', 'paragraph' ) && checkCanBecomeParagraph( block, model.schema ) ) {\n\t\t\t\t\twriter.rename( block, 'paragraph' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a paragraph.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeParagraph( block, schema ) {\n\treturn schema.checkChild( block.parent, 'paragraph' ) && !schema.isObject( block );\n}\n"]},"metadata":{},"sourceType":"module"}