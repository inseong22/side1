{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/indentcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n/**\n * The list indent command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class IndentCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {'forward'|'backward'} indentDirection The direction of indent. If it is equal to `backward`, the command\n   * will outdent a list item.\n   */\n  constructor(editor, indentDirection) {\n    super(editor);\n    /**\n     * Determines by how much the command will change the list item's indent attribute.\n     *\n     * @readonly\n     * @private\n     * @member {Number}\n     */\n\n    this._indentBy = indentDirection == 'forward' ? 1 : -1;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    this.isEnabled = this._checkEnabled();\n  }\n  /**\n   * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n   *\n   * @fires execute\n   * @fires _executeCleanup\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const doc = model.document;\n    let itemsToChange = Array.from(doc.selection.getSelectedBlocks());\n    model.change(writer => {\n      const lastItem = itemsToChange[itemsToChange.length - 1]; // Indenting a list item should also indent all the items that are already sub-items of indented item.\n\n      let next = lastItem.nextSibling; // Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\n      while (next && next.name == 'listItem' && next.getAttribute('listIndent') > lastItem.getAttribute('listIndent')) {\n        itemsToChange.push(next);\n        next = next.nextSibling;\n      } // We need to be sure to keep model in correct state after each small change, because converters\n      // bases on that state and assumes that model is correct.\n      // Because of that, if the command outdents items, we will outdent them starting from the last item, as\n      // it is safer.\n\n\n      if (this._indentBy < 0) {\n        itemsToChange = itemsToChange.reverse();\n      }\n\n      for (const item of itemsToChange) {\n        const indent = item.getAttribute('listIndent') + this._indentBy; // If indent is lower than 0, it means that the item got outdented when it was not indented.\n        // This means that we need to convert that list item to paragraph.\n\n\n        if (indent < 0) {\n          // To keep the model as correct as possible, first rename listItem, then remove attributes,\n          // as listItem without attributes is very incorrect and will cause problems in converters.\n          // No need to remove attributes, will be removed by post fixer.\n          writer.rename(item, 'paragraph');\n        } // If indent is >= 0, change the attribute value.\n        else {\n            writer.setAttribute('listIndent', indent, item);\n          }\n      }\n      /**\n       * Event fired by the {@link #execute} method.\n       *\n       * It allows to execute an action after executing the {@link ~IndentCommand#execute} method, for example adjusting\n       * attributes of changed list items.\n       *\n       * @protected\n       * @event _executeCleanup\n       */\n\n\n      this.fire('_executeCleanup', itemsToChange);\n    });\n  }\n  /**\n   * Checks whether the command can be enabled in the current context.\n   *\n   * @private\n   * @returns {Boolean} Whether the command should be enabled.\n   */\n\n\n  _checkEnabled() {\n    // Check whether any of position's ancestor is a list item.\n    const listItem = first(this.editor.model.document.selection.getSelectedBlocks()); // If selection is not in a list item, the command is disabled.\n\n    if (!listItem || !listItem.is('element', 'listItem')) {\n      return false;\n    }\n\n    if (this._indentBy > 0) {\n      // Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n      // To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n      const indent = listItem.getAttribute('listIndent');\n      const type = listItem.getAttribute('listType');\n      let prev = listItem.previousSibling;\n\n      while (prev && prev.is('element', 'listItem') && prev.getAttribute('listIndent') >= indent) {\n        if (prev.getAttribute('listIndent') == indent) {\n          // The item is on the same level.\n          // If it has same type, it means that we found a preceding sibling from the same list.\n          // If it does not have same type, it means that `listItem` is on different list (this can happen only\n          // on top level lists, though).\n          return prev.getAttribute('listType') == type;\n        }\n\n        prev = prev.previousSibling;\n      } // Could not find similar list item, this means that `listItem` is first in its list.\n\n\n      return false;\n    } // If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-list/src/indentcommand.js"],"names":["Command","first","IndentCommand","constructor","editor","indentDirection","_indentBy","refresh","isEnabled","_checkEnabled","execute","model","doc","document","itemsToChange","Array","from","selection","getSelectedBlocks","change","writer","lastItem","length","next","nextSibling","name","getAttribute","push","reverse","item","indent","rename","setAttribute","fire","listItem","is","type","prev","previousSibling"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/indentcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n\n/**\n * The list indent command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class IndentCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'forward'|'backward'} indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */\n\tconstructor( editor, indentDirection ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Determines by how much the command will change the list item's indent attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._indentBy = indentDirection == 'forward' ? 1 : -1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t * @fires _executeCleanup\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tlet itemsToChange = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tconst lastItem = itemsToChange[ itemsToChange.length - 1 ];\n\n\t\t\t// Indenting a list item should also indent all the items that are already sub-items of indented item.\n\t\t\tlet next = lastItem.nextSibling;\n\n\t\t\t// Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) > lastItem.getAttribute( 'listIndent' ) ) {\n\t\t\t\titemsToChange.push( next );\n\n\t\t\t\tnext = next.nextSibling;\n\t\t\t}\n\n\t\t\t// We need to be sure to keep model in correct state after each small change, because converters\n\t\t\t// bases on that state and assumes that model is correct.\n\t\t\t// Because of that, if the command outdents items, we will outdent them starting from the last item, as\n\t\t\t// it is safer.\n\t\t\tif ( this._indentBy < 0 ) {\n\t\t\t\titemsToChange = itemsToChange.reverse();\n\t\t\t}\n\n\t\t\tfor ( const item of itemsToChange ) {\n\t\t\t\tconst indent = item.getAttribute( 'listIndent' ) + this._indentBy;\n\n\t\t\t\t// If indent is lower than 0, it means that the item got outdented when it was not indented.\n\t\t\t\t// This means that we need to convert that list item to paragraph.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\t// To keep the model as correct as possible, first rename listItem, then remove attributes,\n\t\t\t\t\t// as listItem without attributes is very incorrect and will cause problems in converters.\n\t\t\t\t\t// No need to remove attributes, will be removed by post fixer.\n\t\t\t\t\twriter.rename( item, 'paragraph' );\n\t\t\t\t}\n\t\t\t\t// If indent is >= 0, change the attribute value.\n\t\t\t\telse {\n\t\t\t\t\twriter.setAttribute( 'listIndent', indent, item );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Event fired by the {@link #execute} method.\n\t\t\t *\n\t\t\t * It allows to execute an action after executing the {@link ~IndentCommand#execute} method, for example adjusting\n\t\t\t * attributes of changed list items.\n\t\t\t *\n\t\t\t * @protected\n\t\t\t * @event _executeCleanup\n\t\t\t */\n\t\t\tthis.fire( '_executeCleanup', itemsToChange );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !listItem || !listItem.is( 'element', 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this._indentBy > 0 ) {\n\t\t\t// Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n\t\t\t// To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n\t\t\tconst indent = listItem.getAttribute( 'listIndent' );\n\t\t\tconst type = listItem.getAttribute( 'listType' );\n\n\t\t\tlet prev = listItem.previousSibling;\n\n\t\t\twhile ( prev && prev.is( 'element', 'listItem' ) && prev.getAttribute( 'listIndent' ) >= indent ) {\n\t\t\t\tif ( prev.getAttribute( 'listIndent' ) == indent ) {\n\t\t\t\t\t// The item is on the same level.\n\t\t\t\t\t// If it has same type, it means that we found a preceding sibling from the same list.\n\t\t\t\t\t// If it does not have same type, it means that `listItem` is on different list (this can happen only\n\t\t\t\t\t// on top level lists, though).\n\t\t\t\t\treturn prev.getAttribute( 'listType' ) == type;\n\t\t\t\t}\n\n\t\t\t\tprev = prev.previousSibling;\n\t\t\t}\n\n\t\t\t// Could not find similar list item, this means that `listItem` is first in its list.\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\treturn true;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}