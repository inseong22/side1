{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/resizeimagecommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The resize image command. Currently, it only supports the width attribute.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ResizeImageCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const editor = this.editor;\n    const imageUtils = editor.plugins.get('ImageUtils');\n    const element = imageUtils.getClosestSelectedImageElement(editor.model.document.selection);\n    this.isEnabled = !!element;\n\n    if (!element || !element.hasAttribute('width')) {\n      this.value = null;\n    } else {\n      this.value = {\n        width: element.getAttribute('width'),\n        height: null\n      };\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   *\t\t// Sets the width to 50%:\n   *\t\teditor.execute( 'resizeImage', { width: '50%' } );\n   *\n   *\t\t// Removes the width attribute:\n   *\t\teditor.execute( 'resizeImage', { width: null } );\n   *\n   * @param {Object} options\n   * @param {String|null} options.width The new width of the image.\n   * @fires execute\n   */\n\n\n  execute(options) {\n    const editor = this.editor;\n    const model = editor.model;\n    const imageUtils = editor.plugins.get('ImageUtils');\n    const imageElement = imageUtils.getClosestSelectedImageElement(model.document.selection);\n    this.value = {\n      width: options.width,\n      height: null\n    };\n\n    if (imageElement) {\n      model.change(writer => {\n        writer.setAttribute('width', options.width, imageElement);\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imageresize/resizeimagecommand.js"],"names":["Command","ResizeImageCommand","refresh","editor","imageUtils","plugins","get","element","getClosestSelectedImageElement","model","document","selection","isEnabled","hasAttribute","value","width","getAttribute","height","execute","options","imageElement","change","writer","setAttribute"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCD,OAAjC,CAAyC;AACvD;AACD;AACA;AACCE,EAAAA,OAAO,GAAG;AACT,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoB,YAApB,CAAnB;AACA,UAAMC,OAAO,GAAGH,UAAU,CAACI,8BAAX,CAA2CL,MAAM,CAACM,KAAP,CAAaC,QAAb,CAAsBC,SAAjE,CAAhB;AAEA,SAAKC,SAAL,GAAiB,CAAC,CAACL,OAAnB;;AAEA,QAAK,CAACA,OAAD,IAAY,CAACA,OAAO,CAACM,YAAR,CAAsB,OAAtB,CAAlB,EAAoD;AACnD,WAAKC,KAAL,GAAa,IAAb;AACA,KAFD,MAEO;AACN,WAAKA,KAAL,GAAa;AACZC,QAAAA,KAAK,EAAER,OAAO,CAACS,YAAR,CAAsB,OAAtB,CADK;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAb;AAIA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,CAAEC,OAAF,EAAY;AAClB,UAAMhB,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMM,KAAK,GAAGN,MAAM,CAACM,KAArB;AACA,UAAML,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoB,YAApB,CAAnB;AACA,UAAMc,YAAY,GAAGhB,UAAU,CAACI,8BAAX,CAA2CC,KAAK,CAACC,QAAN,CAAeC,SAA1D,CAArB;AAEA,SAAKG,KAAL,GAAa;AACZC,MAAAA,KAAK,EAAEI,OAAO,CAACJ,KADH;AAEZE,MAAAA,MAAM,EAAE;AAFI,KAAb;;AAKA,QAAKG,YAAL,EAAoB;AACnBX,MAAAA,KAAK,CAACY,MAAN,CAAcC,MAAM,IAAI;AACvBA,QAAAA,MAAM,CAACC,YAAP,CAAqB,OAArB,EAA8BJ,OAAO,CAACJ,KAAtC,EAA6CK,YAA7C;AACA,OAFD;AAGA;AACD;;AAlDsD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/resizeimagecommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\n\n/**\n * The resize image command. Currently, it only supports the width attribute.\n *\n * @extends module:core/command~Command\n */\nexport default class ResizeImageCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\t\tconst element = imageUtils.getClosestSelectedImageElement( editor.model.document.selection );\n\n\t\tthis.isEnabled = !!element;\n\n\t\tif ( !element || !element.hasAttribute( 'width' ) ) {\n\t\t\tthis.value = null;\n\t\t} else {\n\t\t\tthis.value = {\n\t\t\t\twidth: element.getAttribute( 'width' ),\n\t\t\t\theight: null\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t *\t\t// Sets the width to 50%:\n\t *\t\teditor.execute( 'resizeImage', { width: '50%' } );\n\t *\n\t *\t\t// Removes the width attribute:\n\t *\t\teditor.execute( 'resizeImage', { width: null } );\n\t *\n\t * @param {Object} options\n\t * @param {String|null} options.width The new width of the image.\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst imageUtils = editor.plugins.get( 'ImageUtils' );\n\t\tconst imageElement = imageUtils.getClosestSelectedImageElement( model.document.selection );\n\n\t\tthis.value = {\n\t\t\twidth: options.width,\n\t\t\theight: null\n\t\t};\n\n\t\tif ( imageElement ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setAttribute( 'width', options.width, imageElement );\n\t\t\t} );\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}