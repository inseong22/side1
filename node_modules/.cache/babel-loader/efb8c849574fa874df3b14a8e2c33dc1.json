{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/utils\n */\nimport { icons } from 'ckeditor5/src/core';\nimport { logWarning } from 'ckeditor5/src/utils';\nconst {\n  objectFullWidth,\n  objectInline,\n  objectLeft,\n  objectRight,\n  objectCenter,\n  objectBlockLeft,\n  objectBlockRight\n} = icons;\n/**\n * Default image style options provided by the plugin that can be referred in the {@link module:image/image~ImageConfig#styles}\n * configuration.\n *\n * There are available 5 styles focused on formatting:\n *\n * * **`'alignLeft'`** aligns the inline or block image to the left and wraps it with the text using the `image-style-align-left` class,\n * * **`'alignRight'`** aligns the inline or block image to the right and wraps it with the text using the `image-style-align-right` class,\n * * **`'alignCenter'`** centers the block image using the `image-style-align-center` class,\n * * **`'alignBlockLeft'`** aligns the block image to the left using the `image-style-block-align-left` class,\n * * **`'alignBlockRight'`** aligns the block image to the right using the `image-style-block-align-right` class,\n *\n * and 3 semantic styles:\n *\n * * **`'inline'`** is an inline image without any CSS class,\n * * **`'block'`** is a block image without any CSS class,\n * * **`'side'`** is a block image styled with the `image-style-side` CSS class.\n *\n * @readonly\n * @type {Object.<String,module:image/imagestyle~ImageStyleOptionDefinition>}\n */\n\nconst DEFAULT_OPTIONS = {\n  // This style represents an image placed in the line of text.\n  inline: {\n    name: 'inline',\n    title: 'In line',\n    icon: objectInline,\n    modelElements: ['imageInline'],\n    isDefault: true\n  },\n  // This style represents an image aligned to the left and wrapped with text.\n  alignLeft: {\n    name: 'alignLeft',\n    title: 'Left aligned image',\n    icon: objectLeft,\n    modelElements: ['imageBlock', 'imageInline'],\n    className: 'image-style-align-left'\n  },\n  // This style represents an image aligned to the left.\n  alignBlockLeft: {\n    name: 'alignBlockLeft',\n    title: 'Left aligned image',\n    icon: objectBlockLeft,\n    modelElements: ['imageBlock'],\n    className: 'image-style-block-align-left'\n  },\n  // This style represents a centered image.\n  alignCenter: {\n    name: 'alignCenter',\n    title: 'Centered image',\n    icon: objectCenter,\n    modelElements: ['imageBlock'],\n    className: 'image-style-align-center'\n  },\n  // This style represents an image aligned to the right and wrapped with text.\n  alignRight: {\n    name: 'alignRight',\n    title: 'Right aligned image',\n    icon: objectRight,\n    modelElements: ['imageBlock', 'imageInline'],\n    className: 'image-style-align-right'\n  },\n  // This style represents an image aligned to the right.\n  alignBlockRight: {\n    name: 'alignBlockRight',\n    title: 'Right aligned image',\n    icon: objectBlockRight,\n    modelElements: ['imageBlock'],\n    className: 'image-style-block-align-right'\n  },\n  // This option is equal to the situation when no style is applied.\n  block: {\n    name: 'block',\n    title: 'Centered image',\n    icon: objectCenter,\n    modelElements: ['imageBlock'],\n    isDefault: true\n  },\n  // This represents a side image.\n  side: {\n    name: 'side',\n    title: 'Side image',\n    icon: objectRight,\n    modelElements: ['imageBlock'],\n    className: 'image-style-side'\n  }\n};\n/**\n * Default image style icons provided by the plugin that can be referred in the {@link module:image/image~ImageConfig#styles}\n * configuration.\n *\n * See {@link module:image/imagestyle~ImageStyleOptionDefinition#icon} to learn more.\n *\n * There are 7 default icons available: `'full'`, `'left'`, `'inlineLeft'`, `'center'`, `'right'`, `'inlineRight'`, and `'inline'`.\n *\n * @readonly\n * @type {Object.<String,String>}\n */\n\nconst DEFAULT_ICONS = {\n  full: objectFullWidth,\n  left: objectBlockLeft,\n  right: objectBlockRight,\n  center: objectCenter,\n  inlineLeft: objectLeft,\n  inlineRight: objectRight,\n  inline: objectInline\n};\n/**\n * Default drop-downs provided by the plugin that can be referred in the {@link module:image/image~ImageConfig#toolbar}\n * configuration. The drop-downs are containers for the {@link module:image/imagestyle~ImageStyleConfig#options image style options}.\n *\n * If both of the `ImageEditing` plugins are loaded, there are 2 predefined drop-downs available:\n *\n * * **`'imageStyle:wrapText'`**, which contains the `alignLeft` and `alignRight` options, that is,\n * those that wraps the text around the image,\n * * **`'imageStyle:breakText'`**, which contains the `alignBlockLeft`, `alignCenter` and `alignBlockRight` options, that is,\n * those that breaks the text around the image.\n *\n * @readonly\n * @type {Array.<module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>}\n */\n\nconst DEFAULT_DROPDOWN_DEFINITIONS = [{\n  name: 'imageStyle:wrapText',\n  title: 'Wrap text',\n  defaultItem: 'imageStyle:alignLeft',\n  items: ['imageStyle:alignLeft', 'imageStyle:alignRight']\n}, {\n  name: 'imageStyle:breakText',\n  title: 'Break text',\n  defaultItem: 'imageStyle:block',\n  items: ['imageStyle:alignBlockLeft', 'imageStyle:block', 'imageStyle:alignBlockRight']\n}];\n/**\n * Returns a list of the normalized and validated image style options.\n *\n * @protected\n * @param {Object} config\n * @param {Boolean} config.isInlinePluginLoaded\n * Determines whether the {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugin has been loaded.\n * @param {Boolean} config.isBlockPluginLoaded\n * Determines whether the {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugin has been loaded.\n * @param {module:image/imagestyle~ImageStyleConfig} config.configuredStyles\n * The image styles configuration provided in the image styles {@link module:image/image~ImageConfig#styles configuration}\n * as a default or custom value.\n * @returns {module:image/imagestyle~ImageStyleConfig}\n * * Each of options contains a complete icon markup.\n * * The image style options not supported by any of the loaded plugins are filtered out.\n */\n\nfunction normalizeStyles(config) {\n  const configuredStyles = config.configuredStyles.options || [];\n  const styles = configuredStyles.map(arrangement => normalizeDefinition(arrangement)).filter(arrangement => isValidOption(arrangement, config));\n  return styles;\n}\n/**\n * Returns the default image styles configuration depending on the loaded image editing plugins.\n * @protected\n *\n * @param {Boolean} isInlinePluginLoaded\n * Determines whether the {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugin has been loaded.\n *\n * @param {Boolean} isBlockPluginLoaded\n * Determines whether the {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugin has been loaded.\n *\n * @returns {Object<String,Array>}\n * It returns an object with the lists of the image style options and groups defined as strings related to the\n * {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default options}\n */\n\n\nfunction getDefaultStylesConfiguration(isBlockPluginLoaded, isInlinePluginLoaded) {\n  if (isBlockPluginLoaded && isInlinePluginLoaded) {\n    return {\n      options: ['inline', 'alignLeft', 'alignRight', 'alignCenter', 'alignBlockLeft', 'alignBlockRight', 'block', 'side']\n    };\n  } else if (isBlockPluginLoaded) {\n    return {\n      options: ['block', 'side']\n    };\n  } else if (isInlinePluginLoaded) {\n    return {\n      options: ['inline', 'alignLeft', 'alignRight']\n    };\n  }\n\n  return {};\n}\n/**\n * Returns a list of the available predefined drop-downs' definitions depending on the loaded image editing plugins.\n * @protected\n *\n * @param {module:core/plugincollection~PluginCollection} pluginCollection\n * @returns {Array.<module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>}\n */\n\n\nfunction getDefaultDropdownDefinitions(pluginCollection) {\n  if (pluginCollection.has('ImageBlockEditing') && pluginCollection.has('ImageInlineEditing')) {\n    return [...DEFAULT_DROPDOWN_DEFINITIONS];\n  } else {\n    return [];\n  }\n} // Normalizes an image style option or group provided in the {@link module:image/image~ImageConfig#styles}\n// and returns it in a {@link module:image/imagestyle~ImageStyleOptionDefinition}/\n//\n// @param {Object|String} definition\n//\n// @returns {module:image/imagestyle~ImageStyleOptionDefinition}}\n\n\nfunction normalizeDefinition(definition) {\n  if (typeof definition === 'string') {\n    // Just the name of the style has been passed, but none of the defaults.\n    if (!DEFAULT_OPTIONS[definition]) {\n      // Normalize the style anyway to prevent errors.\n      definition = {\n        name: definition\n      };\n    } // Just the name of the style has been passed and it's one of the defaults, just use it.\n    // Clone the style to avoid overriding defaults.\n    else {\n        definition = { ...DEFAULT_OPTIONS[definition]\n        };\n      }\n  } else {\n    // If an object style has been passed and if the name matches one of the defaults,\n    // extend it with defaults – the user wants to customize a default style.\n    // Note: Don't override the user–defined style object, clone it instead.\n    definition = extendStyle(DEFAULT_OPTIONS[definition.name], definition);\n  } // If an icon is defined as a string and correspond with a name\n  // in default icons, use the default icon provided by the plugin.\n\n\n  if (typeof definition.icon === 'string') {\n    definition.icon = DEFAULT_ICONS[definition.icon] || definition.icon;\n  }\n\n  return definition;\n} // Checks if the image style option is valid:\n// * if it has the modelElements fields defined and filled,\n// * if the defined modelElements are supported by any of the loaded image editing plugins.\n// It also displays a console warning these conditions are not met.\n//\n// @param {module:image/imagestyle~ImageStyleOptionDefinition} image style option\n// @param {Object.<String,Boolean>} { isBlockPluginLoaded, isInlinePluginLoaded }\n//\n// @returns Boolean\n\n\nfunction isValidOption(option, {\n  isBlockPluginLoaded,\n  isInlinePluginLoaded\n}) {\n  const {\n    modelElements,\n    name\n  } = option;\n\n  if (!modelElements || !modelElements.length || !name) {\n    warnInvalidStyle({\n      style: option\n    });\n    return false;\n  } else {\n    const supportedElements = [isBlockPluginLoaded ? 'imageBlock' : null, isInlinePluginLoaded ? 'imageInline' : null]; // Check if the option is supported by any of the loaded plugins.\n\n    if (!modelElements.some(elementName => supportedElements.includes(elementName))) {\n      /**\n       * In order to work correctly, each image style {@link module:image/imagestyle~ImageStyleOptionDefinition option}\n       * requires specific model elements (also: types of images) to be supported by the editor.\n       *\n       * Model element names to which the image style option can be applied are defined in the\n       * {@link module:image/imagestyle~ImageStyleOptionDefinition#modelElements} property of the style option\n       * definition.\n       *\n       * Explore the warning in the console to find out precisely which option is not supported and which editor plugins\n       * are missing. Make sure these plugins are loaded in your editor to get this image style option working.\n       *\n       * @error image-style-missing-dependency\n       * @param {String} [option] The name of the unsupported option.\n       * @param {String} [missingPlugins] The names of the plugins one of which has to be loaded for the particular option.\n       */\n      logWarning('image-style-missing-dependency', {\n        style: option,\n        missingPlugins: modelElements.map(name => name === 'imageBlock' ? 'ImageBlockEditing' : 'ImageInlineEditing')\n      });\n      return false;\n    }\n  }\n\n  return true;\n} // Extends the default style with a style provided by the developer.\n// Note: Don't override the custom–defined style object, clone it instead.\n//\n// @param {module:image/imagestyle~ImageStyleOptionDefinition} source\n// @param {Object} style\n//\n// @returns {module:image/imagestyle~ImageStyleOptionDefinition}\n\n\nfunction extendStyle(source, style) {\n  const extendedStyle = { ...style\n  };\n\n  for (const prop in source) {\n    if (!Object.prototype.hasOwnProperty.call(style, prop)) {\n      extendedStyle[prop] = source[prop];\n    }\n  }\n\n  return extendedStyle;\n} // Displays a console warning with the 'image-style-configuration-definition-invalid' error.\n// @param {Object} info\n\n\nfunction warnInvalidStyle(info) {\n  /**\n   * The image style definition provided in the configuration is invalid.\n   *\n   * Please make sure the definition implements properly one of the following:\n   *\n   * * {@link module:image/imagestyle~ImageStyleOptionDefinition image style option definition},\n   * * {@link module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition image style dropdown definition}\n   *\n   * @error image-style-configuration-definition-invalid\n   * @param {String} [dropdown] The name of the invalid drop-down\n   * @param {String} [style] The name of the invalid image style option\n   */\n  logWarning('image-style-configuration-definition-invalid', info);\n}\n\nexport default {\n  normalizeStyles,\n  getDefaultStylesConfiguration,\n  getDefaultDropdownDefinitions,\n  warnInvalidStyle,\n  DEFAULT_OPTIONS,\n  DEFAULT_ICONS,\n  DEFAULT_DROPDOWN_DEFINITIONS\n};","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imagestyle/utils.js"],"names":["icons","logWarning","objectFullWidth","objectInline","objectLeft","objectRight","objectCenter","objectBlockLeft","objectBlockRight","DEFAULT_OPTIONS","inline","name","title","icon","modelElements","isDefault","alignLeft","className","alignBlockLeft","alignCenter","alignRight","alignBlockRight","block","side","DEFAULT_ICONS","full","left","right","center","inlineLeft","inlineRight","DEFAULT_DROPDOWN_DEFINITIONS","defaultItem","items","normalizeStyles","config","configuredStyles","options","styles","map","arrangement","normalizeDefinition","filter","isValidOption","getDefaultStylesConfiguration","isBlockPluginLoaded","isInlinePluginLoaded","getDefaultDropdownDefinitions","pluginCollection","has","definition","extendStyle","option","length","warnInvalidStyle","style","supportedElements","some","elementName","includes","missingPlugins","source","extendedStyle","prop","Object","prototype","hasOwnProperty","call","info"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/utils\n */\n\nimport { icons } from 'ckeditor5/src/core';\nimport { logWarning } from 'ckeditor5/src/utils';\n\nconst {\n\tobjectFullWidth,\n\tobjectInline,\n\tobjectLeft,\tobjectRight, objectCenter,\n\tobjectBlockLeft, objectBlockRight\n} = icons;\n\n/**\n * Default image style options provided by the plugin that can be referred in the {@link module:image/image~ImageConfig#styles}\n * configuration.\n *\n * There are available 5 styles focused on formatting:\n *\n * * **`'alignLeft'`** aligns the inline or block image to the left and wraps it with the text using the `image-style-align-left` class,\n * * **`'alignRight'`** aligns the inline or block image to the right and wraps it with the text using the `image-style-align-right` class,\n * * **`'alignCenter'`** centers the block image using the `image-style-align-center` class,\n * * **`'alignBlockLeft'`** aligns the block image to the left using the `image-style-block-align-left` class,\n * * **`'alignBlockRight'`** aligns the block image to the right using the `image-style-block-align-right` class,\n *\n * and 3 semantic styles:\n *\n * * **`'inline'`** is an inline image without any CSS class,\n * * **`'block'`** is a block image without any CSS class,\n * * **`'side'`** is a block image styled with the `image-style-side` CSS class.\n *\n * @readonly\n * @type {Object.<String,module:image/imagestyle~ImageStyleOptionDefinition>}\n */\nconst DEFAULT_OPTIONS = {\n\t// This style represents an image placed in the line of text.\n\tinline: {\n\t\tname: 'inline',\n\t\ttitle: 'In line',\n\t\ticon: objectInline,\n\t\tmodelElements: [ 'imageInline' ],\n\t\tisDefault: true\n\t},\n\n\t// This style represents an image aligned to the left and wrapped with text.\n\talignLeft: {\n\t\tname: 'alignLeft',\n\t\ttitle: 'Left aligned image',\n\t\ticon: objectLeft,\n\t\tmodelElements: [ 'imageBlock', 'imageInline' ],\n\t\tclassName: 'image-style-align-left'\n\t},\n\n\t// This style represents an image aligned to the left.\n\talignBlockLeft: {\n\t\tname: 'alignBlockLeft',\n\t\ttitle: 'Left aligned image',\n\t\ticon: objectBlockLeft,\n\t\tmodelElements: [ 'imageBlock' ],\n\t\tclassName: 'image-style-block-align-left'\n\t},\n\n\t// This style represents a centered image.\n\talignCenter: {\n\t\tname: 'alignCenter',\n\t\ttitle: 'Centered image',\n\t\ticon: objectCenter,\n\t\tmodelElements: [ 'imageBlock' ],\n\t\tclassName: 'image-style-align-center'\n\t},\n\n\t// This style represents an image aligned to the right and wrapped with text.\n\talignRight: {\n\t\tname: 'alignRight',\n\t\ttitle: 'Right aligned image',\n\t\ticon: objectRight,\n\t\tmodelElements: [ 'imageBlock', 'imageInline' ],\n\t\tclassName: 'image-style-align-right'\n\t},\n\n\t// This style represents an image aligned to the right.\n\talignBlockRight: {\n\t\tname: 'alignBlockRight',\n\t\ttitle: 'Right aligned image',\n\t\ticon: objectBlockRight,\n\t\tmodelElements: [ 'imageBlock' ],\n\t\tclassName: 'image-style-block-align-right'\n\t},\n\n\t// This option is equal to the situation when no style is applied.\n\tblock: {\n\t\tname: 'block',\n\t\ttitle: 'Centered image',\n\t\ticon: objectCenter,\n\t\tmodelElements: [ 'imageBlock' ],\n\t\tisDefault: true\n\t},\n\n\t// This represents a side image.\n\tside: {\n\t\tname: 'side',\n\t\ttitle: 'Side image',\n\t\ticon: objectRight,\n\t\tmodelElements: [ 'imageBlock' ],\n\t\tclassName: 'image-style-side'\n\t}\n};\n\n/**\n * Default image style icons provided by the plugin that can be referred in the {@link module:image/image~ImageConfig#styles}\n * configuration.\n *\n * See {@link module:image/imagestyle~ImageStyleOptionDefinition#icon} to learn more.\n *\n * There are 7 default icons available: `'full'`, `'left'`, `'inlineLeft'`, `'center'`, `'right'`, `'inlineRight'`, and `'inline'`.\n *\n * @readonly\n * @type {Object.<String,String>}\n */\nconst DEFAULT_ICONS = {\n\tfull: objectFullWidth,\n\tleft: objectBlockLeft,\n\tright: objectBlockRight,\n\tcenter: objectCenter,\n\tinlineLeft: objectLeft,\n\tinlineRight: objectRight,\n\tinline: objectInline\n};\n\n/**\n * Default drop-downs provided by the plugin that can be referred in the {@link module:image/image~ImageConfig#toolbar}\n * configuration. The drop-downs are containers for the {@link module:image/imagestyle~ImageStyleConfig#options image style options}.\n *\n * If both of the `ImageEditing` plugins are loaded, there are 2 predefined drop-downs available:\n *\n * * **`'imageStyle:wrapText'`**, which contains the `alignLeft` and `alignRight` options, that is,\n * those that wraps the text around the image,\n * * **`'imageStyle:breakText'`**, which contains the `alignBlockLeft`, `alignCenter` and `alignBlockRight` options, that is,\n * those that breaks the text around the image.\n *\n * @readonly\n * @type {Array.<module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>}\n */\nconst DEFAULT_DROPDOWN_DEFINITIONS = [ {\n\tname: 'imageStyle:wrapText',\n\ttitle: 'Wrap text',\n\tdefaultItem: 'imageStyle:alignLeft',\n\titems: [ 'imageStyle:alignLeft', 'imageStyle:alignRight' ]\n}, {\n\tname: 'imageStyle:breakText',\n\ttitle: 'Break text',\n\tdefaultItem: 'imageStyle:block',\n\titems: [ 'imageStyle:alignBlockLeft', 'imageStyle:block', 'imageStyle:alignBlockRight' ]\n} ];\n\n/**\n * Returns a list of the normalized and validated image style options.\n *\n * @protected\n * @param {Object} config\n * @param {Boolean} config.isInlinePluginLoaded\n * Determines whether the {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugin has been loaded.\n * @param {Boolean} config.isBlockPluginLoaded\n * Determines whether the {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugin has been loaded.\n * @param {module:image/imagestyle~ImageStyleConfig} config.configuredStyles\n * The image styles configuration provided in the image styles {@link module:image/image~ImageConfig#styles configuration}\n * as a default or custom value.\n * @returns {module:image/imagestyle~ImageStyleConfig}\n * * Each of options contains a complete icon markup.\n * * The image style options not supported by any of the loaded plugins are filtered out.\n */\nfunction normalizeStyles( config ) {\n\tconst configuredStyles = config.configuredStyles.options || [];\n\n\tconst styles = configuredStyles\n\t\t.map( arrangement => normalizeDefinition( arrangement ) )\n\t\t.filter( arrangement => isValidOption( arrangement, config ) );\n\n\treturn styles;\n}\n\n/**\n * Returns the default image styles configuration depending on the loaded image editing plugins.\n * @protected\n *\n * @param {Boolean} isInlinePluginLoaded\n * Determines whether the {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugin has been loaded.\n *\n * @param {Boolean} isBlockPluginLoaded\n * Determines whether the {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`} plugin has been loaded.\n *\n * @returns {Object<String,Array>}\n * It returns an object with the lists of the image style options and groups defined as strings related to the\n * {@link module:image/imagestyle/utils~DEFAULT_OPTIONS default options}\n */\nfunction getDefaultStylesConfiguration( isBlockPluginLoaded, isInlinePluginLoaded ) {\n\tif ( isBlockPluginLoaded && isInlinePluginLoaded ) {\n\t\treturn {\n\t\t\toptions: [\n\t\t\t\t'inline', 'alignLeft', 'alignRight',\n\t\t\t\t'alignCenter', 'alignBlockLeft', 'alignBlockRight',\n\t\t\t\t'block', 'side'\n\t\t\t]\n\t\t};\n\t} else if ( isBlockPluginLoaded ) {\n\t\treturn {\n\t\t\toptions: [ 'block', 'side' ]\n\t\t};\n\t} else if ( isInlinePluginLoaded ) {\n\t\treturn {\n\t\t\toptions: [ 'inline', 'alignLeft', 'alignRight' ]\n\t\t};\n\t}\n\n\treturn {};\n}\n\n/**\n * Returns a list of the available predefined drop-downs' definitions depending on the loaded image editing plugins.\n * @protected\n *\n * @param {module:core/plugincollection~PluginCollection} pluginCollection\n * @returns {Array.<module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition>}\n */\nfunction getDefaultDropdownDefinitions( pluginCollection ) {\n\tif ( pluginCollection.has( 'ImageBlockEditing' ) && pluginCollection.has( 'ImageInlineEditing' ) ) {\n\t\treturn [ ...DEFAULT_DROPDOWN_DEFINITIONS ];\n\t} else {\n\t\treturn [];\n\t}\n}\n\n// Normalizes an image style option or group provided in the {@link module:image/image~ImageConfig#styles}\n// and returns it in a {@link module:image/imagestyle~ImageStyleOptionDefinition}/\n//\n// @param {Object|String} definition\n//\n// @returns {module:image/imagestyle~ImageStyleOptionDefinition}}\nfunction normalizeDefinition( definition ) {\n\tif ( typeof definition === 'string' ) {\n\t\t// Just the name of the style has been passed, but none of the defaults.\n\t\tif ( !DEFAULT_OPTIONS[ definition ] ) {\n\t\t\t// Normalize the style anyway to prevent errors.\n\t\t\tdefinition = { name: definition };\n\t\t}\n\t\t// Just the name of the style has been passed and it's one of the defaults, just use it.\n\t\t// Clone the style to avoid overriding defaults.\n\t\telse {\n\t\t\tdefinition = { ...DEFAULT_OPTIONS[ definition ] };\n\t\t}\n\t} else {\n\t\t// If an object style has been passed and if the name matches one of the defaults,\n\t\t// extend it with defaults – the user wants to customize a default style.\n\t\t// Note: Don't override the user–defined style object, clone it instead.\n\t\tdefinition = extendStyle( DEFAULT_OPTIONS[ definition.name ], definition );\n\t}\n\n\t// If an icon is defined as a string and correspond with a name\n\t// in default icons, use the default icon provided by the plugin.\n\tif ( typeof definition.icon === 'string' ) {\n\t\tdefinition.icon = DEFAULT_ICONS[ definition.icon ] || definition.icon;\n\t}\n\n\treturn definition;\n}\n\n// Checks if the image style option is valid:\n// * if it has the modelElements fields defined and filled,\n// * if the defined modelElements are supported by any of the loaded image editing plugins.\n// It also displays a console warning these conditions are not met.\n//\n// @param {module:image/imagestyle~ImageStyleOptionDefinition} image style option\n// @param {Object.<String,Boolean>} { isBlockPluginLoaded, isInlinePluginLoaded }\n//\n// @returns Boolean\nfunction isValidOption( option, { isBlockPluginLoaded, isInlinePluginLoaded } ) {\n\tconst { modelElements, name } = option;\n\n\tif ( !modelElements || !modelElements.length || !name ) {\n\t\twarnInvalidStyle( { style: option } );\n\n\t\treturn false;\n\t} else {\n\t\tconst supportedElements = [ isBlockPluginLoaded ? 'imageBlock' : null, isInlinePluginLoaded ? 'imageInline' : null ];\n\n\t\t// Check if the option is supported by any of the loaded plugins.\n\t\tif ( !modelElements.some( elementName => supportedElements.includes( elementName ) ) ) {\n\t\t\t/**\n\t\t\t * In order to work correctly, each image style {@link module:image/imagestyle~ImageStyleOptionDefinition option}\n\t\t\t * requires specific model elements (also: types of images) to be supported by the editor.\n\t\t\t *\n\t\t\t * Model element names to which the image style option can be applied are defined in the\n\t\t\t * {@link module:image/imagestyle~ImageStyleOptionDefinition#modelElements} property of the style option\n\t\t\t * definition.\n\t\t\t *\n\t\t\t * Explore the warning in the console to find out precisely which option is not supported and which editor plugins\n\t\t\t * are missing. Make sure these plugins are loaded in your editor to get this image style option working.\n\t\t\t *\n\t\t\t * @error image-style-missing-dependency\n\t\t\t * @param {String} [option] The name of the unsupported option.\n\t\t\t * @param {String} [missingPlugins] The names of the plugins one of which has to be loaded for the particular option.\n\t\t\t */\n\t\t\tlogWarning( 'image-style-missing-dependency', {\n\t\t\t\tstyle: option,\n\t\t\t\tmissingPlugins: modelElements.map( name => name === 'imageBlock' ? 'ImageBlockEditing' : 'ImageInlineEditing' )\n\t\t\t} );\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n// Extends the default style with a style provided by the developer.\n// Note: Don't override the custom–defined style object, clone it instead.\n//\n// @param {module:image/imagestyle~ImageStyleOptionDefinition} source\n// @param {Object} style\n//\n// @returns {module:image/imagestyle~ImageStyleOptionDefinition}\nfunction extendStyle( source, style ) {\n\tconst extendedStyle = { ...style };\n\n\tfor ( const prop in source ) {\n\t\tif ( !Object.prototype.hasOwnProperty.call( style, prop ) ) {\n\t\t\textendedStyle[ prop ] = source[ prop ];\n\t\t}\n\t}\n\n\treturn extendedStyle;\n}\n\n// Displays a console warning with the 'image-style-configuration-definition-invalid' error.\n// @param {Object} info\nfunction warnInvalidStyle( info ) {\n\t/**\n\t * The image style definition provided in the configuration is invalid.\n\t *\n\t * Please make sure the definition implements properly one of the following:\n\t *\n\t * * {@link module:image/imagestyle~ImageStyleOptionDefinition image style option definition},\n\t * * {@link module:image/imagestyle/imagestyleui~ImageStyleDropdownDefinition image style dropdown definition}\n\t *\n\t * @error image-style-configuration-definition-invalid\n\t * @param {String} [dropdown] The name of the invalid drop-down\n\t * @param {String} [style] The name of the invalid image style option\n\t */\n\tlogWarning( 'image-style-configuration-definition-invalid', info );\n}\n\nexport default {\n\tnormalizeStyles,\n\tgetDefaultStylesConfiguration,\n\tgetDefaultDropdownDefinitions,\n\twarnInvalidStyle,\n\tDEFAULT_OPTIONS,\n\tDEFAULT_ICONS,\n\tDEFAULT_DROPDOWN_DEFINITIONS\n};\n"]},"metadata":{},"sourceType":"module"}