{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/fontsizeediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { CKEditorError } from 'ckeditor5/src/utils';\nimport { isLength, isPercentage } from 'ckeditor5/src/engine';\nimport FontSizeCommand from './fontsizecommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_SIZE } from '../utils'; // Mapping of `<font size=\"..\">` styling to CSS's `font-size` values.\n\nconst styleFontSize = ['x-small', // Size \"0\" equal to \"1\".\n'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large', 'xxx-large'];\n/**\n * The font size editing feature.\n *\n * It introduces the {@link module:font/fontsize/fontsizecommand~FontSizeCommand command} and the `fontSize`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<span>` element with either:\n * * a style attribute (`<span style=\"font-size:12px\">...</span>`),\n * * or a class attribute (`<span class=\"text-small\">...</span>`)\n *\n * depending on the {@link module:font/fontsize~FontSizeConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontSizeEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FontSizeEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor); // Define default configuration using named presets.\n\n    editor.config.define(FONT_SIZE, {\n      options: ['tiny', 'small', 'default', 'big', 'huge'],\n      supportAllValues: false\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow fontSize attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: FONT_SIZE\n    });\n    editor.model.schema.setAttributeProperties(FONT_SIZE, {\n      isFormatting: true,\n      copyOnEnter: true\n    });\n    const supportAllValues = editor.config.get('fontSize.supportAllValues'); // Define view to model conversion.\n\n    const options = normalizeOptions(this.editor.config.get('fontSize.options')).filter(item => item.model);\n    const definition = buildDefinition(FONT_SIZE, options); // Set-up the two-way conversion.\n\n    if (supportAllValues) {\n      this._prepareAnyValueConverters(definition);\n\n      this._prepareCompatibilityConverter();\n    } else {\n      editor.conversion.attributeToElement(definition);\n    } // Add FontSize command.\n\n\n    editor.commands.add(FONT_SIZE, new FontSizeCommand(editor));\n  }\n  /**\n   * These converters enable keeping any value found as `style=\"font-size: *\"` as a value of an attribute on a text even\n   * if it is not defined in the plugin configuration.\n   *\n   * @param {Object} definition {@link module:engine/conversion/conversion~ConverterDefinition Converter definition} out of input data.\n   * @private\n   */\n\n\n  _prepareAnyValueConverters(definition) {\n    const editor = this.editor; // If `fontSize.supportAllValues=true`, we do not allow to use named presets in the plugin's configuration.\n\n    const presets = definition.model.values.filter(value => {\n      return !isLength(String(value)) && !isPercentage(String(value));\n    });\n\n    if (presets.length) {\n      /**\n       * If {@link module:font/fontsize~FontSizeConfig#supportAllValues `config.fontSize.supportAllValues`} is `true`,\n       * you need to use numerical values as font size options.\n       *\n       * See valid examples described in the {@link module:font/fontsize~FontSizeConfig#options plugin configuration}.\n       *\n       * @error font-size-invalid-use-of-named-presets\n       * @param {Array.<String>} presets Invalid values.\n       */\n      throw new CKEditorError('font-size-invalid-use-of-named-presets', null, {\n        presets\n      });\n    }\n\n    editor.conversion.for('downcast').attributeToElement({\n      model: FONT_SIZE,\n      view: (attributeValue, {\n        writer\n      }) => {\n        if (!attributeValue) {\n          return;\n        }\n\n        return writer.createAttributeElement('span', {\n          style: 'font-size:' + attributeValue\n        }, {\n          priority: 7\n        });\n      }\n    });\n    editor.conversion.for('upcast').elementToAttribute({\n      model: {\n        key: FONT_SIZE,\n        value: viewElement => viewElement.getStyle('font-size')\n      },\n      view: {\n        name: 'span',\n        styles: {\n          'font-size': /.*/\n        }\n      }\n    });\n  }\n  /**\n   * Adds support for legacy `<font size=\"..\">` formatting.\n   *\n   * @private\n   */\n\n\n  _prepareCompatibilityConverter() {\n    const editor = this.editor;\n    editor.conversion.for('upcast').elementToAttribute({\n      view: {\n        name: 'font',\n        attributes: {\n          // Documentation mentions sizes from 1 to 7. To handle old content we support all values\n          // up to 999 but clamp it to the valid range. Why 999? It should cover accidental values\n          // similar to percentage, e.g. 100%, 200% which could be the usual mistake for font size.\n          'size': /^[+-]?\\d{1,3}$/\n        }\n      },\n      model: {\n        key: FONT_SIZE,\n        value: viewElement => {\n          const value = viewElement.getAttribute('size');\n          const isRelative = value[0] === '-' || value[0] === '+';\n          let size = parseInt(value, 10);\n\n          if (isRelative) {\n            // Add relative size (which can be negative) to the default size = 3.\n            size = 3 + size;\n          }\n\n          const maxSize = styleFontSize.length - 1;\n          const clampedSize = Math.min(Math.max(size, 0), maxSize);\n          return styleFontSize[clampedSize];\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/fontsize/fontsizeediting.js"],"names":["Plugin","CKEditorError","isLength","isPercentage","FontSizeCommand","normalizeOptions","buildDefinition","FONT_SIZE","styleFontSize","FontSizeEditing","pluginName","constructor","editor","config","define","options","supportAllValues","init","model","schema","extend","allowAttributes","setAttributeProperties","isFormatting","copyOnEnter","get","filter","item","definition","_prepareAnyValueConverters","_prepareCompatibilityConverter","conversion","attributeToElement","commands","add","presets","values","value","String","length","for","view","attributeValue","writer","createAttributeElement","style","priority","elementToAttribute","key","viewElement","getStyle","name","styles","attributes","getAttribute","isRelative","size","parseInt","maxSize","clampedSize","Math","min","max"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,sBAAvC;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,UAA3C,C,CAEA;;AACA,MAAMC,aAAa,GAAG,CACrB,SADqB,EACV;AACX,SAFqB,EAGrB,OAHqB,EAIrB,QAJqB,EAKrB,OALqB,EAMrB,SANqB,EAOrB,UAPqB,EAQrB,WARqB,CAAtB;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,eAAN,SAA8BT,MAA9B,CAAqC;AACnD;AACD;AACA;AACsB,aAAVU,UAAU,GAAG;AACvB,WAAO,iBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP,EADqB,CAGrB;;AACAA,IAAAA,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAsBP,SAAtB,EAAiC;AAChCQ,MAAAA,OAAO,EAAE,CACR,MADQ,EAER,OAFQ,EAGR,SAHQ,EAIR,KAJQ,EAKR,MALQ,CADuB;AAQhCC,MAAAA,gBAAgB,EAAE;AARc,KAAjC;AAUA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAML,MAAM,GAAG,KAAKA,MAApB,CADM,CAGN;;AACAA,IAAAA,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoBC,MAApB,CAA4B,OAA5B,EAAqC;AAAEC,MAAAA,eAAe,EAAEd;AAAnB,KAArC;AACAK,IAAAA,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoBG,sBAApB,CAA4Cf,SAA5C,EAAuD;AACtDgB,MAAAA,YAAY,EAAE,IADwC;AAEtDC,MAAAA,WAAW,EAAE;AAFyC,KAAvD;AAKA,UAAMR,gBAAgB,GAAGJ,MAAM,CAACC,MAAP,CAAcY,GAAd,CAAmB,2BAAnB,CAAzB,CAVM,CAYN;;AACA,UAAMV,OAAO,GAAGV,gBAAgB,CAAE,KAAKO,MAAL,CAAYC,MAAZ,CAAmBY,GAAnB,CAAwB,kBAAxB,CAAF,CAAhB,CACdC,MADc,CACNC,IAAI,IAAIA,IAAI,CAACT,KADP,CAAhB;AAEA,UAAMU,UAAU,GAAGtB,eAAe,CAAEC,SAAF,EAAaQ,OAAb,CAAlC,CAfM,CAiBN;;AACA,QAAKC,gBAAL,EAAwB;AACvB,WAAKa,0BAAL,CAAiCD,UAAjC;;AACA,WAAKE,8BAAL;AACA,KAHD,MAGO;AACNlB,MAAAA,MAAM,CAACmB,UAAP,CAAkBC,kBAAlB,CAAsCJ,UAAtC;AACA,KAvBK,CAyBN;;;AACAhB,IAAAA,MAAM,CAACqB,QAAP,CAAgBC,GAAhB,CAAqB3B,SAArB,EAAgC,IAAIH,eAAJ,CAAqBQ,MAArB,CAAhC;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCiB,EAAAA,0BAA0B,CAAED,UAAF,EAAe;AACxC,UAAMhB,MAAM,GAAG,KAAKA,MAApB,CADwC,CAGxC;;AACA,UAAMuB,OAAO,GAAGP,UAAU,CAACV,KAAX,CAAiBkB,MAAjB,CAAwBV,MAAxB,CAAgCW,KAAK,IAAI;AACxD,aAAO,CAACnC,QAAQ,CAAEoC,MAAM,CAAED,KAAF,CAAR,CAAT,IAAgC,CAAClC,YAAY,CAAEmC,MAAM,CAAED,KAAF,CAAR,CAApD;AACA,KAFe,CAAhB;;AAIA,QAAKF,OAAO,CAACI,MAAb,EAAsB;AACrB;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,YAAM,IAAItC,aAAJ,CACL,wCADK,EAEL,IAFK,EAEC;AAAEkC,QAAAA;AAAF,OAFD,CAAN;AAIA;;AAEDvB,IAAAA,MAAM,CAACmB,UAAP,CAAkBS,GAAlB,CAAuB,UAAvB,EAAoCR,kBAApC,CAAwD;AACvDd,MAAAA,KAAK,EAAEX,SADgD;AAEvDkC,MAAAA,IAAI,EAAE,CAAEC,cAAF,EAAkB;AAAEC,QAAAA;AAAF,OAAlB,KAAkC;AACvC,YAAK,CAACD,cAAN,EAAuB;AACtB;AACA;;AAED,eAAOC,MAAM,CAACC,sBAAP,CAA+B,MAA/B,EAAuC;AAAEC,UAAAA,KAAK,EAAE,eAAeH;AAAxB,SAAvC,EAAiF;AAAEI,UAAAA,QAAQ,EAAE;AAAZ,SAAjF,CAAP;AACA;AARsD,KAAxD;AAWAlC,IAAAA,MAAM,CAACmB,UAAP,CAAkBS,GAAlB,CAAuB,QAAvB,EAAkCO,kBAAlC,CAAsD;AACrD7B,MAAAA,KAAK,EAAE;AACN8B,QAAAA,GAAG,EAAEzC,SADC;AAEN8B,QAAAA,KAAK,EAAEY,WAAW,IAAIA,WAAW,CAACC,QAAZ,CAAsB,WAAtB;AAFhB,OAD8C;AAKrDT,MAAAA,IAAI,EAAE;AACLU,QAAAA,IAAI,EAAE,MADD;AAELC,QAAAA,MAAM,EAAE;AACP,uBAAa;AADN;AAFH;AAL+C,KAAtD;AAYA;AAED;AACD;AACA;AACA;AACA;;;AACCtB,EAAAA,8BAA8B,GAAG;AAChC,UAAMlB,MAAM,GAAG,KAAKA,MAApB;AAEAA,IAAAA,MAAM,CAACmB,UAAP,CAAkBS,GAAlB,CAAuB,QAAvB,EAAkCO,kBAAlC,CAAsD;AACrDN,MAAAA,IAAI,EAAE;AACLU,QAAAA,IAAI,EAAE,MADD;AAELE,QAAAA,UAAU,EAAE;AACX;AACA;AACA;AACA,kBAAQ;AAJG;AAFP,OAD+C;AAUrDnC,MAAAA,KAAK,EAAE;AACN8B,QAAAA,GAAG,EAAEzC,SADC;AAEN8B,QAAAA,KAAK,EAAEY,WAAW,IAAI;AACrB,gBAAMZ,KAAK,GAAGY,WAAW,CAACK,YAAZ,CAA0B,MAA1B,CAAd;AACA,gBAAMC,UAAU,GAAGlB,KAAK,CAAE,CAAF,CAAL,KAAe,GAAf,IAAsBA,KAAK,CAAE,CAAF,CAAL,KAAe,GAAxD;AAEA,cAAImB,IAAI,GAAGC,QAAQ,CAAEpB,KAAF,EAAS,EAAT,CAAnB;;AAEA,cAAKkB,UAAL,EAAkB;AACjB;AACAC,YAAAA,IAAI,GAAG,IAAIA,IAAX;AACA;;AAED,gBAAME,OAAO,GAAGlD,aAAa,CAAC+B,MAAd,GAAuB,CAAvC;AACA,gBAAMoB,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAUD,IAAI,CAACE,GAAL,CAAUN,IAAV,EAAgB,CAAhB,CAAV,EAA+BE,OAA/B,CAApB;AAEA,iBAAOlD,aAAa,CAAEmD,WAAF,CAApB;AACA;AAjBK;AAV8C,KAAtD;AA8BA;;AAzJkD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/fontsizeediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { CKEditorError } from 'ckeditor5/src/utils';\nimport { isLength, isPercentage } from 'ckeditor5/src/engine';\n\nimport FontSizeCommand from './fontsizecommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_SIZE } from '../utils';\n\n// Mapping of `<font size=\"..\">` styling to CSS's `font-size` values.\nconst styleFontSize = [\n\t'x-small', // Size \"0\" equal to \"1\".\n\t'x-small',\n\t'small',\n\t'medium',\n\t'large',\n\t'x-large',\n\t'xx-large',\n\t'xxx-large'\n];\n\n/**\n * The font size editing feature.\n *\n * It introduces the {@link module:font/fontsize/fontsizecommand~FontSizeCommand command} and the `fontSize`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<span>` element with either:\n * * a style attribute (`<span style=\"font-size:12px\">...</span>`),\n * * or a class attribute (`<span class=\"text-small\">...</span>`)\n *\n * depending on the {@link module:font/fontsize~FontSizeConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FontSizeEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'FontSizeEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t// Define default configuration using named presets.\n\t\teditor.config.define( FONT_SIZE, {\n\t\t\toptions: [\n\t\t\t\t'tiny',\n\t\t\t\t'small',\n\t\t\t\t'default',\n\t\t\t\t'big',\n\t\t\t\t'huge'\n\t\t\t],\n\t\t\tsupportAllValues: false\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow fontSize attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: FONT_SIZE } );\n\t\teditor.model.schema.setAttributeProperties( FONT_SIZE, {\n\t\t\tisFormatting: true,\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\tconst supportAllValues = editor.config.get( 'fontSize.supportAllValues' );\n\n\t\t// Define view to model conversion.\n\t\tconst options = normalizeOptions( this.editor.config.get( 'fontSize.options' ) )\n\t\t\t.filter( item => item.model );\n\t\tconst definition = buildDefinition( FONT_SIZE, options );\n\n\t\t// Set-up the two-way conversion.\n\t\tif ( supportAllValues ) {\n\t\t\tthis._prepareAnyValueConverters( definition );\n\t\t\tthis._prepareCompatibilityConverter();\n\t\t} else {\n\t\t\teditor.conversion.attributeToElement( definition );\n\t\t}\n\n\t\t// Add FontSize command.\n\t\teditor.commands.add( FONT_SIZE, new FontSizeCommand( editor ) );\n\t}\n\n\t/**\n\t * These converters enable keeping any value found as `style=\"font-size: *\"` as a value of an attribute on a text even\n\t * if it is not defined in the plugin configuration.\n\t *\n\t * @param {Object} definition {@link module:engine/conversion/conversion~ConverterDefinition Converter definition} out of input data.\n\t * @private\n\t */\n\t_prepareAnyValueConverters( definition ) {\n\t\tconst editor = this.editor;\n\n\t\t// If `fontSize.supportAllValues=true`, we do not allow to use named presets in the plugin's configuration.\n\t\tconst presets = definition.model.values.filter( value => {\n\t\t\treturn !isLength( String( value ) ) && !isPercentage( String( value ) );\n\t\t} );\n\n\t\tif ( presets.length ) {\n\t\t\t/**\n\t\t\t * If {@link module:font/fontsize~FontSizeConfig#supportAllValues `config.fontSize.supportAllValues`} is `true`,\n\t\t\t * you need to use numerical values as font size options.\n\t\t\t *\n\t\t\t * See valid examples described in the {@link module:font/fontsize~FontSizeConfig#options plugin configuration}.\n\t\t\t *\n\t\t\t * @error font-size-invalid-use-of-named-presets\n\t\t\t * @param {Array.<String>} presets Invalid values.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'font-size-invalid-use-of-named-presets',\n\t\t\t\tnull, { presets }\n\t\t\t);\n\t\t}\n\n\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\t\tmodel: FONT_SIZE,\n\t\t\tview: ( attributeValue, { writer } ) => {\n\t\t\t\tif ( !attributeValue ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn writer.createAttributeElement( 'span', { style: 'font-size:' + attributeValue }, { priority: 7 } );\n\t\t\t}\n\t\t} );\n\n\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tkey: FONT_SIZE,\n\t\t\t\tvalue: viewElement => viewElement.getStyle( 'font-size' )\n\t\t\t},\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tstyles: {\n\t\t\t\t\t'font-size': /.*/\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Adds support for legacy `<font size=\"..\">` formatting.\n\t *\n\t * @private\n\t */\n\t_prepareCompatibilityConverter() {\n\t\tconst editor = this.editor;\n\n\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'font',\n\t\t\t\tattributes: {\n\t\t\t\t\t// Documentation mentions sizes from 1 to 7. To handle old content we support all values\n\t\t\t\t\t// up to 999 but clamp it to the valid range. Why 999? It should cover accidental values\n\t\t\t\t\t// similar to percentage, e.g. 100%, 200% which could be the usual mistake for font size.\n\t\t\t\t\t'size': /^[+-]?\\d{1,3}$/\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: FONT_SIZE,\n\t\t\t\tvalue: viewElement => {\n\t\t\t\t\tconst value = viewElement.getAttribute( 'size' );\n\t\t\t\t\tconst isRelative = value[ 0 ] === '-' || value[ 0 ] === '+';\n\n\t\t\t\t\tlet size = parseInt( value, 10 );\n\n\t\t\t\t\tif ( isRelative ) {\n\t\t\t\t\t\t// Add relative size (which can be negative) to the default size = 3.\n\t\t\t\t\t\tsize = 3 + size;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst maxSize = styleFontSize.length - 1;\n\t\t\t\t\tconst clampedSize = Math.min( Math.max( size, 0 ), maxSize );\n\n\t\t\t\t\treturn styleFontSize[ clampedSize ];\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}