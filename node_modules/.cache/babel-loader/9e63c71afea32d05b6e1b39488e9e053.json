{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/emittermixin\n */\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\nimport { extend } from 'lodash-es';\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\n *\t\tclass SomeView {}\n *\t\tmix( SomeView, DomEmitterMixin );\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\n\nconst DomEmitterMixin = extend({}, EmitterMixin, {\n  /**\n   * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\n   * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n   *\n   * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\n   * @param {String} event The name of the event.\n   * @param {Function} callback The function to be called on event.\n   * @param {Object} [options={}] Additional options.\n   * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n   * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n   * order they were added.\n   * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n   * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n   * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n   * and prevents blocking browser's main thread by this event handler.\n   */\n  listenTo(emitter, event, callback, options = {}) {\n    // Check if emitter is an instance of DOM Node. If so, use corresponding ProxyEmitter (or create one if not existing).\n    if (isNode(emitter) || isWindow(emitter)) {\n      const proxyOptions = {\n        capture: !!options.useCapture,\n        passive: !!options.usePassive\n      };\n      const proxyEmitter = this._getProxyEmitter(emitter, proxyOptions) || new ProxyEmitter(emitter, proxyOptions);\n      this.listenTo(proxyEmitter, event, callback, options);\n    } else {\n      // Execute parent class method with Emitter (or ProxyEmitter) instance.\n      EmitterMixin.listenTo.call(this, emitter, event, callback, options);\n    }\n  },\n\n  /**\n   * Stops listening for events. It can be used at different levels:\n   * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n   *\n   * * To stop listening to a specific callback.\n   * * To stop listening to a specific event.\n   * * To stop listening to all events fired by a specific object.\n   * * To stop listening to all events fired by all object.\n   *\n   * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n   * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n   * for all events from `emitter`.\n   * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n   * `event`.\n   */\n  stopListening(emitter, event, callback) {\n    // Check if the emitter is an instance of DOM Node. If so, forward the call to the corresponding ProxyEmitters.\n    if (isNode(emitter) || isWindow(emitter)) {\n      const proxyEmitters = this._getAllProxyEmitters(emitter);\n\n      for (const proxy of proxyEmitters) {\n        this.stopListening(proxy, event, callback);\n      }\n    } else {\n      // Execute parent class method with Emitter (or ProxyEmitter) instance.\n      EmitterMixin.stopListening.call(this, emitter, event, callback);\n    }\n  },\n\n  /**\n   * Retrieves ProxyEmitter instance for given DOM Node residing in this Host and given options.\n   *\n   * @private\n   * @param {Node} node DOM Node of the ProxyEmitter.\n   * @param {Object} [options] Additional options.\n   * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n   * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n   * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n   * and prevents blocking browser's main thread by this event handler.\n   * @returns {module:utils/dom/emittermixin~ProxyEmitter|null} ProxyEmitter instance bound to the DOM Node.\n   */\n  _getProxyEmitter(node, options) {\n    return _getEmitterListenedTo(this, getProxyEmitterId(node, options));\n  },\n\n  /**\n   * Retrieves all the ProxyEmitter instances for given DOM Node residing in this Host.\n   *\n   * @private\n   * @param {Node} node DOM Node of the ProxyEmitter.\n   * @returns {Array.<module:utils/dom/emittermixin~ProxyEmitter>}\n   */\n  _getAllProxyEmitters(node) {\n    return [{\n      capture: false,\n      passive: false\n    }, {\n      capture: false,\n      passive: true\n    }, {\n      capture: true,\n      passive: false\n    }, {\n      capture: true,\n      passive: true\n    }].map(options => this._getProxyEmitter(node, options)).filter(proxy => !!proxy);\n  }\n\n});\nexport default DomEmitterMixin;\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n * There is a separate instance for each combination of modes (useCapture & usePassive). The mode is concatenated with\n * UID stored in HTMLElement to give each instance unique identifier.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID+mode: {              |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID+mode   |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\n\nclass ProxyEmitter {\n  /**\n   * @param {Node} node DOM Node that fires events.\n   * @param {Object} [options] Additional options.\n   * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n   * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n   * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n   * and prevents blocking browser's main thread by this event handler.\n   */\n  constructor(node, options) {\n    // Set emitter ID to match DOM Node \"expando\" property.\n    _setEmitterId(this, getProxyEmitterId(node, options)); // Remember the DOM Node this ProxyEmitter is bound to.\n\n\n    this._domNode = node; // And given options.\n\n    this._options = options;\n  }\n\n}\n\nextend(ProxyEmitter.prototype, EmitterMixin, {\n  /**\n   * Collection of native DOM listeners.\n   *\n   * @private\n   * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\n   */\n\n  /**\n   * Registers a callback function to be executed when an event is fired.\n   *\n   * It attaches a native DOM listener to the DOM Node. When fired,\n   * a corresponding Emitter event will also fire with DOM Event object as an argument.\n   *\n   * **Note**: This is automatically called by the\n   * {@link module:utils/emittermixin~EmitterMixin#listenTo `EmitterMixin#listenTo()`}.\n   *\n   * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n   * @param {String} event The name of the event.\n   */\n  attach(event) {\n    // If the DOM Listener for given event already exist it is pointless\n    // to attach another one.\n    if (this._domListeners && this._domListeners[event]) {\n      return;\n    }\n\n    const domListener = this._createDomListener(event); // Attach the native DOM listener to DOM Node.\n\n\n    this._domNode.addEventListener(event, domListener, this._options);\n\n    if (!this._domListeners) {\n      this._domListeners = {};\n    } // Store the native DOM listener in this ProxyEmitter. It will be helpful\n    // when stopping listening to the event.\n\n\n    this._domListeners[event] = domListener;\n  },\n\n  /**\n   * Stops executing the callback on the given event.\n   *\n   * **Note**: This is automatically called by the\n   * {@link module:utils/emittermixin~EmitterMixin#stopListening `EmitterMixin#stopListening()`}.\n   *\n   * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n   * @param {String} event The name of the event.\n   */\n  detach(event) {\n    let events; // Remove native DOM listeners which are orphans. If no callbacks\n    // are awaiting given event, detach native DOM listener from DOM Node.\n    // See: {@link attach}.\n\n    if (this._domListeners[event] && (!(events = this._events[event]) || !events.callbacks.length)) {\n      this._domListeners[event].removeListener();\n    }\n  },\n\n  /**\n   * Adds callback to emitter for given event.\n   *\n   * @protected\n   * @method module:utils/dom/emittermixin~ProxyEmitter#_addEventListener\n   * @param {String} event The name of the event.\n   * @param {Function} callback The function to be called on event.\n   * @param {Object} [options={}] Additional options.\n   * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n   * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n   * order they were added.\n   */\n  _addEventListener(event, callback, options) {\n    this.attach(event);\n\n    EmitterMixin._addEventListener.call(this, event, callback, options);\n  },\n\n  /**\n   * Removes callback from emitter for given event.\n   *\n   * @protected\n   * @method module:utils/dom/emittermixin~ProxyEmitter#_removeEventListener\n   * @param {String} event The name of the event.\n   * @param {Function} callback The function to stop being called.\n   */\n  _removeEventListener(event, callback) {\n    EmitterMixin._removeEventListener.call(this, event, callback);\n\n    this.detach(event);\n  },\n\n  /**\n   * Creates a native DOM listener callback. When the native DOM event\n   * is fired it will fire corresponding event on this ProxyEmitter.\n   * Note: A native DOM Event is passed as an argument.\n   *\n   * @private\n   * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n   * @param {String} event The name of the event.\n   * @returns {Function} The DOM listener callback.\n   */\n  _createDomListener(event) {\n    const domListener = domEvt => {\n      this.fire(event, domEvt);\n    }; // Supply the DOM listener callback with a function that will help\n    // detach it from the DOM Node, when it is no longer necessary.\n    // See: {@link detach}.\n\n\n    domListener.removeListener = () => {\n      this._domNode.removeEventListener(event, domListener, this._options);\n\n      delete this._domListeners[event];\n    };\n\n    return domListener;\n  }\n\n}); // Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\n\nfunction getNodeUID(node) {\n  return node['data-ck-expando'] || (node['data-ck-expando'] = uid());\n} // Gets id of the ProxyEmitter for the given node.\n//\n// Combines DOM Node identifier and additional options.\n//\n// @private\n// @param {Node} node\n// @param {Object} options Additional options.\n// @returns {String} ProxyEmitter id.\n\n\nfunction getProxyEmitterId(node, options) {\n  let id = getNodeUID(node);\n\n  for (const option of Object.keys(options).sort()) {\n    if (options[option]) {\n      id += '-' + option;\n    }\n  }\n\n  return id;\n}\n/**\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\n *\n * @interface Emitter\n */","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"],"names":["default","EmitterMixin","_getEmitterListenedTo","_setEmitterId","uid","isNode","isWindow","extend","DomEmitterMixin","listenTo","emitter","event","callback","options","proxyOptions","capture","useCapture","passive","usePassive","proxyEmitter","_getProxyEmitter","ProxyEmitter","call","stopListening","proxyEmitters","_getAllProxyEmitters","proxy","node","getProxyEmitterId","map","filter","constructor","_domNode","_options","prototype","attach","_domListeners","domListener","_createDomListener","addEventListener","detach","events","_events","callbacks","length","removeListener","_addEventListener","_removeEventListener","domEvt","fire","removeEventListener","getNodeUID","id","option","Object","keys","sort"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAO,IAAIC,YAApB,EAAkCC,qBAAlC,EAAyDC,aAAzD,QAA8E,iBAA9E;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAGD,MAAM,CAAE,EAAF,EAAMN,YAAN,EAAoB;AACjD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCQ,EAAAA,QAAQ,CAAEC,OAAF,EAAWC,KAAX,EAAkBC,QAAlB,EAA4BC,OAAO,GAAG,EAAtC,EAA2C;AAClD;AACA,QAAKR,MAAM,CAAEK,OAAF,CAAN,IAAqBJ,QAAQ,CAAEI,OAAF,CAAlC,EAAgD;AAC/C,YAAMI,YAAY,GAAG;AACpBC,QAAAA,OAAO,EAAE,CAAC,CAACF,OAAO,CAACG,UADC;AAEpBC,QAAAA,OAAO,EAAE,CAAC,CAACJ,OAAO,CAACK;AAFC,OAArB;AAKA,YAAMC,YAAY,GAAG,KAAKC,gBAAL,CAAuBV,OAAvB,EAAgCI,YAAhC,KAAkD,IAAIO,YAAJ,CAAkBX,OAAlB,EAA2BI,YAA3B,CAAvE;AAEA,WAAKL,QAAL,CAAeU,YAAf,EAA6BR,KAA7B,EAAoCC,QAApC,EAA8CC,OAA9C;AACA,KATD,MASO;AACN;AACAZ,MAAAA,YAAY,CAACQ,QAAb,CAAsBa,IAAtB,CAA4B,IAA5B,EAAkCZ,OAAlC,EAA2CC,KAA3C,EAAkDC,QAAlD,EAA4DC,OAA5D;AACA;AACD,GAhCgD;;AAkCjD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCU,EAAAA,aAAa,CAAEb,OAAF,EAAWC,KAAX,EAAkBC,QAAlB,EAA6B;AACzC;AACA,QAAKP,MAAM,CAAEK,OAAF,CAAN,IAAqBJ,QAAQ,CAAEI,OAAF,CAAlC,EAAgD;AAC/C,YAAMc,aAAa,GAAG,KAAKC,oBAAL,CAA2Bf,OAA3B,CAAtB;;AAEA,WAAM,MAAMgB,KAAZ,IAAqBF,aAArB,EAAqC;AACpC,aAAKD,aAAL,CAAoBG,KAApB,EAA2Bf,KAA3B,EAAkCC,QAAlC;AACA;AACD,KAND,MAMO;AACN;AACAX,MAAAA,YAAY,CAACsB,aAAb,CAA2BD,IAA3B,CAAiC,IAAjC,EAAuCZ,OAAvC,EAAgDC,KAAhD,EAAuDC,QAAvD;AACA;AACD,GA7DgD;;AA+DjD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCQ,EAAAA,gBAAgB,CAAEO,IAAF,EAAQd,OAAR,EAAkB;AACjC,WAAOX,qBAAqB,CAAE,IAAF,EAAQ0B,iBAAiB,CAAED,IAAF,EAAQd,OAAR,CAAzB,CAA5B;AACA,GA7EgD;;AA+EjD;AACD;AACA;AACA;AACA;AACA;AACA;AACCY,EAAAA,oBAAoB,CAAEE,IAAF,EAAS;AAC5B,WAAO,CACN;AAAEZ,MAAAA,OAAO,EAAE,KAAX;AAAkBE,MAAAA,OAAO,EAAE;AAA3B,KADM,EAEN;AAAEF,MAAAA,OAAO,EAAE,KAAX;AAAkBE,MAAAA,OAAO,EAAE;AAA3B,KAFM,EAGN;AAAEF,MAAAA,OAAO,EAAE,IAAX;AAAiBE,MAAAA,OAAO,EAAE;AAA1B,KAHM,EAIN;AAAEF,MAAAA,OAAO,EAAE,IAAX;AAAiBE,MAAAA,OAAO,EAAE;AAA1B,KAJM,EAKLY,GALK,CAKAhB,OAAO,IAAI,KAAKO,gBAAL,CAAuBO,IAAvB,EAA6Bd,OAA7B,CALX,EAKoDiB,MALpD,CAK4DJ,KAAK,IAAI,CAAC,CAACA,KALvE,CAAP;AAMA;;AA7FgD,CAApB,CAA9B;AAgGA,eAAelB,eAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMa,YAAN,CAAmB;AAClB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCU,EAAAA,WAAW,CAAEJ,IAAF,EAAQd,OAAR,EAAkB;AAC5B;AACAV,IAAAA,aAAa,CAAE,IAAF,EAAQyB,iBAAiB,CAAED,IAAF,EAAQd,OAAR,CAAzB,CAAb,CAF4B,CAI5B;;;AACA,SAAKmB,QAAL,GAAgBL,IAAhB,CAL4B,CAO5B;;AACA,SAAKM,QAAL,GAAgBpB,OAAhB;AACA;;AAlBiB;;AAqBnBN,MAAM,CAAEc,YAAY,CAACa,SAAf,EAA0BjC,YAA1B,EAAwC;AAC7C;AACD;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCkC,EAAAA,MAAM,CAAExB,KAAF,EAAU;AACf;AACA;AACA,QAAK,KAAKyB,aAAL,IAAsB,KAAKA,aAAL,CAAoBzB,KAApB,CAA3B,EAAyD;AACxD;AACA;;AAED,UAAM0B,WAAW,GAAG,KAAKC,kBAAL,CAAyB3B,KAAzB,CAApB,CAPe,CASf;;;AACA,SAAKqB,QAAL,CAAcO,gBAAd,CAAgC5B,KAAhC,EAAuC0B,WAAvC,EAAoD,KAAKJ,QAAzD;;AAEA,QAAK,CAAC,KAAKG,aAAX,EAA2B;AAC1B,WAAKA,aAAL,GAAqB,EAArB;AACA,KAdc,CAgBf;AACA;;;AACA,SAAKA,aAAL,CAAoBzB,KAApB,IAA8B0B,WAA9B;AACA,GAvC4C;;AAyC7C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCG,EAAAA,MAAM,CAAE7B,KAAF,EAAU;AACf,QAAI8B,MAAJ,CADe,CAGf;AACA;AACA;;AAEA,QAAK,KAAKL,aAAL,CAAoBzB,KAApB,MAAiC,EAAG8B,MAAM,GAAG,KAAKC,OAAL,CAAc/B,KAAd,CAAZ,KAAuC,CAAC8B,MAAM,CAACE,SAAP,CAAiBC,MAA1F,CAAL,EAA0G;AACzG,WAAKR,aAAL,CAAoBzB,KAApB,EAA4BkC,cAA5B;AACA;AACD,GA5D4C;;AA8D7C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,iBAAiB,CAAEnC,KAAF,EAASC,QAAT,EAAmBC,OAAnB,EAA6B;AAC7C,SAAKsB,MAAL,CAAaxB,KAAb;;AACAV,IAAAA,YAAY,CAAC6C,iBAAb,CAA+BxB,IAA/B,CAAqC,IAArC,EAA2CX,KAA3C,EAAkDC,QAAlD,EAA4DC,OAA5D;AACA,GA7E4C;;AA+E7C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCkC,EAAAA,oBAAoB,CAAEpC,KAAF,EAASC,QAAT,EAAoB;AACvCX,IAAAA,YAAY,CAAC8C,oBAAb,CAAkCzB,IAAlC,CAAwC,IAAxC,EAA8CX,KAA9C,EAAqDC,QAArD;;AACA,SAAK4B,MAAL,CAAa7B,KAAb;AACA,GA1F4C;;AA4F7C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC2B,EAAAA,kBAAkB,CAAE3B,KAAF,EAAU;AAC3B,UAAM0B,WAAW,GAAGW,MAAM,IAAI;AAC7B,WAAKC,IAAL,CAAWtC,KAAX,EAAkBqC,MAAlB;AACA,KAFD,CAD2B,CAK3B;AACA;AACA;;;AACAX,IAAAA,WAAW,CAACQ,cAAZ,GAA6B,MAAM;AAClC,WAAKb,QAAL,CAAckB,mBAAd,CAAmCvC,KAAnC,EAA0C0B,WAA1C,EAAuD,KAAKJ,QAA5D;;AACA,aAAO,KAAKG,aAAL,CAAoBzB,KAApB,CAAP;AACA,KAHD;;AAKA,WAAO0B,WAAP;AACA;;AApH4C,CAAxC,CAAN,C,CAuHA;AACA;AACA;AACA;AACA;;AACA,SAASc,UAAT,CAAqBxB,IAArB,EAA4B;AAC3B,SAAOA,IAAI,CAAE,iBAAF,CAAJ,KAA+BA,IAAI,CAAE,iBAAF,CAAJ,GAA4BvB,GAAG,EAA9D,CAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwB,iBAAT,CAA4BD,IAA5B,EAAkCd,OAAlC,EAA4C;AAC3C,MAAIuC,EAAE,GAAGD,UAAU,CAAExB,IAAF,CAAnB;;AAEA,OAAM,MAAM0B,MAAZ,IAAsBC,MAAM,CAACC,IAAP,CAAa1C,OAAb,EAAuB2C,IAAvB,EAAtB,EAAsD;AACrD,QAAK3C,OAAO,CAAEwC,MAAF,CAAZ,EAAyB;AACxBD,MAAAA,EAAE,IAAI,MAAMC,MAAZ;AACA;AACD;;AAED,SAAOD,EAAP;AACA;AAED;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/emittermixin\n */\n\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\nimport { extend } from 'lodash-es';\n\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\n *\t\tclass SomeView {}\n *\t\tmix( SomeView, DomEmitterMixin );\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\nconst DomEmitterMixin = extend( {}, EmitterMixin, {\n\t/**\n\t * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n\t * order they were added.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n\t * and prevents blocking browser's main thread by this event handler.\n\t */\n\tlistenTo( emitter, event, callback, options = {} ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, use corresponding ProxyEmitter (or create one if not existing).\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxyOptions = {\n\t\t\t\tcapture: !!options.useCapture,\n\t\t\t\tpassive: !!options.usePassive\n\t\t\t};\n\n\t\t\tconst proxyEmitter = this._getProxyEmitter( emitter, proxyOptions ) || new ProxyEmitter( emitter, proxyOptions );\n\n\t\t\tthis.listenTo( proxyEmitter, event, callback, options );\n\t\t} else {\n\t\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\t\tEmitterMixin.listenTo.call( this, emitter, event, callback, options );\n\t\t}\n\t},\n\n\t/**\n\t * Stops listening for events. It can be used at different levels:\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * * To stop listening to a specific callback.\n\t * * To stop listening to a specific event.\n\t * * To stop listening to all events fired by a specific object.\n\t * * To stop listening to all events fired by all object.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n\t * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n\t * for all events from `emitter`.\n\t * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n\t * `event`.\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\t// Check if the emitter is an instance of DOM Node. If so, forward the call to the corresponding ProxyEmitters.\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxyEmitters = this._getAllProxyEmitters( emitter );\n\n\t\t\tfor ( const proxy of proxyEmitters ) {\n\t\t\t\tthis.stopListening( proxy, event, callback );\n\t\t\t}\n\t\t} else {\n\t\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\t\tEmitterMixin.stopListening.call( this, emitter, event, callback );\n\t\t}\n\t},\n\n\t/**\n\t * Retrieves ProxyEmitter instance for given DOM Node residing in this Host and given options.\n\t *\n\t * @private\n\t * @param {Node} node DOM Node of the ProxyEmitter.\n\t * @param {Object} [options] Additional options.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n\t * and prevents blocking browser's main thread by this event handler.\n\t * @returns {module:utils/dom/emittermixin~ProxyEmitter|null} ProxyEmitter instance bound to the DOM Node.\n\t */\n\t_getProxyEmitter( node, options ) {\n\t\treturn _getEmitterListenedTo( this, getProxyEmitterId( node, options ) );\n\t},\n\n\t/**\n\t * Retrieves all the ProxyEmitter instances for given DOM Node residing in this Host.\n\t *\n\t * @private\n\t * @param {Node} node DOM Node of the ProxyEmitter.\n\t * @returns {Array.<module:utils/dom/emittermixin~ProxyEmitter>}\n\t */\n\t_getAllProxyEmitters( node ) {\n\t\treturn [\n\t\t\t{ capture: false, passive: false },\n\t\t\t{ capture: false, passive: true },\n\t\t\t{ capture: true, passive: false },\n\t\t\t{ capture: true, passive: true }\n\t\t].map( options => this._getProxyEmitter( node, options ) ).filter( proxy => !!proxy );\n\t}\n} );\n\nexport default DomEmitterMixin;\n\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n * There is a separate instance for each combination of modes (useCapture & usePassive). The mode is concatenated with\n * UID stored in HTMLElement to give each instance unique identifier.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID+mode: {              |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID+mode   |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\nclass ProxyEmitter {\n\t/**\n\t * @param {Node} node DOM Node that fires events.\n\t * @param {Object} [options] Additional options.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t * @param {Boolean} [options.usePassive=false] Indicates that the function specified by listener will never call preventDefault()\n\t * and prevents blocking browser's main thread by this event handler.\n\t */\n\tconstructor( node, options ) {\n\t\t// Set emitter ID to match DOM Node \"expando\" property.\n\t\t_setEmitterId( this, getProxyEmitterId( node, options ) );\n\n\t\t// Remember the DOM Node this ProxyEmitter is bound to.\n\t\tthis._domNode = node;\n\n\t\t// And given options.\n\t\tthis._options = options;\n\t}\n}\n\nextend( ProxyEmitter.prototype, EmitterMixin, {\n\t/**\n\t * Collection of native DOM listeners.\n\t *\n\t * @private\n\t * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\n\t */\n\n\t/**\n\t * Registers a callback function to be executed when an event is fired.\n\t *\n\t * It attaches a native DOM listener to the DOM Node. When fired,\n\t * a corresponding Emitter event will also fire with DOM Event object as an argument.\n\t *\n\t * **Note**: This is automatically called by the\n\t * {@link module:utils/emittermixin~EmitterMixin#listenTo `EmitterMixin#listenTo()`}.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n\t * @param {String} event The name of the event.\n\t */\n\tattach( event ) {\n\t\t// If the DOM Listener for given event already exist it is pointless\n\t\t// to attach another one.\n\t\tif ( this._domListeners && this._domListeners[ event ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domListener = this._createDomListener( event );\n\n\t\t// Attach the native DOM listener to DOM Node.\n\t\tthis._domNode.addEventListener( event, domListener, this._options );\n\n\t\tif ( !this._domListeners ) {\n\t\t\tthis._domListeners = {};\n\t\t}\n\n\t\t// Store the native DOM listener in this ProxyEmitter. It will be helpful\n\t\t// when stopping listening to the event.\n\t\tthis._domListeners[ event ] = domListener;\n\t},\n\n\t/**\n\t * Stops executing the callback on the given event.\n\t *\n\t * **Note**: This is automatically called by the\n\t * {@link module:utils/emittermixin~EmitterMixin#stopListening `EmitterMixin#stopListening()`}.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n\t * @param {String} event The name of the event.\n\t */\n\tdetach( event ) {\n\t\tlet events;\n\n\t\t// Remove native DOM listeners which are orphans. If no callbacks\n\t\t// are awaiting given event, detach native DOM listener from DOM Node.\n\t\t// See: {@link attach}.\n\n\t\tif ( this._domListeners[ event ] && ( !( events = this._events[ event ] ) || !events.callbacks.length ) ) {\n\t\t\tthis._domListeners[ event ].removeListener();\n\t\t}\n\t},\n\n\t/**\n\t * Adds callback to emitter for given event.\n\t *\n\t * @protected\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#_addEventListener\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n\t * order they were added.\n\t */\n\t_addEventListener( event, callback, options ) {\n\t\tthis.attach( event );\n\t\tEmitterMixin._addEventListener.call( this, event, callback, options );\n\t},\n\n\t/**\n\t * Removes callback from emitter for given event.\n\t *\n\t * @protected\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#_removeEventListener\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to stop being called.\n\t */\n\t_removeEventListener( event, callback ) {\n\t\tEmitterMixin._removeEventListener.call( this, event, callback );\n\t\tthis.detach( event );\n\t},\n\n\t/**\n\t * Creates a native DOM listener callback. When the native DOM event\n\t * is fired it will fire corresponding event on this ProxyEmitter.\n\t * Note: A native DOM Event is passed as an argument.\n\t *\n\t * @private\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n\t * @param {String} event The name of the event.\n\t * @returns {Function} The DOM listener callback.\n\t */\n\t_createDomListener( event ) {\n\t\tconst domListener = domEvt => {\n\t\t\tthis.fire( event, domEvt );\n\t\t};\n\n\t\t// Supply the DOM listener callback with a function that will help\n\t\t// detach it from the DOM Node, when it is no longer necessary.\n\t\t// See: {@link detach}.\n\t\tdomListener.removeListener = () => {\n\t\t\tthis._domNode.removeEventListener( event, domListener, this._options );\n\t\t\tdelete this._domListeners[ event ];\n\t\t};\n\n\t\treturn domListener;\n\t}\n} );\n\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\nfunction getNodeUID( node ) {\n\treturn node[ 'data-ck-expando' ] || ( node[ 'data-ck-expando' ] = uid() );\n}\n\n// Gets id of the ProxyEmitter for the given node.\n//\n// Combines DOM Node identifier and additional options.\n//\n// @private\n// @param {Node} node\n// @param {Object} options Additional options.\n// @returns {String} ProxyEmitter id.\nfunction getProxyEmitterId( node, options ) {\n\tlet id = getNodeUID( node );\n\n\tfor ( const option of Object.keys( options ).sort() ) {\n\t\tif ( options[ option ] ) {\n\t\t\tid += '-' + option;\n\t\t}\n\t}\n\n\treturn id;\n}\n\n/**\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\n *\n * @interface Emitter\n */\n"]},"metadata":{},"sourceType":"module"}