{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { logWarning, toArray } from 'ckeditor5/src/utils';\n/**\n * @module image/image/insertimagecommand\n */\n\n/**\n * Insert image command.\n *\n * The command is registered by the {@link module:image/image/imageediting~ImageEditing} plugin as `insertImage`\n * and it is also available via aliased `imageInsert` name.\n *\n * In order to insert an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionRange} algorithm),\n * execute the command and specify the image source:\n *\n *\t\teditor.execute( 'insertImage', { source: 'http://url.to.the/image' } );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'insertImage', {\n *\t\t\tsource:  [\n *\t\t\t\t'path/to/image.jpg',\n *\t\t\t\t'path/to/other-image.jpg'\n *\t\t\t]\n *\t\t} );\n *\n * If you want to take the full control over the process, you can specify individual model attributes:\n *\n *\t\teditor.execute( 'insertImage', {\n *\t\t\tsource:  [\n *\t\t\t\t{ src: 'path/to/image.jpg', alt: 'First alt text' },\n *\t\t\t\t{ src: 'path/to/other-image.jpg', alt: 'Second alt text', customAttribute: 'My attribute value' }\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\n\nexport default class InsertImageCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    const configImageInsertType = editor.config.get('image.insert.type');\n\n    if (!editor.plugins.has('ImageBlockEditing')) {\n      if (configImageInsertType === 'block') {\n        /**\n         * The {@link module:image/imageblock~ImageBlock} plugin must be enabled to allow inserting block images. See\n         * {@link module:image/imageinsert~ImageInsertConfig#type} to learn more.\n         *\n         * @error image-block-plugin-required\n         */\n        logWarning('image-block-plugin-required');\n      }\n    }\n\n    if (!editor.plugins.has('ImageInlineEditing')) {\n      if (configImageInsertType === 'inline') {\n        /**\n         * The {@link module:image/imageinline~ImageInline} plugin must be enabled to allow inserting inline images. See\n         * {@link module:image/imageinsert~ImageInsertConfig#type} to learn more.\n         *\n         * @error image-inline-plugin-required\n         */\n        logWarning('image-inline-plugin-required');\n      }\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    this.isEnabled = this.editor.plugins.get('ImageUtils').isImageAllowed();\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} options Options for the executed command.\n   * @param {String|Array.<String>|Array.<Object>} options.source The image source or an array of image sources to insert.\n   * See the documentation of the command to learn more about accepted formats.\n   */\n\n\n  execute(options) {\n    const sourceDefinitions = toArray(options.source);\n    const selection = this.editor.model.document.selection;\n    const imageUtils = this.editor.plugins.get('ImageUtils'); // In case of multiple images, each image (starting from the 2nd) will be inserted at a position that\n    // follows the previous one. That will move the selection and, to stay on the safe side and make sure\n    // all images inherit the same selection attributes, they are collected beforehand.\n    //\n    // Applying these attributes ensures, for instance, that inserting an (inline) image into a link does\n    // not split that link but preserves its continuity.\n    //\n    // Note: Selection attributes that do not make sense for images will be filtered out by insertImage() anyway.\n\n    const selectionAttributes = Object.fromEntries(selection.getAttributes());\n    sourceDefinitions.forEach((sourceDefinition, index) => {\n      const selectedElement = selection.getSelectedElement();\n\n      if (typeof sourceDefinition === 'string') {\n        sourceDefinition = {\n          src: sourceDefinition\n        };\n      } // Inserting of an inline image replace the selected element and make a selection on the inserted image.\n      // Therefore inserting multiple inline images requires creating position after each element.\n\n\n      if (index && selectedElement && imageUtils.isImage(selectedElement)) {\n        const position = this.editor.model.createPositionAfter(selectedElement);\n        imageUtils.insertImage({ ...sourceDefinition,\n          ...selectionAttributes\n        }, position);\n      } else {\n        imageUtils.insertImage({ ...sourceDefinition,\n          ...selectionAttributes\n        });\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/image/insertimagecommand.js"],"names":["Command","logWarning","toArray","InsertImageCommand","constructor","editor","configImageInsertType","config","get","plugins","has","refresh","isEnabled","isImageAllowed","execute","options","sourceDefinitions","source","selection","model","document","imageUtils","selectionAttributes","Object","fromEntries","getAttributes","forEach","sourceDefinition","index","selectedElement","getSelectedElement","src","isImage","position","createPositionAfter","insertImage"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,qBAApC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCH,OAAjC,CAAyC;AACvD;AACD;AACA;AACCI,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA,UAAMC,qBAAqB,GAAGD,MAAM,CAACE,MAAP,CAAcC,GAAd,CAAmB,mBAAnB,CAA9B;;AAEA,QAAK,CAACH,MAAM,CAACI,OAAP,CAAeC,GAAf,CAAoB,mBAApB,CAAN,EAAkD;AACjD,UAAKJ,qBAAqB,KAAK,OAA/B,EAAyC;AACxC;AACJ;AACA;AACA;AACA;AACA;AACIL,QAAAA,UAAU,CAAE,6BAAF,CAAV;AACA;AACD;;AAED,QAAK,CAACI,MAAM,CAACI,OAAP,CAAeC,GAAf,CAAoB,oBAApB,CAAN,EAAmD;AAClD,UAAKJ,qBAAqB,KAAK,QAA/B,EAA0C;AACzC;AACJ;AACA;AACA;AACA;AACA;AACIL,QAAAA,UAAU,CAAE,8BAAF,CAAV;AACA;AACD;AACD;AAED;AACD;AACA;;;AACCU,EAAAA,OAAO,GAAG;AACT,SAAKC,SAAL,GAAiB,KAAKP,MAAL,CAAYI,OAAZ,CAAoBD,GAApB,CAAyB,YAAzB,EAAwCK,cAAxC,EAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,CAAEC,OAAF,EAAY;AAClB,UAAMC,iBAAiB,GAAGd,OAAO,CAAEa,OAAO,CAACE,MAAV,CAAjC;AACA,UAAMC,SAAS,GAAG,KAAKb,MAAL,CAAYc,KAAZ,CAAkBC,QAAlB,CAA2BF,SAA7C;AACA,UAAMG,UAAU,GAAG,KAAKhB,MAAL,CAAYI,OAAZ,CAAoBD,GAApB,CAAyB,YAAzB,CAAnB,CAHkB,CAKlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMc,mBAAmB,GAAGC,MAAM,CAACC,WAAP,CAAoBN,SAAS,CAACO,aAAV,EAApB,CAA5B;AAEAT,IAAAA,iBAAiB,CAACU,OAAlB,CAA2B,CAAEC,gBAAF,EAAoBC,KAApB,KAA+B;AACzD,YAAMC,eAAe,GAAGX,SAAS,CAACY,kBAAV,EAAxB;;AAEA,UAAK,OAAOH,gBAAP,KAA4B,QAAjC,EAA4C;AAC3CA,QAAAA,gBAAgB,GAAG;AAAEI,UAAAA,GAAG,EAAEJ;AAAP,SAAnB;AACA,OALwD,CAOzD;AACA;;;AACA,UAAKC,KAAK,IAAIC,eAAT,IAA4BR,UAAU,CAACW,OAAX,CAAoBH,eAApB,CAAjC,EAAyE;AACxE,cAAMI,QAAQ,GAAG,KAAK5B,MAAL,CAAYc,KAAZ,CAAkBe,mBAAlB,CAAuCL,eAAvC,CAAjB;AAEAR,QAAAA,UAAU,CAACc,WAAX,CAAwB,EAAE,GAAGR,gBAAL;AAAuB,aAAGL;AAA1B,SAAxB,EAAyEW,QAAzE;AACA,OAJD,MAIO;AACNZ,QAAAA,UAAU,CAACc,WAAX,CAAwB,EAAE,GAAGR,gBAAL;AAAuB,aAAGL;AAA1B,SAAxB;AACA;AACD,KAhBD;AAiBA;;AAjFsD","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { logWarning, toArray } from 'ckeditor5/src/utils';\n\n/**\n * @module image/image/insertimagecommand\n */\n\n/**\n * Insert image command.\n *\n * The command is registered by the {@link module:image/image/imageediting~ImageEditing} plugin as `insertImage`\n * and it is also available via aliased `imageInsert` name.\n *\n * In order to insert an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionRange} algorithm),\n * execute the command and specify the image source:\n *\n *\t\teditor.execute( 'insertImage', { source: 'http://url.to.the/image' } );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'insertImage', {\n *\t\t\tsource:  [\n *\t\t\t\t'path/to/image.jpg',\n *\t\t\t\t'path/to/other-image.jpg'\n *\t\t\t]\n *\t\t} );\n *\n * If you want to take the full control over the process, you can specify individual model attributes:\n *\n *\t\teditor.execute( 'insertImage', {\n *\t\t\tsource:  [\n *\t\t\t\t{ src: 'path/to/image.jpg', alt: 'First alt text' },\n *\t\t\t\t{ src: 'path/to/other-image.jpg', alt: 'Second alt text', customAttribute: 'My attribute value' }\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertImageCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\tconst configImageInsertType = editor.config.get( 'image.insert.type' );\n\n\t\tif ( !editor.plugins.has( 'ImageBlockEditing' ) ) {\n\t\t\tif ( configImageInsertType === 'block' ) {\n\t\t\t\t/**\n\t\t\t\t * The {@link module:image/imageblock~ImageBlock} plugin must be enabled to allow inserting block images. See\n\t\t\t\t * {@link module:image/imageinsert~ImageInsertConfig#type} to learn more.\n\t\t\t\t *\n\t\t\t\t * @error image-block-plugin-required\n\t\t\t\t */\n\t\t\t\tlogWarning( 'image-block-plugin-required' );\n\t\t\t}\n\t\t}\n\n\t\tif ( !editor.plugins.has( 'ImageInlineEditing' ) ) {\n\t\t\tif ( configImageInsertType === 'inline' ) {\n\t\t\t\t/**\n\t\t\t\t * The {@link module:image/imageinline~ImageInline} plugin must be enabled to allow inserting inline images. See\n\t\t\t\t * {@link module:image/imageinsert~ImageInsertConfig#type} to learn more.\n\t\t\t\t *\n\t\t\t\t * @error image-inline-plugin-required\n\t\t\t\t */\n\t\t\t\tlogWarning( 'image-inline-plugin-required' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this.editor.plugins.get( 'ImageUtils' ).isImageAllowed();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options Options for the executed command.\n\t * @param {String|Array.<String>|Array.<Object>} options.source The image source or an array of image sources to insert.\n\t * See the documentation of the command to learn more about accepted formats.\n\t */\n\texecute( options ) {\n\t\tconst sourceDefinitions = toArray( options.source );\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst imageUtils = this.editor.plugins.get( 'ImageUtils' );\n\n\t\t// In case of multiple images, each image (starting from the 2nd) will be inserted at a position that\n\t\t// follows the previous one. That will move the selection and, to stay on the safe side and make sure\n\t\t// all images inherit the same selection attributes, they are collected beforehand.\n\t\t//\n\t\t// Applying these attributes ensures, for instance, that inserting an (inline) image into a link does\n\t\t// not split that link but preserves its continuity.\n\t\t//\n\t\t// Note: Selection attributes that do not make sense for images will be filtered out by insertImage() anyway.\n\t\tconst selectionAttributes = Object.fromEntries( selection.getAttributes() );\n\n\t\tsourceDefinitions.forEach( ( sourceDefinition, index ) => {\n\t\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t\tif ( typeof sourceDefinition === 'string' ) {\n\t\t\t\tsourceDefinition = { src: sourceDefinition };\n\t\t\t}\n\n\t\t\t// Inserting of an inline image replace the selected element and make a selection on the inserted image.\n\t\t\t// Therefore inserting multiple inline images requires creating position after each element.\n\t\t\tif ( index && selectedElement && imageUtils.isImage( selectedElement ) ) {\n\t\t\t\tconst position = this.editor.model.createPositionAfter( selectedElement );\n\n\t\t\t\timageUtils.insertImage( { ...sourceDefinition, ...selectionAttributes }, position );\n\t\t\t} else {\n\t\t\t\timageUtils.insertImage( { ...sourceDefinition, ...selectionAttributes } );\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}