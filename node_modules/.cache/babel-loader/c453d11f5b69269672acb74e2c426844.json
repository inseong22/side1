{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/ui/linkformview\n */\nimport { ButtonView, FocusCycler, LabeledFieldView, SwitchButtonView, View, ViewCollection, createLabeledInputText, injectCssTransitionDisabler, submitHandler } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core'; // See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\n\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\nimport '../../theme/linkform.css';\n/**\n * The link form view controller class.\n *\n * See {@link module:link/ui/linkformview~LinkFormView}.\n *\n * @extends module:ui/view~View\n */\n\nexport default class LinkFormView extends View {\n  /**\n   * Creates an instance of the {@link module:link/ui/linkformview~LinkFormView} class.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {module:link/linkcommand~LinkCommand} linkCommand Reference to {@link module:link/linkcommand~LinkCommand}.\n   * @param {String} [protocol] A value of a protocol to be displayed in the input's placeholder.\n   */\n  constructor(locale, linkCommand) {\n    super(locale);\n    const t = locale.t;\n    /**\n     * Tracks information about DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * The URL input view.\n     *\n     * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n     */\n\n    this.urlInputView = this._createUrlInput();\n    /**\n     * The Save button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.saveButtonView = this._createButton(t('Save'), icons.check, 'ck-button-save');\n    this.saveButtonView.type = 'submit';\n    /**\n     * The Cancel button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.cancelButtonView = this._createButton(t('Cancel'), icons.cancel, 'ck-button-cancel', 'cancel');\n    /**\n     * A collection of {@link module:ui/button/switchbuttonview~SwitchButtonView},\n     * which corresponds to {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators}\n     * configured in the editor.\n     *\n     * @private\n     * @readonly\n     * @type {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._manualDecoratorSwitches = this._createManualDecoratorSwitches(linkCommand);\n    /**\n     * A collection of child views in the form.\n     *\n     * @readonly\n     * @type {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this._createFormChildren(linkCommand.manualDecorators);\n    /**\n     * A collection of views that can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._focusables = new ViewCollection();\n    /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this._focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate form fields backwards using the Shift + Tab keystroke.\n        focusPrevious: 'shift + tab',\n        // Navigate form fields forwards using the Tab key.\n        focusNext: 'tab'\n      }\n    });\n    const classList = ['ck', 'ck-link-form', 'ck-responsive-form'];\n\n    if (linkCommand.manualDecorators.length) {\n      classList.push('ck-link-form_layout-vertical', 'ck-vertical-form');\n    }\n\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: classList,\n        // https://github.com/ckeditor/ckeditor5-link/issues/90\n        tabindex: '-1'\n      },\n      children: this.children\n    });\n    injectCssTransitionDisabler(this);\n  }\n  /**\n   * Obtains the state of the {@link module:ui/button/switchbuttonview~SwitchButtonView switch buttons} representing\n   * {@link module:link/linkcommand~LinkCommand#manualDecorators manual link decorators}\n   * in the {@link module:link/ui/linkformview~LinkFormView}.\n   *\n   * @returns {Object.<String,Boolean>} Key-value pairs, where the key is the name of the decorator and the value is\n   * its state.\n   */\n\n\n  getDecoratorSwitchesState() {\n    return Array.from(this._manualDecoratorSwitches).reduce((accumulator, switchButton) => {\n      accumulator[switchButton.name] = switchButton.isOn;\n      return accumulator;\n    }, {});\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    submitHandler({\n      view: this\n    });\n    const childViews = [this.urlInputView, ...this._manualDecoratorSwitches, this.saveButtonView, this.cancelButtonView];\n    childViews.forEach(v => {\n      // Register the view as focusable.\n      this._focusables.add(v); // Register the view in the focus tracker.\n\n\n      this.focusTracker.add(v.element);\n    }); // Start listening for the keystrokes coming from #element.\n\n    this.keystrokes.listenTo(this.element);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n  }\n  /**\n   * Focuses the fist {@link #_focusables} in the form.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Creates a labeled input view.\n   *\n   * @private\n   * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} Labeled field view instance.\n   */\n\n\n  _createUrlInput() {\n    const t = this.locale.t;\n    const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n    labeledInput.label = t('Link URL');\n    return labeledInput;\n  }\n  /**\n   * Creates a button view.\n   *\n   * @private\n   * @param {String} label The button label.\n   * @param {String} icon The button icon.\n   * @param {String} className The additional button CSS class name.\n   * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n   * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n   */\n\n\n  _createButton(label, icon, className, eventName) {\n    const button = new ButtonView(this.locale);\n    button.set({\n      label,\n      icon,\n      tooltip: true\n    });\n    button.extendTemplate({\n      attributes: {\n        class: className\n      }\n    });\n\n    if (eventName) {\n      button.delegate('execute').to(this, eventName);\n    }\n\n    return button;\n  }\n  /**\n   * Populates {@link module:ui/viewcollection~ViewCollection} of {@link module:ui/button/switchbuttonview~SwitchButtonView}\n   * made based on {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n   *\n   * @private\n   * @param {module:link/linkcommand~LinkCommand} linkCommand A reference to the link command.\n   * @returns {module:ui/viewcollection~ViewCollection} of switch buttons.\n   */\n\n\n  _createManualDecoratorSwitches(linkCommand) {\n    const switches = this.createCollection();\n\n    for (const manualDecorator of linkCommand.manualDecorators) {\n      const switchButton = new SwitchButtonView(this.locale);\n      switchButton.set({\n        name: manualDecorator.id,\n        label: manualDecorator.label,\n        withText: true\n      });\n      switchButton.bind('isOn').toMany([manualDecorator, linkCommand], 'value', (decoratorValue, commandValue) => {\n        return commandValue === undefined && decoratorValue === undefined ? manualDecorator.defaultValue : decoratorValue;\n      });\n      switchButton.on('execute', () => {\n        manualDecorator.set('value', !switchButton.isOn);\n      });\n      switches.add(switchButton);\n    }\n\n    return switches;\n  }\n  /**\n   * Populates the {@link #children} collection of the form.\n   *\n   * If {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators} are configured in the editor, it creates an\n   * additional `View` wrapping all {@link #_manualDecoratorSwitches} switch buttons corresponding\n   * to these decorators.\n   *\n   * @private\n   * @param {module:utils/collection~Collection} manualDecorators A reference to\n   * the collection of manual decorators stored in the link command.\n   * @returns {module:ui/viewcollection~ViewCollection} The children of link form view.\n   */\n\n\n  _createFormChildren(manualDecorators) {\n    const children = this.createCollection();\n    children.add(this.urlInputView);\n\n    if (manualDecorators.length) {\n      const additionalButtonsView = new View();\n      additionalButtonsView.setTemplate({\n        tag: 'ul',\n        children: this._manualDecoratorSwitches.map(switchButton => ({\n          tag: 'li',\n          children: [switchButton],\n          attributes: {\n            class: ['ck', 'ck-list__item']\n          }\n        })),\n        attributes: {\n          class: ['ck', 'ck-reset', 'ck-list']\n        }\n      });\n      children.add(additionalButtonsView);\n    }\n\n    children.add(this.saveButtonView);\n    children.add(this.cancelButtonView);\n    return children;\n  }\n\n}\n/**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * for example with a click on {@link #saveButtonView}.\n *\n * @event submit\n */\n\n/**\n * Fired when the form view is canceled, for example with a click on {@link #cancelButtonView}.\n *\n * @event cancel\n */","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-link/src/ui/linkformview.js"],"names":["ButtonView","FocusCycler","LabeledFieldView","SwitchButtonView","View","ViewCollection","createLabeledInputText","injectCssTransitionDisabler","submitHandler","FocusTracker","KeystrokeHandler","icons","LinkFormView","constructor","locale","linkCommand","t","focusTracker","keystrokes","urlInputView","_createUrlInput","saveButtonView","_createButton","check","type","cancelButtonView","cancel","_manualDecoratorSwitches","_createManualDecoratorSwitches","children","_createFormChildren","manualDecorators","_focusables","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","classList","length","push","setTemplate","tag","attributes","class","tabindex","getDecoratorSwitchesState","Array","from","reduce","accumulator","switchButton","name","isOn","render","view","childViews","forEach","v","add","element","listenTo","destroy","focus","focusFirst","labeledInput","label","icon","className","eventName","button","set","tooltip","extendTemplate","delegate","to","switches","createCollection","manualDecorator","id","withText","bind","toMany","decoratorValue","commandValue","undefined","defaultValue","on","additionalButtonsView","map"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/ui/linkformview\n */\n\nimport {\n\tButtonView,\n\tFocusCycler,\n\tLabeledFieldView,\n\tSwitchButtonView,\n\tView,\n\tViewCollection,\n\tcreateLabeledInputText,\n\tinjectCssTransitionDisabler,\n\tsubmitHandler\n} from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\n\n// See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\nimport '../../theme/linkform.css';\n\n/**\n * The link form view controller class.\n *\n * See {@link module:link/ui/linkformview~LinkFormView}.\n *\n * @extends module:ui/view~View\n */\nexport default class LinkFormView extends View {\n\t/**\n\t * Creates an instance of the {@link module:link/ui/linkformview~LinkFormView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {module:link/linkcommand~LinkCommand} linkCommand Reference to {@link module:link/linkcommand~LinkCommand}.\n\t * @param {String} [protocol] A value of a protocol to be displayed in the input's placeholder.\n\t */\n\tconstructor( locale, linkCommand ) {\n\t\tsuper( locale );\n\n\t\tconst t = locale.t;\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * The URL input view.\n\t\t *\n\t\t * @member {module:ui/labeledfield/labeledfieldview~LabeledFieldView}\n\t\t */\n\t\tthis.urlInputView = this._createUrlInput();\n\n\t\t/**\n\t\t * The Save button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.saveButtonView = this._createButton( t( 'Save' ), icons.check, 'ck-button-save' );\n\t\tthis.saveButtonView.type = 'submit';\n\n\t\t/**\n\t\t * The Cancel button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n\t\tthis.cancelButtonView = this._createButton( t( 'Cancel' ), icons.cancel, 'ck-button-cancel', 'cancel' );\n\n\t\t/**\n\t\t * A collection of {@link module:ui/button/switchbuttonview~SwitchButtonView},\n\t\t * which corresponds to {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators}\n\t\t * configured in the editor.\n\t\t *\n\t\t * @private\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._manualDecoratorSwitches = this._createManualDecoratorSwitches( linkCommand );\n\n\t\t/**\n\t\t * A collection of child views in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this._createFormChildren( linkCommand.manualDecorators );\n\n\t\t/**\n\t\t * A collection of views that can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._focusables = new ViewCollection();\n\n\t\t/**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\tconst classList = [ 'ck', 'ck-link-form', 'ck-responsive-form' ];\n\n\t\tif ( linkCommand.manualDecorators.length ) {\n\t\t\tclassList.push( 'ck-link-form_layout-vertical', 'ck-vertical-form' );\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\n\t\t\tattributes: {\n\t\t\t\tclass: classList,\n\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/90\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\n\t\t\tchildren: this.children\n\t\t} );\n\n\t\tinjectCssTransitionDisabler( this );\n\t}\n\n\t/**\n\t * Obtains the state of the {@link module:ui/button/switchbuttonview~SwitchButtonView switch buttons} representing\n\t * {@link module:link/linkcommand~LinkCommand#manualDecorators manual link decorators}\n\t * in the {@link module:link/ui/linkformview~LinkFormView}.\n\t *\n\t * @returns {Object.<String,Boolean>} Key-value pairs, where the key is the name of the decorator and the value is\n\t * its state.\n\t */\n\tgetDecoratorSwitchesState() {\n\t\treturn Array.from( this._manualDecoratorSwitches ).reduce( ( accumulator, switchButton ) => {\n\t\t\taccumulator[ switchButton.name ] = switchButton.isOn;\n\t\t\treturn accumulator;\n\t\t}, {} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tsubmitHandler( {\n\t\t\tview: this\n\t\t} );\n\n\t\tconst childViews = [\n\t\t\tthis.urlInputView,\n\t\t\t...this._manualDecoratorSwitches,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t];\n\n\t\tchildViews.forEach( v => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( v );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( v.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Focuses the fist {@link #_focusables} in the form.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Creates a labeled input view.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledfield/labeledfieldview~LabeledFieldView} Labeled field view instance.\n\t */\n\t_createUrlInput() {\n\t\tconst t = this.locale.t;\n\t\tconst labeledInput = new LabeledFieldView( this.locale, createLabeledInputText );\n\n\t\tlabeledInput.label = t( 'Link URL' );\n\n\t\treturn labeledInput;\n\t}\n\n\t/**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button icon.\n\t * @param {String} className The additional button CSS class name.\n\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n\t_createButton( label, icon, className, eventName ) {\n\t\tconst button = new ButtonView( this.locale );\n\n\t\tbutton.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\tbutton.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: className\n\t\t\t}\n\t\t} );\n\n\t\tif ( eventName ) {\n\t\t\tbutton.delegate( 'execute' ).to( this, eventName );\n\t\t}\n\n\t\treturn button;\n\t}\n\n\t/**\n\t * Populates {@link module:ui/viewcollection~ViewCollection} of {@link module:ui/button/switchbuttonview~SwitchButtonView}\n\t * made based on {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n\t *\n\t * @private\n\t * @param {module:link/linkcommand~LinkCommand} linkCommand A reference to the link command.\n\t * @returns {module:ui/viewcollection~ViewCollection} of switch buttons.\n\t */\n\t_createManualDecoratorSwitches( linkCommand ) {\n\t\tconst switches = this.createCollection();\n\n\t\tfor ( const manualDecorator of linkCommand.manualDecorators ) {\n\t\t\tconst switchButton = new SwitchButtonView( this.locale );\n\n\t\t\tswitchButton.set( {\n\t\t\t\tname: manualDecorator.id,\n\t\t\t\tlabel: manualDecorator.label,\n\t\t\t\twithText: true\n\t\t\t} );\n\n\t\t\tswitchButton.bind( 'isOn' ).toMany( [ manualDecorator, linkCommand ], 'value', ( decoratorValue, commandValue ) => {\n\t\t\t\treturn commandValue === undefined && decoratorValue === undefined ? manualDecorator.defaultValue : decoratorValue;\n\t\t\t} );\n\n\t\t\tswitchButton.on( 'execute', () => {\n\t\t\t\tmanualDecorator.set( 'value', !switchButton.isOn );\n\t\t\t} );\n\n\t\t\tswitches.add( switchButton );\n\t\t}\n\n\t\treturn switches;\n\t}\n\n\t/**\n\t * Populates the {@link #children} collection of the form.\n\t *\n\t * If {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators} are configured in the editor, it creates an\n\t * additional `View` wrapping all {@link #_manualDecoratorSwitches} switch buttons corresponding\n\t * to these decorators.\n\t *\n\t * @private\n\t * @param {module:utils/collection~Collection} manualDecorators A reference to\n\t * the collection of manual decorators stored in the link command.\n\t * @returns {module:ui/viewcollection~ViewCollection} The children of link form view.\n\t */\n\t_createFormChildren( manualDecorators ) {\n\t\tconst children = this.createCollection();\n\n\t\tchildren.add( this.urlInputView );\n\n\t\tif ( manualDecorators.length ) {\n\t\t\tconst additionalButtonsView = new View();\n\n\t\t\tadditionalButtonsView.setTemplate( {\n\t\t\t\ttag: 'ul',\n\t\t\t\tchildren: this._manualDecoratorSwitches.map( switchButton => ( {\n\t\t\t\t\ttag: 'li',\n\t\t\t\t\tchildren: [ switchButton ],\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-list__item'\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t} ) ),\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: [\n\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t'ck-reset',\n\t\t\t\t\t\t'ck-list'\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t} );\n\t\t\tchildren.add( additionalButtonsView );\n\t\t}\n\n\t\tchildren.add( this.saveButtonView );\n\t\tchildren.add( this.cancelButtonView );\n\n\t\treturn children;\n\t}\n}\n\n/**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * for example with a click on {@link #saveButtonView}.\n *\n * @event submit\n */\n\n/**\n * Fired when the form view is canceled, for example with a click on {@link #cancelButtonView}.\n *\n * @event cancel\n */\n"]},"metadata":{},"sourceType":"module"}