{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { CKEditorError, logWarning } from 'ckeditor5/src/utils';\n/**\n * @module alignment/utils\n */\n\n/**\n * The list of supported alignment options:\n *\n * * `'left'`,\n * * `'right'`,\n * * `'center'`,\n * * `'justify'`\n */\n\nexport const supportedOptions = ['left', 'right', 'center', 'justify'];\n/**\n * Checks whether the passed option is supported by {@link module:alignment/alignmentediting~AlignmentEditing}.\n *\n * @param {String} option The option value to check.\n * @returns {Boolean}\n */\n\nexport function isSupported(option) {\n  return supportedOptions.includes(option);\n}\n/**\n * Checks whether alignment is the default one considering the direction\n * of the editor content.\n *\n * @param {String} alignment The name of the alignment to check.\n * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n * @returns {Boolean}\n */\n\nexport function isDefault(alignment, locale) {\n  // Right now only LTR is supported so the 'left' value is always the default one.\n  if (locale.contentLanguageDirection == 'rtl') {\n    return alignment === 'right';\n  } else {\n    return alignment === 'left';\n  }\n}\n/**\n * Brings the configuration to the common form, an array of objects.\n *\n * @param {Array.<String|module:alignment/alignmentediting~AlignmentFormat>} configuredOptions Alignment plugin configuration.\n * @returns {Array.<module:alignment/alignmentediting~AlignmentFormat>} Normalized object holding the configuration.\n */\n\nexport function normalizeAlignmentOptions(configuredOptions) {\n  const normalizedOptions = configuredOptions.map(option => {\n    let result;\n\n    if (typeof option == 'string') {\n      result = {\n        name: option\n      };\n    } else {\n      result = option;\n    }\n\n    return result;\n  }) // Remove all unknown options.\n  .filter(option => {\n    const isNameValid = !!supportedOptions.includes(option.name);\n\n    if (!isNameValid) {\n      /**\n       * The `name` in one of the `alignment.options` is not recognized.\n       * The available options are: `'left'`, `'right'`, `'center'` and `'justify'`.\n       *\n       * @error alignment-config-name-not-recognized\n       * @param {Object} option Options with unknown value of the `name` property.\n       */\n      logWarning('alignment-config-name-not-recognized', {\n        option\n      });\n    }\n\n    return isNameValid;\n  });\n  const classNameCount = normalizedOptions.filter(option => !!option.className).length; // We either use classes for all styling options or for none.\n\n  if (classNameCount && classNameCount < normalizedOptions.length) {\n    /**\n     * The `className` property has to be defined for all options once at least one option declares `className`.\n     *\n     * @error alignment-config-classnames-are-missing\n     * @param {Array.<String|module:alignment/alignmentediting~AlignmentFormat>} configuredOptions Contents of `alignment.options`.\n     */\n    throw new CKEditorError('alignment-config-classnames-are-missing', {\n      configuredOptions\n    });\n  } // Validate resulting config.\n\n\n  normalizedOptions.forEach((option, index, allOptions) => {\n    const succeedingOptions = allOptions.slice(index + 1);\n    const nameAlreadyExists = succeedingOptions.some(item => item.name == option.name);\n\n    if (nameAlreadyExists) {\n      /**\n       * The same `name` in one of the `alignment.options` was already declared.\n       * Each `name` representing one alignment option can be set exactly once.\n       *\n       * @error alignment-config-name-already-defined\n       * @param {Object} option First option that declares given `name`.\n       * @param {Array.<String|module:alignment/alignmentediting~AlignmentFormat>} configuredOptions Contents of `alignment.options`.\n       */\n      throw new CKEditorError('alignment-config-name-already-defined', {\n        option,\n        configuredOptions\n      });\n    } // The `className` property is present. Check for duplicates then.\n\n\n    if (option.className) {\n      const classNameAlreadyExists = succeedingOptions.some(item => item.className == option.className);\n\n      if (classNameAlreadyExists) {\n        /**\n         * The same `className` in one of the `alignment.options` was already declared.\n         *\n         * @error alignment-config-classname-already-defined\n         * @param {Object} option First option that declares given `className`.\n         * @param {Array.<String|module:alignment/alignmentediting~AlignmentFormat>} configuredOptions\n         * Contents of `alignment.options`.\n         */\n        throw new CKEditorError('alignment-config-classname-already-defined', {\n          option,\n          configuredOptions\n        });\n      }\n    }\n  });\n  return normalizedOptions;\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-alignment/src/utils.js"],"names":["CKEditorError","logWarning","supportedOptions","isSupported","option","includes","isDefault","alignment","locale","contentLanguageDirection","normalizeAlignmentOptions","configuredOptions","normalizedOptions","map","result","name","filter","isNameValid","classNameCount","className","length","forEach","index","allOptions","succeedingOptions","slice","nameAlreadyExists","some","item","classNameAlreadyExists"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport { CKEditorError, logWarning } from 'ckeditor5/src/utils';\n\n/**\n * @module alignment/utils\n */\n\n/**\n * The list of supported alignment options:\n *\n * * `'left'`,\n * * `'right'`,\n * * `'center'`,\n * * `'justify'`\n */\nexport const supportedOptions = [ 'left', 'right', 'center', 'justify' ];\n\n/**\n * Checks whether the passed option is supported by {@link module:alignment/alignmentediting~AlignmentEditing}.\n *\n * @param {String} option The option value to check.\n * @returns {Boolean}\n */\nexport function isSupported( option ) {\n\treturn supportedOptions.includes( option );\n}\n\n/**\n * Checks whether alignment is the default one considering the direction\n * of the editor content.\n *\n * @param {String} alignment The name of the alignment to check.\n * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n * @returns {Boolean}\n */\nexport function isDefault( alignment, locale ) {\n\t// Right now only LTR is supported so the 'left' value is always the default one.\n\n\tif ( locale.contentLanguageDirection == 'rtl' ) {\n\t\treturn alignment === 'right';\n\t} else {\n\t\treturn alignment === 'left';\n\t}\n}\n\n/**\n * Brings the configuration to the common form, an array of objects.\n *\n * @param {Array.<String|module:alignment/alignmentediting~AlignmentFormat>} configuredOptions Alignment plugin configuration.\n * @returns {Array.<module:alignment/alignmentediting~AlignmentFormat>} Normalized object holding the configuration.\n */\nexport function normalizeAlignmentOptions( configuredOptions ) {\n\tconst normalizedOptions = configuredOptions\n\t\t.map( option => {\n\t\t\tlet result;\n\n\t\t\tif ( typeof option == 'string' ) {\n\t\t\t\tresult = { name: option };\n\t\t\t} else {\n\t\t\t\tresult = option;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} )\n\t\t// Remove all unknown options.\n\t\t.filter( option => {\n\t\t\tconst isNameValid = !!supportedOptions.includes( option.name );\n\t\t\tif ( !isNameValid ) {\n\t\t\t\t/**\n\t\t\t\t * The `name` in one of the `alignment.options` is not recognized.\n\t\t\t\t * The available options are: `'left'`, `'right'`, `'center'` and `'justify'`.\n\t\t\t\t *\n\t\t\t\t * @error alignment-config-name-not-recognized\n\t\t\t\t * @param {Object} option Options with unknown value of the `name` property.\n\t\t\t\t */\n\t\t\t\tlogWarning( 'alignment-config-name-not-recognized', { option } );\n\t\t\t}\n\n\t\t\treturn isNameValid;\n\t\t} );\n\n\tconst classNameCount = normalizedOptions.filter( option => !!option.className ).length;\n\n\t// We either use classes for all styling options or for none.\n\tif ( classNameCount && classNameCount < normalizedOptions.length ) {\n\t\t/**\n\t\t * The `className` property has to be defined for all options once at least one option declares `className`.\n\t\t *\n\t\t * @error alignment-config-classnames-are-missing\n\t\t * @param {Array.<String|module:alignment/alignmentediting~AlignmentFormat>} configuredOptions Contents of `alignment.options`.\n\t\t */\n\t\tthrow new CKEditorError( 'alignment-config-classnames-are-missing', { configuredOptions } );\n\t}\n\n\t// Validate resulting config.\n\tnormalizedOptions.forEach( ( option, index, allOptions ) => {\n\t\tconst succeedingOptions = allOptions.slice( index + 1 );\n\t\tconst nameAlreadyExists = succeedingOptions.some( item => item.name == option.name );\n\n\t\tif ( nameAlreadyExists ) {\n\t\t\t/**\n\t\t\t * The same `name` in one of the `alignment.options` was already declared.\n\t\t\t * Each `name` representing one alignment option can be set exactly once.\n\t\t\t *\n\t\t\t * @error alignment-config-name-already-defined\n\t\t\t * @param {Object} option First option that declares given `name`.\n\t\t\t * @param {Array.<String|module:alignment/alignmentediting~AlignmentFormat>} configuredOptions Contents of `alignment.options`.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'alignment-config-name-already-defined', { option, configuredOptions } );\n\t\t}\n\n\t\t// The `className` property is present. Check for duplicates then.\n\t\tif ( option.className ) {\n\t\t\tconst classNameAlreadyExists = succeedingOptions.some( item => item.className == option.className );\n\n\t\t\tif ( classNameAlreadyExists ) {\n\t\t\t\t/**\n\t\t\t\t * The same `className` in one of the `alignment.options` was already declared.\n\t\t\t\t *\n\t\t\t\t * @error alignment-config-classname-already-defined\n\t\t\t\t * @param {Object} option First option that declares given `className`.\n\t\t\t\t * @param {Array.<String|module:alignment/alignmentediting~AlignmentFormat>} configuredOptions\n\t\t\t\t * Contents of `alignment.options`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'alignment-config-classname-already-defined', { option, configuredOptions } );\n\t\t\t}\n\t\t}\n\t} );\n\n\treturn normalizedOptions;\n}\n"]},"metadata":{},"sourceType":"module"}