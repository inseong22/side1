{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-inline/inlineeditoruiview\n */\nimport { BalloonPanelView, EditorUIView, InlineEditableUIView, ToolbarView } from 'ckeditor5/src/ui';\nimport { Rect, ResizeObserver, toUnit } from 'ckeditor5/src/utils';\nconst toPx = toUnit('px');\n/**\n * Inline editor UI view. Uses an nline editable and a floating toolbar.\n *\n * @extends module:ui/editorui/editoruiview~EditorUIView\n */\n\nexport default class InlineEditorUIView extends EditorUIView {\n  /**\n   * Creates an instance of the inline editor UI view.\n   *\n   * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n   * @param {module:engine/view/view~View} editingView The editing view instance this view is related to.\n   * @param {HTMLElement} [editableElement] The editable element. If not specified, it will be automatically created by\n   * {@link module:ui/editableui/editableuiview~EditableUIView}. Otherwise, the given element will be used.\n   * @param {Object} [options={}] Configuration options for the view instance.\n   * @param {Boolean} [options.shouldToolbarGroupWhenFull] When set `true` enables automatic items grouping\n   * in the main {@link module:editor-inline/inlineeditoruiview~InlineEditorUIView#toolbar toolbar}.\n   * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.\n   */\n  constructor(locale, editingView, editableElement, options = {}) {\n    super(locale);\n    /**\n     * A floating toolbar view instance.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarView}\n     */\n\n    this.toolbar = new ToolbarView(locale, {\n      shouldGroupWhenFull: options.shouldToolbarGroupWhenFull,\n      isFloating: true\n    });\n    /**\n     * The offset from the top edge of the web browser's viewport which makes the\n     * UI become sticky. The default value is `0`, which means that the UI becomes\n     * sticky when its upper edge touches the top of the page viewport.\n     *\n     * This attribute is useful when the web page has UI elements positioned to the top\n     * either using `position: fixed` or `position: sticky`, which would cover the\n     * UI or viceâ€“versa (depending on the `z-index` hierarchy).\n     *\n     * Bound to {@link module:core/editor/editorui~EditorUI#viewportOffset `EditorUI#viewportOffset`}.\n     *\n     * If {@link module:core/editor/editorconfig~EditorConfig#ui `EditorConfig#ui.viewportOffset.top`} is defined, then\n     * it will override the default value.\n     *\n     * @observable\n     * @default 0\n     * @member {Number} #viewportTopOffset\n     */\n\n    this.set('viewportTopOffset', 0);\n    /**\n     * A balloon panel view instance.\n     *\n     * @readonly\n     * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n     */\n\n    this.panel = new BalloonPanelView(locale);\n    /**\n     * A set of positioning functions used by the {@link #panel} to float around\n     * {@link #element editableElement}.\n     *\n     * The positioning functions are as follows:\n     *\n     * * West:\n     *\n     *\t\t[ Panel ]\n     *\t\t+------------------+\n     *\t\t| #editableElement |\n     *\t\t+------------------+\n     *\n     *\t\t+------------------+\n     *\t\t| #editableElement |\n     *\t\t|[ Panel ]         |\n     *\t\t|                  |\n     *\t\t+------------------+\n     *\n     *\t\t+------------------+\n     *\t\t| #editableElement |\n     *\t\t+------------------+\n     *\t\t[ Panel ]\n     *\n     * * East:\n     *\n     *\t\t           [ Panel ]\n     *\t\t+------------------+\n     *\t\t| #editableElement |\n     *\t\t+------------------+\n     *\n     *\t\t+------------------+\n     *\t\t| #editableElement |\n     *\t\t|         [ Panel ]|\n     *\t\t|                  |\n     *\t\t+------------------+\n     *\n     *\t\t+------------------+\n     *\t\t| #editableElement |\n     *\t\t+------------------+\n     *\t\t           [ Panel ]\n     *\n     * See: {@link module:utils/dom/position~Options#positions}.\n     *\n     * @readonly\n     * @type {Array.<module:utils/dom/position~positioningFunction>}\n     */\n\n    this.panelPositions = this._getPanelPositions();\n    this.panel.extendTemplate({\n      attributes: {\n        class: 'ck-toolbar-container'\n      }\n    });\n    /**\n     * Editable UI view.\n     *\n     * @readonly\n     * @member {module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}\n     */\n\n    this.editable = new InlineEditableUIView(locale, editingView, editableElement);\n    /**\n     * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n     * and manage items that do not fit into a single row.\n     *\n     * **Note:** Created in {@link #render}.\n     *\n     * @private\n     * @member {module:utils/dom/resizeobserver~ResizeObserver}\n     */\n\n    this._resizeObserver = null;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.body.add(this.panel);\n    this.registerChild(this.editable);\n    this.panel.content.add(this.toolbar);\n    const options = this.toolbar.options; // Set toolbar's max-width on the initialization and update it on the editable resize,\n    // if 'shouldToolbarGroupWhenFull' in config is set to 'true'.\n\n    if (options.shouldGroupWhenFull) {\n      const editableElement = this.editable.element;\n      this._resizeObserver = new ResizeObserver(editableElement, () => {\n        this.toolbar.maxWidth = toPx(new Rect(editableElement).width);\n      });\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    if (this._resizeObserver) {\n      this._resizeObserver.destroy();\n    }\n  }\n  /**\n   * Determines the panel top position of the {@link #panel} in {@link #panelPositions}.\n   *\n   * @private\n   * @param {module:utils/dom/rect~Rect} editableRect Rect of the {@link #element}.\n   * @param {module:utils/dom/rect~Rect} panelRect Rect of the {@link #panel}.\n   */\n\n\n  _getPanelPositionTop(editableRect, panelRect) {\n    let top;\n\n    if (editableRect.top > panelRect.height + this.viewportTopOffset) {\n      top = editableRect.top - panelRect.height;\n    } else if (editableRect.bottom > panelRect.height + this.viewportTopOffset + 50) {\n      top = this.viewportTopOffset;\n    } else {\n      top = editableRect.bottom;\n    }\n\n    return top;\n  }\n  /**\n   * Returns the positions for {@link #panelPositions}.\n   *\n   * See: {@link module:utils/dom/position~Options#positions}.\n   *\n   * @private\n   * @returns {Array.<module:utils/dom/position~positioningFunction>}\n   */\n\n\n  _getPanelPositions() {\n    const positions = [(editableRect, panelRect) => {\n      return {\n        top: this._getPanelPositionTop(editableRect, panelRect),\n        left: editableRect.left,\n        name: 'toolbar_west',\n        config: {\n          withArrow: false\n        }\n      };\n    }, (editableRect, panelRect) => {\n      return {\n        top: this._getPanelPositionTop(editableRect, panelRect),\n        left: editableRect.left + editableRect.width - panelRect.width,\n        name: 'toolbar_east',\n        config: {\n          withArrow: false\n        }\n      };\n    }];\n\n    if (this.locale.uiLanguageDirection === 'ltr') {\n      return positions;\n    } else {\n      return positions.reverse();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-editor-inline/src/inlineeditoruiview.js"],"names":["BalloonPanelView","EditorUIView","InlineEditableUIView","ToolbarView","Rect","ResizeObserver","toUnit","toPx","InlineEditorUIView","constructor","locale","editingView","editableElement","options","toolbar","shouldGroupWhenFull","shouldToolbarGroupWhenFull","isFloating","set","panel","panelPositions","_getPanelPositions","extendTemplate","attributes","class","editable","_resizeObserver","render","body","add","registerChild","content","element","maxWidth","width","destroy","_getPanelPositionTop","editableRect","panelRect","top","height","viewportTopOffset","bottom","positions","left","name","config","withArrow","uiLanguageDirection","reverse"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAASA,gBAAT,EAA2BC,YAA3B,EAAyCC,oBAAzC,EAA+DC,WAA/D,QAAkF,kBAAlF;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,MAA/B,QAA6C,qBAA7C;AAEA,MAAMC,IAAI,GAAGD,MAAM,CAAE,IAAF,CAAnB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAME,kBAAN,SAAiCP,YAAjC,CAA8C;AAC5D;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCQ,EAAAA,WAAW,CAAEC,MAAF,EAAUC,WAAV,EAAuBC,eAAvB,EAAwCC,OAAO,GAAG,EAAlD,EAAuD;AACjE,UAAOH,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKI,OAAL,GAAe,IAAIX,WAAJ,CAAiBO,MAAjB,EAAyB;AACvCK,MAAAA,mBAAmB,EAAEF,OAAO,CAACG,0BADU;AAEvCC,MAAAA,UAAU,EAAE;AAF2B,KAAzB,CAAf;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,GAAL,CAAU,mBAAV,EAA+B,CAA/B;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,KAAL,GAAa,IAAInB,gBAAJ,CAAsBU,MAAtB,CAAb;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKU,cAAL,GAAsB,KAAKC,kBAAL,EAAtB;AAEA,SAAKF,KAAL,CAAWG,cAAX,CAA2B;AAC1BC,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE;AADI;AADc,KAA3B;AAMA;AACF;AACA;AACA;AACA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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-inline/inlineeditoruiview\n */\nimport { BalloonPanelView, EditorUIView, InlineEditableUIView, ToolbarView } from 'ckeditor5/src/ui';\nimport { Rect, ResizeObserver, toUnit } from 'ckeditor5/src/utils';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * Inline editor UI view. Uses an nline editable and a floating toolbar.\n *\n * @extends module:ui/editorui/editoruiview~EditorUIView\n */\nexport default class InlineEditorUIView extends EditorUIView {\n\t/**\n\t * Creates an instance of the inline editor UI view.\n\t *\n\t * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param {module:engine/view/view~View} editingView The editing view instance this view is related to.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, it will be automatically created by\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}. Otherwise, the given element will be used.\n\t * @param {Object} [options={}] Configuration options for the view instance.\n\t * @param {Boolean} [options.shouldToolbarGroupWhenFull] When set `true` enables automatic items grouping\n\t * in the main {@link module:editor-inline/inlineeditoruiview~InlineEditorUIView#toolbar toolbar}.\n\t * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.\n\t */\n\tconstructor( locale, editingView, editableElement, options = {} ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * A floating toolbar view instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis.toolbar = new ToolbarView( locale, {\n\t\t\tshouldGroupWhenFull: options.shouldToolbarGroupWhenFull,\n\t\t\tisFloating: true\n\t\t} );\n\n\t\t/**\n\t\t * The offset from the top edge of the web browser's viewport which makes the\n\t\t * UI become sticky. The default value is `0`, which means that the UI becomes\n\t\t * sticky when its upper edge touches the top of the page viewport.\n\t\t *\n\t\t * This attribute is useful when the web page has UI elements positioned to the top\n\t\t * either using `position: fixed` or `position: sticky`, which would cover the\n\t\t * UI or viceâ€“versa (depending on the `z-index` hierarchy).\n\t\t *\n\t\t * Bound to {@link module:core/editor/editorui~EditorUI#viewportOffset `EditorUI#viewportOffset`}.\n\t\t *\n\t\t * If {@link module:core/editor/editorconfig~EditorConfig#ui `EditorConfig#ui.viewportOffset.top`} is defined, then\n\t\t * it will override the default value.\n\t\t *\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #viewportTopOffset\n\t\t */\n\t\tthis.set( 'viewportTopOffset', 0 );\n\n\t\t/**\n\t\t * A balloon panel view instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t\t */\n\t\tthis.panel = new BalloonPanelView( locale );\n\n\t\t/**\n\t\t * A set of positioning functions used by the {@link #panel} to float around\n\t\t * {@link #element editableElement}.\n\t\t *\n\t\t * The positioning functions are as follows:\n\t\t *\n\t\t * * West:\n\t\t *\n\t\t *\t\t[ Panel ]\n\t\t *\t\t+------------------+\n\t\t *\t\t| #editableElement |\n\t\t *\t\t+------------------+\n\t\t *\n\t\t *\t\t+------------------+\n\t\t *\t\t| #editableElement |\n\t\t *\t\t|[ Panel ]         |\n\t\t *\t\t|                  |\n\t\t *\t\t+------------------+\n\t\t *\n\t\t *\t\t+------------------+\n\t\t *\t\t| #editableElement |\n\t\t *\t\t+------------------+\n\t\t *\t\t[ Panel ]\n\t\t *\n\t\t * * East:\n\t\t *\n\t\t *\t\t           [ Panel ]\n\t\t *\t\t+------------------+\n\t\t *\t\t| #editableElement |\n\t\t *\t\t+------------------+\n\t\t *\n\t\t *\t\t+------------------+\n\t\t *\t\t| #editableElement |\n\t\t *\t\t|         [ Panel ]|\n\t\t *\t\t|                  |\n\t\t *\t\t+------------------+\n\t\t *\n\t\t *\t\t+------------------+\n\t\t *\t\t| #editableElement |\n\t\t *\t\t+------------------+\n\t\t *\t\t           [ Panel ]\n\t\t *\n\t\t * See: {@link module:utils/dom/position~Options#positions}.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Array.<module:utils/dom/position~positioningFunction>}\n\t\t */\n\t\tthis.panelPositions = this._getPanelPositions();\n\n\t\tthis.panel.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-toolbar-container'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Editable UI view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}\n\t\t */\n\t\tthis.editable = new InlineEditableUIView( locale, editingView, editableElement );\n\n\t\t/**\n\t\t * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n\t\t * and manage items that do not fit into a single row.\n\t\t *\n\t\t * **Note:** Created in {@link #render}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:utils/dom/resizeobserver~ResizeObserver}\n\t\t */\n\t\tthis._resizeObserver = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.body.add( this.panel );\n\t\tthis.registerChild( this.editable );\n\t\tthis.panel.content.add( this.toolbar );\n\n\t\tconst options = this.toolbar.options;\n\n\t\t// Set toolbar's max-width on the initialization and update it on the editable resize,\n\t\t// if 'shouldToolbarGroupWhenFull' in config is set to 'true'.\n\t\tif ( options.shouldGroupWhenFull ) {\n\t\t\tconst editableElement = this.editable.element;\n\n\t\t\tthis._resizeObserver = new ResizeObserver( editableElement, () => {\n\t\t\t\tthis.toolbar.maxWidth = toPx( new Rect( editableElement ).width );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tif ( this._resizeObserver ) {\n\t\t\tthis._resizeObserver.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Determines the panel top position of the {@link #panel} in {@link #panelPositions}.\n\t *\n\t * @private\n\t * @param {module:utils/dom/rect~Rect} editableRect Rect of the {@link #element}.\n\t * @param {module:utils/dom/rect~Rect} panelRect Rect of the {@link #panel}.\n\t */\n\t_getPanelPositionTop( editableRect, panelRect ) {\n\t\tlet top;\n\n\t\tif ( editableRect.top > panelRect.height + this.viewportTopOffset ) {\n\t\t\ttop = editableRect.top - panelRect.height;\n\t\t} else if ( editableRect.bottom > panelRect.height + this.viewportTopOffset + 50 ) {\n\t\t\ttop = this.viewportTopOffset;\n\t\t} else {\n\t\t\ttop = editableRect.bottom;\n\t\t}\n\n\t\treturn top;\n\t}\n\n\t/**\n\t * Returns the positions for {@link #panelPositions}.\n\t *\n\t * See: {@link module:utils/dom/position~Options#positions}.\n\t *\n\t * @private\n\t * @returns {Array.<module:utils/dom/position~positioningFunction>}\n\t */\n\t_getPanelPositions() {\n\t\tconst positions = [\n\t\t\t( editableRect, panelRect ) => {\n\t\t\t\treturn {\n\t\t\t\t\ttop: this._getPanelPositionTop( editableRect, panelRect ),\n\t\t\t\t\tleft: editableRect.left,\n\t\t\t\t\tname: 'toolbar_west',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\twithArrow: false\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\t( editableRect, panelRect ) => {\n\t\t\t\treturn {\n\t\t\t\t\ttop: this._getPanelPositionTop( editableRect, panelRect ),\n\t\t\t\t\tleft: editableRect.left + editableRect.width - panelRect.width,\n\t\t\t\t\tname: 'toolbar_east',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\twithArrow: false\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t];\n\n\t\tif ( this.locale.uiLanguageDirection === 'ltr' ) {\n\t\t\treturn positions;\n\t\t} else {\n\t\t\treturn positions.reverse();\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}