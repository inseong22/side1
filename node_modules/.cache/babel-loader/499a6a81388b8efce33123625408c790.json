{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ClickObserver } from 'ckeditor5/src/engine';\nimport { ButtonView, ContextualBalloon, clickOutsideHandler } from 'ckeditor5/src/ui';\nimport { isWidget } from 'ckeditor5/src/widget';\nimport LinkFormView from './ui/linkformview';\nimport LinkActionsView from './ui/linkactionsview';\nimport { addLinkProtocolIfApplicable, isLinkElement, LINK_KEYSTROKE } from './utils';\nimport linkIcon from '../theme/icons/link.svg';\nconst VISUAL_SELECTION_MARKER_NAME = 'link-ui';\n/**\n * The link UI plugin. It introduces the `'link'` and `'unlink'` buttons and support for the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class LinkUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ContextualBalloon];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'LinkUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    editor.editing.view.addObserver(ClickObserver);\n    /**\n     * The actions view displayed inside of the balloon.\n     *\n     * @member {module:link/ui/linkactionsview~LinkActionsView}\n     */\n\n    this.actionsView = this._createActionsView();\n    /**\n     * The form view displayed inside the balloon.\n     *\n     * @member {module:link/ui/linkformview~LinkFormView}\n     */\n\n    this.formView = this._createFormView();\n    /**\n     * The contextual balloon plugin instance.\n     *\n     * @private\n     * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n     */\n\n    this._balloon = editor.plugins.get(ContextualBalloon); // Create toolbar buttons.\n\n    this._createToolbarLinkButton(); // Attach lifecycle actions to the the balloon.\n\n\n    this._enableUserBalloonInteractions(); // Renders a fake visual selection marker on an expanded selection.\n\n\n    editor.conversion.for('editingDowncast').markerToHighlight({\n      model: VISUAL_SELECTION_MARKER_NAME,\n      view: {\n        classes: ['ck-fake-link-selection']\n      }\n    }); // Renders a fake visual selection marker on a collapsed selection.\n\n    editor.conversion.for('editingDowncast').markerToElement({\n      model: VISUAL_SELECTION_MARKER_NAME,\n      view: {\n        name: 'span',\n        classes: ['ck-fake-link-selection', 'ck-fake-link-selection_collapsed']\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy(); // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\n    this.formView.destroy();\n  }\n  /**\n   * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n   *\n   * @private\n   * @returns {module:link/ui/linkactionsview~LinkActionsView} The link actions view instance.\n   */\n\n\n  _createActionsView() {\n    const editor = this.editor;\n    const actionsView = new LinkActionsView(editor.locale);\n    const linkCommand = editor.commands.get('link');\n    const unlinkCommand = editor.commands.get('unlink');\n    actionsView.bind('href').to(linkCommand, 'value');\n    actionsView.editButtonView.bind('isEnabled').to(linkCommand);\n    actionsView.unlinkButtonView.bind('isEnabled').to(unlinkCommand); // Execute unlink command after clicking on the \"Edit\" button.\n\n    this.listenTo(actionsView, 'edit', () => {\n      this._addFormView();\n    }); // Execute unlink command after clicking on the \"Unlink\" button.\n\n    this.listenTo(actionsView, 'unlink', () => {\n      editor.execute('unlink');\n\n      this._hideUI();\n    }); // Close the panel on esc key press when the **actions have focus**.\n\n    actionsView.keystrokes.set('Esc', (data, cancel) => {\n      this._hideUI();\n\n      cancel();\n    }); // Open the form view on Ctrl+K when the **actions have focus**..\n\n    actionsView.keystrokes.set(LINK_KEYSTROKE, (data, cancel) => {\n      this._addFormView();\n\n      cancel();\n    });\n    return actionsView;\n  }\n  /**\n   * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n   *\n   * @private\n   * @returns {module:link/ui/linkformview~LinkFormView} The link form view instance.\n   */\n\n\n  _createFormView() {\n    const editor = this.editor;\n    const linkCommand = editor.commands.get('link');\n    const defaultProtocol = editor.config.get('link.defaultProtocol');\n    const formView = new LinkFormView(editor.locale, linkCommand);\n    formView.urlInputView.fieldView.bind('value').to(linkCommand, 'value'); // Form elements should be read-only when corresponding commands are disabled.\n\n    formView.urlInputView.bind('isReadOnly').to(linkCommand, 'isEnabled', value => !value);\n    formView.saveButtonView.bind('isEnabled').to(linkCommand); // Execute link command after clicking the \"Save\" button.\n\n    this.listenTo(formView, 'submit', () => {\n      const {\n        value\n      } = formView.urlInputView.fieldView.element;\n      const parsedUrl = addLinkProtocolIfApplicable(value, defaultProtocol);\n      editor.execute('link', parsedUrl, formView.getDecoratorSwitchesState());\n\n      this._closeFormView();\n    }); // Hide the panel after clicking the \"Cancel\" button.\n\n    this.listenTo(formView, 'cancel', () => {\n      this._closeFormView();\n    }); // Close the panel on esc key press when the **form has focus**.\n\n    formView.keystrokes.set('Esc', (data, cancel) => {\n      this._closeFormView();\n\n      cancel();\n    });\n    return formView;\n  }\n  /**\n   * Creates a toolbar Link button. Clicking this button will show\n   * a {@link #_balloon} attached to the selection.\n   *\n   * @private\n   */\n\n\n  _createToolbarLinkButton() {\n    const editor = this.editor;\n    const linkCommand = editor.commands.get('link');\n    const t = editor.t; // Handle the `Ctrl+K` keystroke and show the panel.\n\n    editor.keystrokes.set(LINK_KEYSTROKE, (keyEvtData, cancel) => {\n      // Prevent focusing the search bar in FF, Chrome and Edge. See https://github.com/ckeditor/ckeditor5/issues/4811.\n      cancel();\n\n      if (linkCommand.isEnabled) {\n        this._showUI(true);\n      }\n    });\n    editor.ui.componentFactory.add('link', locale => {\n      const button = new ButtonView(locale);\n      button.isEnabled = true;\n      button.label = t('Link');\n      button.icon = linkIcon;\n      button.keystroke = LINK_KEYSTROKE;\n      button.tooltip = true;\n      button.isToggleable = true; // Bind button to the command.\n\n      button.bind('isEnabled').to(linkCommand, 'isEnabled');\n      button.bind('isOn').to(linkCommand, 'value', value => !!value); // Show the panel on button click.\n\n      this.listenTo(button, 'execute', () => this._showUI(true));\n      return button;\n    });\n  }\n  /**\n   * Attaches actions that control whether the balloon panel containing the\n   * {@link #formView} is visible or not.\n   *\n   * @private\n   */\n\n\n  _enableUserBalloonInteractions() {\n    const viewDocument = this.editor.editing.view.document; // Handle click on view document and show panel when selection is placed inside the link element.\n    // Keep panel open until selection will be inside the same link element.\n\n    this.listenTo(viewDocument, 'click', () => {\n      const parentLink = this._getSelectedLinkElement();\n\n      if (parentLink) {\n        // Then show panel but keep focus inside editor editable.\n        this._showUI();\n      }\n    }); // Focus the form if the balloon is visible and the Tab key has been pressed.\n\n    this.editor.keystrokes.set('Tab', (data, cancel) => {\n      if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {\n        this.actionsView.focus();\n        cancel();\n      }\n    }, {\n      // Use the high priority because the link UI navigation is more important\n      // than other feature's actions, e.g. list indentation.\n      // https://github.com/ckeditor/ckeditor5-link/issues/146\n      priority: 'high'\n    }); // Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n\n    this.editor.keystrokes.set('Esc', (data, cancel) => {\n      if (this._isUIVisible) {\n        this._hideUI();\n\n        cancel();\n      }\n    }); // Close on click outside of balloon panel element.\n\n    clickOutsideHandler({\n      emitter: this.formView,\n      activator: () => this._isUIInPanel,\n      contextElements: [this._balloon.view.element],\n      callback: () => this._hideUI()\n    });\n  }\n  /**\n   * Adds the {@link #actionsView} to the {@link #_balloon}.\n   *\n   * @protected\n   */\n\n\n  _addActionsView() {\n    if (this._areActionsInPanel) {\n      return;\n    }\n\n    this._balloon.add({\n      view: this.actionsView,\n      position: this._getBalloonPositionData()\n    });\n  }\n  /**\n   * Adds the {@link #formView} to the {@link #_balloon}.\n   *\n   * @protected\n   */\n\n\n  _addFormView() {\n    if (this._isFormInPanel) {\n      return;\n    }\n\n    const editor = this.editor;\n    const linkCommand = editor.commands.get('link');\n    this.formView.disableCssTransitions();\n\n    this._balloon.add({\n      view: this.formView,\n      position: this._getBalloonPositionData()\n    }); // Select input when form view is currently visible.\n\n\n    if (this._balloon.visibleView === this.formView) {\n      this.formView.urlInputView.fieldView.select();\n    }\n\n    this.formView.enableCssTransitions(); // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n    // the command. If the user typed in the input, then canceled the balloon (`urlInputView.fieldView#value` stays\n    // unaltered) and re-opened it without changing the value of the link command (e.g. because they\n    // clicked the same link), they would see the old value instead of the actual value of the command.\n    // https://github.com/ckeditor/ckeditor5-link/issues/78\n    // https://github.com/ckeditor/ckeditor5-link/issues/123\n\n    this.formView.urlInputView.fieldView.element.value = linkCommand.value || '';\n  }\n  /**\n   * Closes the form view. Decides whether the balloon should be hidden completely or if the action view should be shown. This is\n   * decided upon the link command value (which has a value if the document selection is in the link).\n   *\n   * Additionally, if any {@link module:link/link~LinkConfig#decorators} are defined in the editor configuration, the state of\n   * switch buttons responsible for manual decorator handling is restored.\n   *\n   * @private\n   */\n\n\n  _closeFormView() {\n    const linkCommand = this.editor.commands.get('link'); // Restore manual decorator states to represent the current model state. This case is important to reset the switch buttons\n    // when the user cancels the editing form.\n\n    linkCommand.restoreManualDecoratorStates();\n\n    if (linkCommand.value !== undefined) {\n      this._removeFormView();\n    } else {\n      this._hideUI();\n    }\n  }\n  /**\n   * Removes the {@link #formView} from the {@link #_balloon}.\n   *\n   * @protected\n   */\n\n\n  _removeFormView() {\n    if (this._isFormInPanel) {\n      // Blur the input element before removing it from DOM to prevent issues in some browsers.\n      // See https://github.com/ckeditor/ckeditor5/issues/1501.\n      this.formView.saveButtonView.focus();\n\n      this._balloon.remove(this.formView); // Because the form has an input which has focus, the focus must be brought back\n      // to the editor. Otherwise, it would be lost.\n\n\n      this.editor.editing.view.focus();\n\n      this._hideFakeVisualSelection();\n    }\n  }\n  /**\n   * Shows the correct UI type. It is either {@link #formView} or {@link #actionsView}.\n   *\n   * @param {Boolean} forceVisible\n   * @private\n   */\n\n\n  _showUI(forceVisible = false) {\n    // When there's no link under the selection, go straight to the editing UI.\n    if (!this._getSelectedLinkElement()) {\n      // Show visual selection on a text without a link when the contextual balloon is displayed.\n      // See https://github.com/ckeditor/ckeditor5/issues/4721.\n      this._showFakeVisualSelection();\n\n      this._addActionsView(); // Be sure panel with link is visible.\n\n\n      if (forceVisible) {\n        this._balloon.showStack('main');\n      }\n\n      this._addFormView();\n    } // If there's a link under the selection...\n    else {\n        // Go to the editing UI if actions are already visible.\n        if (this._areActionsVisible) {\n          this._addFormView();\n        } // Otherwise display just the actions UI.\n        else {\n            this._addActionsView();\n          } // Be sure panel with link is visible.\n\n\n        if (forceVisible) {\n          this._balloon.showStack('main');\n        }\n      } // Begin responding to ui#update once the UI is added.\n\n\n    this._startUpdatingUI();\n  }\n  /**\n   * Removes the {@link #formView} from the {@link #_balloon}.\n   *\n   * See {@link #_addFormView}, {@link #_addActionsView}.\n   *\n   * @protected\n   */\n\n\n  _hideUI() {\n    if (!this._isUIInPanel) {\n      return;\n    }\n\n    const editor = this.editor;\n    this.stopListening(editor.ui, 'update');\n    this.stopListening(this._balloon, 'change:visibleView'); // Make sure the focus always gets back to the editable _before_ removing the focused form view.\n    // Doing otherwise causes issues in some browsers. See https://github.com/ckeditor/ckeditor5-link/issues/193.\n\n    editor.editing.view.focus(); // Remove form first because it's on top of the stack.\n\n    this._removeFormView(); // Then remove the actions view because it's beneath the form.\n\n\n    this._balloon.remove(this.actionsView);\n\n    this._hideFakeVisualSelection();\n  }\n  /**\n   * Makes the UI react to the {@link module:core/editor/editorui~EditorUI#event:update} event to\n   * reposition itself when the editor UI should be refreshed.\n   *\n   * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n   *\n   * @protected\n   */\n\n\n  _startUpdatingUI() {\n    const editor = this.editor;\n    const viewDocument = editor.editing.view.document;\n\n    let prevSelectedLink = this._getSelectedLinkElement();\n\n    let prevSelectionParent = getSelectionParent();\n\n    const update = () => {\n      const selectedLink = this._getSelectedLinkElement();\n\n      const selectionParent = getSelectionParent(); // Hide the panel if:\n      //\n      // * the selection went out of the EXISTING link element. E.g. user moved the caret out\n      //   of the link,\n      // * the selection went to a different parent when creating a NEW link. E.g. someone\n      //   else modified the document.\n      // * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n      //\n      // Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n      // when fully selected.\n\n      if (prevSelectedLink && !selectedLink || !prevSelectedLink && selectionParent !== prevSelectionParent) {\n        this._hideUI();\n      } // Update the position of the panel when:\n      //  * link panel is in the visible stack\n      //  * the selection remains in the original link element,\n      //  * there was no link element in the first place, i.e. creating a new link\n      else if (this._isUIVisible) {\n          // If still in a link element, simply update the position of the balloon.\n          // If there was no link (e.g. inserting one), the balloon must be moved\n          // to the new position in the editing view (a new native DOM range).\n          this._balloon.updatePosition(this._getBalloonPositionData());\n        }\n\n      prevSelectedLink = selectedLink;\n      prevSelectionParent = selectionParent;\n    };\n\n    function getSelectionParent() {\n      return viewDocument.selection.focus.getAncestors().reverse().find(node => node.is('element'));\n    }\n\n    this.listenTo(editor.ui, 'update', update);\n    this.listenTo(this._balloon, 'change:visibleView', update);\n  }\n  /**\n   * Returns `true` when {@link #formView} is in the {@link #_balloon}.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _isFormInPanel() {\n    return this._balloon.hasView(this.formView);\n  }\n  /**\n   * Returns `true` when {@link #actionsView} is in the {@link #_balloon}.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _areActionsInPanel() {\n    return this._balloon.hasView(this.actionsView);\n  }\n  /**\n   * Returns `true` when {@link #actionsView} is in the {@link #_balloon} and it is\n   * currently visible.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _areActionsVisible() {\n    return this._balloon.visibleView === this.actionsView;\n  }\n  /**\n   * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _isUIInPanel() {\n    return this._isFormInPanel || this._areActionsInPanel;\n  }\n  /**\n   * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n   * currently visible.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _isUIVisible() {\n    const visibleView = this._balloon.visibleView;\n    return visibleView == this.formView || this._areActionsVisible;\n  }\n  /**\n   * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n   * to the target element or selection.\n   *\n   * If the selection is collapsed and inside a link element, the panel will be attached to the\n   * entire link element. Otherwise, it will be attached to the selection.\n   *\n   * @private\n   * @returns {module:utils/dom/position~Options}\n   */\n\n\n  _getBalloonPositionData() {\n    const view = this.editor.editing.view;\n    const model = this.editor.model;\n    const viewDocument = view.document;\n    let target = null;\n\n    if (model.markers.has(VISUAL_SELECTION_MARKER_NAME)) {\n      // There are cases when we highlight selection using a marker (#7705, #4721).\n      const markerViewElements = Array.from(this.editor.editing.mapper.markerNameToElements(VISUAL_SELECTION_MARKER_NAME));\n      const newRange = view.createRange(view.createPositionBefore(markerViewElements[0]), view.createPositionAfter(markerViewElements[markerViewElements.length - 1]));\n      target = view.domConverter.viewRangeToDom(newRange);\n    } else {\n      // Make sure the target is calculated on demand at the last moment because a cached DOM range\n      // (which is very fragile) can desynchronize with the state of the editing view if there was\n      // any rendering done in the meantime. This can happen, for instance, when an inline widget\n      // gets unlinked.\n      target = () => {\n        const targetLink = this._getSelectedLinkElement();\n\n        return targetLink ? // When selection is inside link element, then attach panel to this element.\n        view.domConverter.mapViewToDom(targetLink) : // Otherwise attach panel to the selection.\n        view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n      };\n    }\n\n    return {\n      target\n    };\n  }\n  /**\n   * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n   * the {@link module:engine/view/document~Document editing view's} selection or `null`\n   * if there is none.\n   *\n   * **Note**: For a non–collapsed selection, the link element is returned when **fully**\n   * selected and the **only** element within the selection boundaries, or when\n   * a linked widget is selected.\n   *\n   * @private\n   * @returns {module:engine/view/attributeelement~AttributeElement|null}\n   */\n\n\n  _getSelectedLinkElement() {\n    const view = this.editor.editing.view;\n    const selection = view.document.selection;\n    const selectedElement = selection.getSelectedElement(); // The selection is collapsed or some widget is selected (especially inline widget).\n\n    if (selection.isCollapsed || selectedElement && isWidget(selectedElement)) {\n      return findLinkElementAncestor(selection.getFirstPosition());\n    } else {\n      // The range for fully selected link is usually anchored in adjacent text nodes.\n      // Trim it to get closer to the actual link element.\n      const range = selection.getFirstRange().getTrimmed();\n      const startLink = findLinkElementAncestor(range.start);\n      const endLink = findLinkElementAncestor(range.end);\n\n      if (!startLink || startLink != endLink) {\n        return null;\n      } // Check if the link element is fully selected.\n\n\n      if (view.createRangeIn(startLink).getTrimmed().isEqual(range)) {\n        return startLink;\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\n   * Displays a fake visual selection when the contextual balloon is displayed.\n   *\n   * This adds a 'link-ui' marker into the document that is rendered as a highlight on selected text fragment.\n   *\n   * @private\n   */\n\n\n  _showFakeVisualSelection() {\n    const model = this.editor.model;\n    model.change(writer => {\n      const range = model.document.selection.getFirstRange();\n\n      if (model.markers.has(VISUAL_SELECTION_MARKER_NAME)) {\n        writer.updateMarker(VISUAL_SELECTION_MARKER_NAME, {\n          range\n        });\n      } else {\n        if (range.start.isAtEnd) {\n          const startPosition = range.start.getLastMatchingPosition(({\n            item\n          }) => !model.schema.isContent(item), {\n            boundaries: range\n          });\n          writer.addMarker(VISUAL_SELECTION_MARKER_NAME, {\n            usingOperation: false,\n            affectsData: false,\n            range: writer.createRange(startPosition, range.end)\n          });\n        } else {\n          writer.addMarker(VISUAL_SELECTION_MARKER_NAME, {\n            usingOperation: false,\n            affectsData: false,\n            range\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Hides the fake visual selection created in {@link #_showFakeVisualSelection}.\n   *\n   * @private\n   */\n\n\n  _hideFakeVisualSelection() {\n    const model = this.editor.model;\n\n    if (model.markers.has(VISUAL_SELECTION_MARKER_NAME)) {\n      model.change(writer => {\n        writer.removeMarker(VISUAL_SELECTION_MARKER_NAME);\n      });\n    }\n  }\n\n} // Returns a link element if there's one among the ancestors of the provided `Position`.\n//\n// @private\n// @param {module:engine/view/position~Position} View position to analyze.\n// @returns {module:engine/view/attributeelement~AttributeElement|null} Link element at the position or null.\n\nfunction findLinkElementAncestor(position) {\n  return position.getAncestors().find(ancestor => isLinkElement(ancestor));\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-link/src/linkui.js"],"names":["Plugin","ClickObserver","ButtonView","ContextualBalloon","clickOutsideHandler","isWidget","LinkFormView","LinkActionsView","addLinkProtocolIfApplicable","isLinkElement","LINK_KEYSTROKE","linkIcon","VISUAL_SELECTION_MARKER_NAME","LinkUI","requires","pluginName","init","editor","editing","view","addObserver","actionsView","_createActionsView","formView","_createFormView","_balloon","plugins","get","_createToolbarLinkButton","_enableUserBalloonInteractions","conversion","for","markerToHighlight","model","classes","markerToElement","name","destroy","locale","linkCommand","commands","unlinkCommand","bind","to","editButtonView","unlinkButtonView","listenTo","_addFormView","execute","_hideUI","keystrokes","set","data","cancel","defaultProtocol","config","urlInputView","fieldView","value","saveButtonView","element","parsedUrl","getDecoratorSwitchesState","_closeFormView","t","keyEvtData","isEnabled","_showUI","ui","componentFactory","add","button","label","icon","keystroke","tooltip","isToggleable","viewDocument","document","parentLink","_getSelectedLinkElement","_areActionsVisible","focusTracker","isFocused","focus","priority","_isUIVisible","emitter","activator","_isUIInPanel","contextElements","callback","_addActionsView","_areActionsInPanel","position","_getBalloonPositionData","_isFormInPanel","disableCssTransitions","visibleView","select","enableCssTransitions","restoreManualDecoratorStates","undefined","_removeFormView","remove","_hideFakeVisualSelection","forceVisible","_showFakeVisualSelection","showStack","_startUpdatingUI","stopListening","prevSelectedLink","prevSelectionParent","getSelectionParent","update","selectedLink","selectionParent","updatePosition","selection","getAncestors","reverse","find","node","is","hasView","target","markers","has","markerViewElements","Array","from","mapper","markerNameToElements","newRange","createRange","createPositionBefore","createPositionAfter","length","domConverter","viewRangeToDom","targetLink","mapViewToDom","getFirstRange","selectedElement","getSelectedElement","isCollapsed","findLinkElementAncestor","getFirstPosition","range","getTrimmed","startLink","start","endLink","end","createRangeIn","isEqual","change","writer","updateMarker","isAtEnd","startPosition","getLastMatchingPosition","item","schema","isContent","boundaries","addMarker","usingOperation","affectsData","removeMarker","ancestor"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ClickObserver } from 'ckeditor5/src/engine';\nimport { ButtonView, ContextualBalloon, clickOutsideHandler } from 'ckeditor5/src/ui';\nimport { isWidget } from 'ckeditor5/src/widget';\nimport LinkFormView from './ui/linkformview';\nimport LinkActionsView from './ui/linkactionsview';\nimport { addLinkProtocolIfApplicable, isLinkElement, LINK_KEYSTROKE } from './utils';\n\nimport linkIcon from '../theme/icons/link.svg';\n\nconst VISUAL_SELECTION_MARKER_NAME = 'link-ui';\n\n/**\n * The link UI plugin. It introduces the `'link'` and `'unlink'` buttons and support for the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'LinkUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\teditor.editing.view.addObserver( ClickObserver );\n\n\t\t/**\n\t\t * The actions view displayed inside of the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkactionsview~LinkActionsView}\n\t\t */\n\t\tthis.actionsView = this._createActionsView();\n\n\t\t/**\n\t\t * The form view displayed inside the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkformview~LinkFormView}\n\t\t */\n\t\tthis.formView = this._createFormView();\n\n\t\t/**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\n\t\t// Create toolbar buttons.\n\t\tthis._createToolbarLinkButton();\n\n\t\t// Attach lifecycle actions to the the balloon.\n\t\tthis._enableUserBalloonInteractions();\n\n\t\t// Renders a fake visual selection marker on an expanded selection.\n\t\teditor.conversion.for( 'editingDowncast' ).markerToHighlight( {\n\t\t\tmodel: VISUAL_SELECTION_MARKER_NAME,\n\t\t\tview: {\n\t\t\t\tclasses: [ 'ck-fake-link-selection' ]\n\t\t\t}\n\t\t} );\n\n\t\t// Renders a fake visual selection marker on a collapsed selection.\n\t\teditor.conversion.for( 'editingDowncast' ).markerToElement( {\n\t\t\tmodel: VISUAL_SELECTION_MARKER_NAME,\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tclasses: [ 'ck-fake-link-selection', 'ck-fake-link-selection_collapsed' ]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\t\tthis.formView.destroy();\n\t}\n\n\t/**\n\t * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkactionsview~LinkActionsView} The link actions view instance.\n\t */\n\t_createActionsView() {\n\t\tconst editor = this.editor;\n\t\tconst actionsView = new LinkActionsView( editor.locale );\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\t\tconst unlinkCommand = editor.commands.get( 'unlink' );\n\n\t\tactionsView.bind( 'href' ).to( linkCommand, 'value' );\n\t\tactionsView.editButtonView.bind( 'isEnabled' ).to( linkCommand );\n\t\tactionsView.unlinkButtonView.bind( 'isEnabled' ).to( unlinkCommand );\n\n\t\t// Execute unlink command after clicking on the \"Edit\" button.\n\t\tthis.listenTo( actionsView, 'edit', () => {\n\t\t\tthis._addFormView();\n\t\t} );\n\n\t\t// Execute unlink command after clicking on the \"Unlink\" button.\n\t\tthis.listenTo( actionsView, 'unlink', () => {\n\t\t\teditor.execute( 'unlink' );\n\t\t\tthis._hideUI();\n\t\t} );\n\n\t\t// Close the panel on esc key press when the **actions have focus**.\n\t\tactionsView.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._hideUI();\n\t\t\tcancel();\n\t\t} );\n\n\t\t// Open the form view on Ctrl+K when the **actions have focus**..\n\t\tactionsView.keystrokes.set( LINK_KEYSTROKE, ( data, cancel ) => {\n\t\t\tthis._addFormView();\n\t\t\tcancel();\n\t\t} );\n\n\t\treturn actionsView;\n\t}\n\n\t/**\n\t * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkformview~LinkFormView} The link form view instance.\n\t */\n\t_createFormView() {\n\t\tconst editor = this.editor;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\t\tconst defaultProtocol = editor.config.get( 'link.defaultProtocol' );\n\n\t\tconst formView = new LinkFormView( editor.locale, linkCommand );\n\n\t\tformView.urlInputView.fieldView.bind( 'value' ).to( linkCommand, 'value' );\n\n\t\t// Form elements should be read-only when corresponding commands are disabled.\n\t\tformView.urlInputView.bind( 'isReadOnly' ).to( linkCommand, 'isEnabled', value => !value );\n\t\tformView.saveButtonView.bind( 'isEnabled' ).to( linkCommand );\n\n\t\t// Execute link command after clicking the \"Save\" button.\n\t\tthis.listenTo( formView, 'submit', () => {\n\t\t\tconst { value } = formView.urlInputView.fieldView.element;\n\t\t\tconst parsedUrl = addLinkProtocolIfApplicable( value, defaultProtocol );\n\t\t\teditor.execute( 'link', parsedUrl, formView.getDecoratorSwitchesState() );\n\t\t\tthis._closeFormView();\n\t\t} );\n\n\t\t// Hide the panel after clicking the \"Cancel\" button.\n\t\tthis.listenTo( formView, 'cancel', () => {\n\t\t\tthis._closeFormView();\n\t\t} );\n\n\t\t// Close the panel on esc key press when the **form has focus**.\n\t\tformView.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._closeFormView();\n\t\t\tcancel();\n\t\t} );\n\n\t\treturn formView;\n\t}\n\n\t/**\n\t * Creates a toolbar Link button. Clicking this button will show\n\t * a {@link #_balloon} attached to the selection.\n\t *\n\t * @private\n\t */\n\t_createToolbarLinkButton() {\n\t\tconst editor = this.editor;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\t\tconst t = editor.t;\n\n\t\t// Handle the `Ctrl+K` keystroke and show the panel.\n\t\teditor.keystrokes.set( LINK_KEYSTROKE, ( keyEvtData, cancel ) => {\n\t\t\t// Prevent focusing the search bar in FF, Chrome and Edge. See https://github.com/ckeditor/ckeditor5/issues/4811.\n\t\t\tcancel();\n\n\t\t\tif ( linkCommand.isEnabled ) {\n\t\t\t\tthis._showUI( true );\n\t\t\t}\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'link', locale => {\n\t\t\tconst button = new ButtonView( locale );\n\n\t\t\tbutton.isEnabled = true;\n\t\t\tbutton.label = t( 'Link' );\n\t\t\tbutton.icon = linkIcon;\n\t\t\tbutton.keystroke = LINK_KEYSTROKE;\n\t\t\tbutton.tooltip = true;\n\t\t\tbutton.isToggleable = true;\n\n\t\t\t// Bind button to the command.\n\t\t\tbutton.bind( 'isEnabled' ).to( linkCommand, 'isEnabled' );\n\t\t\tbutton.bind( 'isOn' ).to( linkCommand, 'value', value => !!value );\n\n\t\t\t// Show the panel on button click.\n\t\t\tthis.listenTo( button, 'execute', () => this._showUI( true ) );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches actions that control whether the balloon panel containing the\n\t * {@link #formView} is visible or not.\n\t *\n\t * @private\n\t */\n\t_enableUserBalloonInteractions() {\n\t\tconst viewDocument = this.editor.editing.view.document;\n\n\t\t// Handle click on view document and show panel when selection is placed inside the link element.\n\t\t// Keep panel open until selection will be inside the same link element.\n\t\tthis.listenTo( viewDocument, 'click', () => {\n\t\t\tconst parentLink = this._getSelectedLinkElement();\n\n\t\t\tif ( parentLink ) {\n\t\t\t\t// Then show panel but keep focus inside editor editable.\n\t\t\t\tthis._showUI();\n\t\t\t}\n\t\t} );\n\n\t\t// Focus the form if the balloon is visible and the Tab key has been pressed.\n\t\tthis.editor.keystrokes.set( 'Tab', ( data, cancel ) => {\n\t\t\tif ( this._areActionsVisible && !this.actionsView.focusTracker.isFocused ) {\n\t\t\t\tthis.actionsView.focus();\n\t\t\t\tcancel();\n\t\t\t}\n\t\t}, {\n\t\t\t// Use the high priority because the link UI navigation is more important\n\t\t\t// than other feature's actions, e.g. list indentation.\n\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/146\n\t\t\tpriority: 'high'\n\t\t} );\n\n\t\t// Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n\t\tthis.editor.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tif ( this._isUIVisible ) {\n\t\t\t\tthis._hideUI();\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Close on click outside of balloon panel element.\n\t\tclickOutsideHandler( {\n\t\t\temitter: this.formView,\n\t\t\tactivator: () => this._isUIInPanel,\n\t\t\tcontextElements: [ this._balloon.view.element ],\n\t\t\tcallback: () => this._hideUI()\n\t\t} );\n\t}\n\n\t/**\n\t * Adds the {@link #actionsView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n\t_addActionsView() {\n\t\tif ( this._areActionsInPanel ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._balloon.add( {\n\t\t\tview: this.actionsView,\n\t\t\tposition: this._getBalloonPositionData()\n\t\t} );\n\t}\n\n\t/**\n\t * Adds the {@link #formView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n\t_addFormView() {\n\t\tif ( this._isFormInPanel ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\n\t\tthis.formView.disableCssTransitions();\n\n\t\tthis._balloon.add( {\n\t\t\tview: this.formView,\n\t\t\tposition: this._getBalloonPositionData()\n\t\t} );\n\n\t\t// Select input when form view is currently visible.\n\t\tif ( this._balloon.visibleView === this.formView ) {\n\t\t\tthis.formView.urlInputView.fieldView.select();\n\t\t}\n\n\t\tthis.formView.enableCssTransitions();\n\n\t\t// Make sure that each time the panel shows up, the URL field remains in sync with the value of\n\t\t// the command. If the user typed in the input, then canceled the balloon (`urlInputView.fieldView#value` stays\n\t\t// unaltered) and re-opened it without changing the value of the link command (e.g. because they\n\t\t// clicked the same link), they would see the old value instead of the actual value of the command.\n\t\t// https://github.com/ckeditor/ckeditor5-link/issues/78\n\t\t// https://github.com/ckeditor/ckeditor5-link/issues/123\n\t\tthis.formView.urlInputView.fieldView.element.value = linkCommand.value || '';\n\t}\n\n\t/**\n\t * Closes the form view. Decides whether the balloon should be hidden completely or if the action view should be shown. This is\n\t * decided upon the link command value (which has a value if the document selection is in the link).\n\t *\n\t * Additionally, if any {@link module:link/link~LinkConfig#decorators} are defined in the editor configuration, the state of\n\t * switch buttons responsible for manual decorator handling is restored.\n\t *\n\t * @private\n\t */\n\t_closeFormView() {\n\t\tconst linkCommand = this.editor.commands.get( 'link' );\n\n\t\t// Restore manual decorator states to represent the current model state. This case is important to reset the switch buttons\n\t\t// when the user cancels the editing form.\n\t\tlinkCommand.restoreManualDecoratorStates();\n\n\t\tif ( linkCommand.value !== undefined ) {\n\t\t\tthis._removeFormView();\n\t\t} else {\n\t\t\tthis._hideUI();\n\t\t}\n\t}\n\n\t/**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n\t_removeFormView() {\n\t\tif ( this._isFormInPanel ) {\n\t\t\t// Blur the input element before removing it from DOM to prevent issues in some browsers.\n\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/1501.\n\t\t\tthis.formView.saveButtonView.focus();\n\n\t\t\tthis._balloon.remove( this.formView );\n\n\t\t\t// Because the form has an input which has focus, the focus must be brought back\n\t\t\t// to the editor. Otherwise, it would be lost.\n\t\t\tthis.editor.editing.view.focus();\n\n\t\t\tthis._hideFakeVisualSelection();\n\t\t}\n\t}\n\n\t/**\n\t * Shows the correct UI type. It is either {@link #formView} or {@link #actionsView}.\n\t *\n\t * @param {Boolean} forceVisible\n\t * @private\n\t */\n\t_showUI( forceVisible = false ) {\n\t\t// When there's no link under the selection, go straight to the editing UI.\n\t\tif ( !this._getSelectedLinkElement() ) {\n\t\t\t// Show visual selection on a text without a link when the contextual balloon is displayed.\n\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/4721.\n\t\t\tthis._showFakeVisualSelection();\n\n\t\t\tthis._addActionsView();\n\n\t\t\t// Be sure panel with link is visible.\n\t\t\tif ( forceVisible ) {\n\t\t\t\tthis._balloon.showStack( 'main' );\n\t\t\t}\n\n\t\t\tthis._addFormView();\n\t\t}\n\t\t// If there's a link under the selection...\n\t\telse {\n\t\t\t// Go to the editing UI if actions are already visible.\n\t\t\tif ( this._areActionsVisible ) {\n\t\t\t\tthis._addFormView();\n\t\t\t}\n\t\t\t// Otherwise display just the actions UI.\n\t\t\telse {\n\t\t\t\tthis._addActionsView();\n\t\t\t}\n\n\t\t\t// Be sure panel with link is visible.\n\t\t\tif ( forceVisible ) {\n\t\t\t\tthis._balloon.showStack( 'main' );\n\t\t\t}\n\t\t}\n\n\t\t// Begin responding to ui#update once the UI is added.\n\t\tthis._startUpdatingUI();\n\t}\n\n\t/**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * See {@link #_addFormView}, {@link #_addActionsView}.\n\t *\n\t * @protected\n\t */\n\t_hideUI() {\n\t\tif ( !this._isUIInPanel ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\n\t\tthis.stopListening( editor.ui, 'update' );\n\t\tthis.stopListening( this._balloon, 'change:visibleView' );\n\n\t\t// Make sure the focus always gets back to the editable _before_ removing the focused form view.\n\t\t// Doing otherwise causes issues in some browsers. See https://github.com/ckeditor/ckeditor5-link/issues/193.\n\t\teditor.editing.view.focus();\n\n\t\t// Remove form first because it's on top of the stack.\n\t\tthis._removeFormView();\n\n\t\t// Then remove the actions view because it's beneath the form.\n\t\tthis._balloon.remove( this.actionsView );\n\n\t\tthis._hideFakeVisualSelection();\n\t}\n\n\t/**\n\t * Makes the UI react to the {@link module:core/editor/editorui~EditorUI#event:update} event to\n\t * reposition itself when the editor UI should be refreshed.\n\t *\n\t * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n\t *\n\t * @protected\n\t */\n\t_startUpdatingUI() {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tlet prevSelectedLink = this._getSelectedLinkElement();\n\t\tlet prevSelectionParent = getSelectionParent();\n\n\t\tconst update = () => {\n\t\t\tconst selectedLink = this._getSelectedLinkElement();\n\t\t\tconst selectionParent = getSelectionParent();\n\n\t\t\t// Hide the panel if:\n\t\t\t//\n\t\t\t// * the selection went out of the EXISTING link element. E.g. user moved the caret out\n\t\t\t//   of the link,\n\t\t\t// * the selection went to a different parent when creating a NEW link. E.g. someone\n\t\t\t//   else modified the document.\n\t\t\t// * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n\t\t\t//\n\t\t\t// Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n\t\t\t// when fully selected.\n\t\t\tif ( ( prevSelectedLink && !selectedLink ) ||\n\t\t\t\t( !prevSelectedLink && selectionParent !== prevSelectionParent ) ) {\n\t\t\t\tthis._hideUI();\n\t\t\t}\n\t\t\t// Update the position of the panel when:\n\t\t\t//  * link panel is in the visible stack\n\t\t\t//  * the selection remains in the original link element,\n\t\t\t//  * there was no link element in the first place, i.e. creating a new link\n\t\t\telse if ( this._isUIVisible ) {\n\t\t\t\t// If still in a link element, simply update the position of the balloon.\n\t\t\t\t// If there was no link (e.g. inserting one), the balloon must be moved\n\t\t\t\t// to the new position in the editing view (a new native DOM range).\n\t\t\t\tthis._balloon.updatePosition( this._getBalloonPositionData() );\n\t\t\t}\n\n\t\t\tprevSelectedLink = selectedLink;\n\t\t\tprevSelectionParent = selectionParent;\n\t\t};\n\n\t\tfunction getSelectionParent() {\n\t\t\treturn viewDocument.selection.focus.getAncestors()\n\t\t\t\t.reverse()\n\t\t\t\t.find( node => node.is( 'element' ) );\n\t\t}\n\n\t\tthis.listenTo( editor.ui, 'update', update );\n\t\tthis.listenTo( this._balloon, 'change:visibleView', update );\n\t}\n\n\t/**\n\t * Returns `true` when {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _isFormInPanel() {\n\t\treturn this._balloon.hasView( this.formView );\n\t}\n\n\t/**\n\t * Returns `true` when {@link #actionsView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _areActionsInPanel() {\n\t\treturn this._balloon.hasView( this.actionsView );\n\t}\n\n\t/**\n\t * Returns `true` when {@link #actionsView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _areActionsVisible() {\n\t\treturn this._balloon.visibleView === this.actionsView;\n\t}\n\n\t/**\n\t * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _isUIInPanel() {\n\t\treturn this._isFormInPanel || this._areActionsInPanel;\n\t}\n\n\t/**\n\t * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _isUIVisible() {\n\t\tconst visibleView = this._balloon.visibleView;\n\n\t\treturn visibleView == this.formView || this._areActionsVisible;\n\t}\n\n\t/**\n\t * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n\t * to the target element or selection.\n\t *\n\t * If the selection is collapsed and inside a link element, the panel will be attached to the\n\t * entire link element. Otherwise, it will be attached to the selection.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n\t_getBalloonPositionData() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst model = this.editor.model;\n\t\tconst viewDocument = view.document;\n\t\tlet target = null;\n\n\t\tif ( model.markers.has( VISUAL_SELECTION_MARKER_NAME ) ) {\n\t\t\t// There are cases when we highlight selection using a marker (#7705, #4721).\n\t\t\tconst markerViewElements = Array.from( this.editor.editing.mapper.markerNameToElements( VISUAL_SELECTION_MARKER_NAME ) );\n\t\t\tconst newRange = view.createRange(\n\t\t\t\tview.createPositionBefore( markerViewElements[ 0 ] ),\n\t\t\t\tview.createPositionAfter( markerViewElements[ markerViewElements.length - 1 ] )\n\t\t\t);\n\n\t\t\ttarget = view.domConverter.viewRangeToDom( newRange );\n\t\t} else {\n\t\t\t// Make sure the target is calculated on demand at the last moment because a cached DOM range\n\t\t\t// (which is very fragile) can desynchronize with the state of the editing view if there was\n\t\t\t// any rendering done in the meantime. This can happen, for instance, when an inline widget\n\t\t\t// gets unlinked.\n\t\t\ttarget = () => {\n\t\t\t\tconst targetLink = this._getSelectedLinkElement();\n\n\t\t\t\treturn targetLink ?\n\t\t\t\t\t// When selection is inside link element, then attach panel to this element.\n\t\t\t\t\tview.domConverter.mapViewToDom( targetLink ) :\n\t\t\t\t\t// Otherwise attach panel to the selection.\n\t\t\t\t\tview.domConverter.viewRangeToDom( viewDocument.selection.getFirstRange() );\n\t\t\t};\n\t\t}\n\n\t\treturn { target };\n\t}\n\n\t/**\n\t * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n\t * the {@link module:engine/view/document~Document editing view's} selection or `null`\n\t * if there is none.\n\t *\n\t * **Note**: For a non–collapsed selection, the link element is returned when **fully**\n\t * selected and the **only** element within the selection boundaries, or when\n\t * a linked widget is selected.\n\t *\n\t * @private\n\t * @returns {module:engine/view/attributeelement~AttributeElement|null}\n\t */\n\t_getSelectedLinkElement() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst selection = view.document.selection;\n\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t// The selection is collapsed or some widget is selected (especially inline widget).\n\t\tif ( selection.isCollapsed || selectedElement && isWidget( selectedElement ) ) {\n\t\t\treturn findLinkElementAncestor( selection.getFirstPosition() );\n\t\t} else {\n\t\t\t// The range for fully selected link is usually anchored in adjacent text nodes.\n\t\t\t// Trim it to get closer to the actual link element.\n\t\t\tconst range = selection.getFirstRange().getTrimmed();\n\t\t\tconst startLink = findLinkElementAncestor( range.start );\n\t\t\tconst endLink = findLinkElementAncestor( range.end );\n\n\t\t\tif ( !startLink || startLink != endLink ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Check if the link element is fully selected.\n\t\t\tif ( view.createRangeIn( startLink ).getTrimmed().isEqual( range ) ) {\n\t\t\t\treturn startLink;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Displays a fake visual selection when the contextual balloon is displayed.\n\t *\n\t * This adds a 'link-ui' marker into the document that is rendered as a highlight on selected text fragment.\n\t *\n\t * @private\n\t */\n\t_showFakeVisualSelection() {\n\t\tconst model = this.editor.model;\n\n\t\tmodel.change( writer => {\n\t\t\tconst range = model.document.selection.getFirstRange();\n\n\t\t\tif ( model.markers.has( VISUAL_SELECTION_MARKER_NAME ) ) {\n\t\t\t\twriter.updateMarker( VISUAL_SELECTION_MARKER_NAME, { range } );\n\t\t\t} else {\n\t\t\t\tif ( range.start.isAtEnd ) {\n\t\t\t\t\tconst startPosition = range.start.getLastMatchingPosition(\n\t\t\t\t\t\t( { item } ) => !model.schema.isContent( item ),\n\t\t\t\t\t\t{ boundaries: range }\n\t\t\t\t\t);\n\n\t\t\t\t\twriter.addMarker( VISUAL_SELECTION_MARKER_NAME, {\n\t\t\t\t\t\tusingOperation: false,\n\t\t\t\t\t\taffectsData: false,\n\t\t\t\t\t\trange: writer.createRange( startPosition, range.end )\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\twriter.addMarker( VISUAL_SELECTION_MARKER_NAME, {\n\t\t\t\t\t\tusingOperation: false,\n\t\t\t\t\t\taffectsData: false,\n\t\t\t\t\t\trange\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Hides the fake visual selection created in {@link #_showFakeVisualSelection}.\n\t *\n\t * @private\n\t */\n\t_hideFakeVisualSelection() {\n\t\tconst model = this.editor.model;\n\n\t\tif ( model.markers.has( VISUAL_SELECTION_MARKER_NAME ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.removeMarker( VISUAL_SELECTION_MARKER_NAME );\n\t\t\t} );\n\t\t}\n\t}\n}\n\n// Returns a link element if there's one among the ancestors of the provided `Position`.\n//\n// @private\n// @param {module:engine/view/position~Position} View position to analyze.\n// @returns {module:engine/view/attributeelement~AttributeElement|null} Link element at the position or null.\nfunction findLinkElementAncestor( position ) {\n\treturn position.getAncestors().find( ancestor => isLinkElement( ancestor ) );\n}\n"]},"metadata":{},"sourceType":"module"}