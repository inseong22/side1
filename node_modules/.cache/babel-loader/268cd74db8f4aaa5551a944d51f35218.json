{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageLoadObserver from './imageloadobserver';\nimport InsertImageCommand from './insertimagecommand';\nimport ImageUtils from '../imageutils';\n/**\n * The image engine plugin. This module loads common code shared between\n * {@link module:image/image/imageinlineediting~ImageInlineEditing} and\n * {@link module:image/image/imageblockediting~ImageBlockEditing} plugins.\n *\n * This plugin registers the {@link module:image/image/insertimagecommand~InsertImageCommand 'insertImage'} command.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageUtils];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const conversion = editor.conversion; // See https://github.com/ckeditor/ckeditor5-image/issues/142.\n\n    editor.editing.view.addObserver(ImageLoadObserver);\n    conversion.for('upcast').attributeToAttribute({\n      view: {\n        name: 'img',\n        key: 'alt'\n      },\n      model: 'alt'\n    }).attributeToAttribute({\n      view: {\n        name: 'img',\n        key: 'srcset'\n      },\n      model: {\n        key: 'srcset',\n        value: viewImage => {\n          const value = {\n            data: viewImage.getAttribute('srcset')\n          };\n\n          if (viewImage.hasAttribute('width')) {\n            value.width = viewImage.getAttribute('width');\n          }\n\n          return value;\n        }\n      }\n    });\n    const insertImageCommand = new InsertImageCommand(editor); // Register `insertImage` command and add `imageInsert` command as an alias for backward compatibility.\n\n    editor.commands.add('insertImage', insertImageCommand);\n    editor.commands.add('imageInsert', insertImageCommand);\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/image/imageediting.js"],"names":["Plugin","ImageLoadObserver","InsertImageCommand","ImageUtils","ImageEditing","requires","pluginName","init","editor","conversion","editing","view","addObserver","for","attributeToAttribute","name","key","model","value","viewImage","data","getAttribute","hasAttribute","width","insertImageCommand","commands","add"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,oBAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BJ,MAA3B,CAAkC;AAChD;AACD;AACA;AACoB,aAARK,QAAQ,GAAG;AACrB,WAAO,CAAEF,UAAF,CAAP;AACA;AAED;AACD;AACA;;;AACsB,aAAVG,UAAU,GAAG;AACvB,WAAO,cAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,UAAU,GAAGD,MAAM,CAACC,UAA1B,CAFM,CAIN;;AACAD,IAAAA,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,WAApB,CAAiCX,iBAAjC;AAEAQ,IAAAA,UAAU,CAACI,GAAX,CAAgB,QAAhB,EACEC,oBADF,CACwB;AACtBH,MAAAA,IAAI,EAAE;AACLI,QAAAA,IAAI,EAAE,KADD;AAELC,QAAAA,GAAG,EAAE;AAFA,OADgB;AAKtBC,MAAAA,KAAK,EAAE;AALe,KADxB,EAQEH,oBARF,CAQwB;AACtBH,MAAAA,IAAI,EAAE;AACLI,QAAAA,IAAI,EAAE,KADD;AAELC,QAAAA,GAAG,EAAE;AAFA,OADgB;AAKtBC,MAAAA,KAAK,EAAE;AACND,QAAAA,GAAG,EAAE,QADC;AAENE,QAAAA,KAAK,EAAEC,SAAS,IAAI;AACnB,gBAAMD,KAAK,GAAG;AACbE,YAAAA,IAAI,EAAED,SAAS,CAACE,YAAV,CAAwB,QAAxB;AADO,WAAd;;AAIA,cAAKF,SAAS,CAACG,YAAV,CAAwB,OAAxB,CAAL,EAAyC;AACxCJ,YAAAA,KAAK,CAACK,KAAN,GAAcJ,SAAS,CAACE,YAAV,CAAwB,OAAxB,CAAd;AACA;;AAED,iBAAOH,KAAP;AACA;AAZK;AALe,KARxB;AA6BA,UAAMM,kBAAkB,GAAG,IAAItB,kBAAJ,CAAwBM,MAAxB,CAA3B,CApCM,CAsCN;;AACAA,IAAAA,MAAM,CAACiB,QAAP,CAAgBC,GAAhB,CAAqB,aAArB,EAAoCF,kBAApC;AACAhB,IAAAA,MAAM,CAACiB,QAAP,CAAgBC,GAAhB,CAAqB,aAArB,EAAoCF,kBAApC;AACA;;AA3D+C","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport ImageLoadObserver from './imageloadobserver';\nimport InsertImageCommand from './insertimagecommand';\nimport ImageUtils from '../imageutils';\n\n/**\n * The image engine plugin. This module loads common code shared between\n * {@link module:image/image/imageinlineediting~ImageInlineEditing} and\n * {@link module:image/image/imageblockediting~ImageBlockEditing} plugins.\n *\n * This plugin registers the {@link module:image/image/insertimagecommand~InsertImageCommand 'insertImage'} command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageUtils ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst conversion = editor.conversion;\n\n\t\t// See https://github.com/ckeditor/ckeditor5-image/issues/142.\n\t\teditor.editing.view.addObserver( ImageLoadObserver );\n\n\t\tconversion.for( 'upcast' )\n\t\t\t.attributeToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'img',\n\t\t\t\t\tkey: 'alt'\n\t\t\t\t},\n\t\t\t\tmodel: 'alt'\n\t\t\t} )\n\t\t\t.attributeToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'img',\n\t\t\t\t\tkey: 'srcset'\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'srcset',\n\t\t\t\t\tvalue: viewImage => {\n\t\t\t\t\t\tconst value = {\n\t\t\t\t\t\t\tdata: viewImage.getAttribute( 'srcset' )\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif ( viewImage.hasAttribute( 'width' ) ) {\n\t\t\t\t\t\t\tvalue.width = viewImage.getAttribute( 'width' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\tconst insertImageCommand = new InsertImageCommand( editor );\n\n\t\t// Register `insertImage` command and add `imageInsert` command as an alias for backward compatibility.\n\t\teditor.commands.add( 'insertImage', insertImageCommand );\n\t\teditor.commands.add( 'imageInsert', insertImageCommand );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}