{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/twostepcaretmovement\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n/**\n * This plugin enables the two-step caret (phantom) movement behavior for\n * {@link module:typing/twostepcaretmovement~TwoStepCaretMovement#registerAttribute registered attributes}\n * on arrow right (<kbd>→</kbd>) and left (<kbd>←</kbd>) key press.\n *\n * Thanks to this (phantom) caret movement the user is able to type before/after as well as at the\n * beginning/end of an attribute.\n *\n * **Note:** This plugin support right–to–left (Arabic, Hebrew, etc.) content by mirroring its behavior\n * but for the sake of simplicity examples showcase only left–to–right use–cases.\n *\n * # Forward movement\n *\n * ## \"Entering\" an attribute:\n *\n * When this plugin is enabled and registered for the `a` attribute and the selection is right before it\n * (at the attribute boundary), pressing the right arrow key will not move the selection but update its\n * attributes accordingly:\n *\n * * When enabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *    <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">{}bar</$text>\n *\n * * When disabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *   <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">b{}ar</$text>\n *\n *\n * ## \"Leaving\" an attribute:\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *    <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *   <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>b{}az\n *\n * # Backward movement\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *    <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *   <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">ba{}r</$text>b{}az\n *\n * # Multiple attributes\n *\n * * When enabled and many attributes starts or ends at the same position:\n *\n *   \t\t<$text a=\"true\" b=\"true\">bar</$text>{}baz\n *\n *    <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\" b=\"true\">bar{}</$text>baz\n *\n * * When enabled and one procedes another:\n *\n *   \t\t<$text a=\"true\">bar</$text><$text b=\"true\">{}bar</$text>\n *\n *    <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">bar{}</$text><$text b=\"true\">bar</$text>\n *\n */\n\nexport default class TwoStepCaretMovement extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TwoStepCaretMovement';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * A set of attributes to handle.\n     *\n     * @protected\n     * @property {module:typing/twostepcaretmovement~TwoStepCaretMovement}\n     */\n\n    this.attributes = new Set();\n    /**\n     * The current UID of the overridden gravity, as returned by\n     * {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n     *\n     * @private\n     * @member {String}\n     */\n\n    this._overrideUid = null;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const model = editor.model;\n    const view = editor.editing.view;\n    const locale = editor.locale;\n    const modelSelection = model.document.selection; // Listen to keyboard events and handle the caret movement according to the 2-step caret logic.\n\n    this.listenTo(view.document, 'arrowKey', (evt, data) => {\n      // This implementation works only for collapsed selection.\n      if (!modelSelection.isCollapsed) {\n        return;\n      } // When user tries to expand the selection or jump over the whole word or to the beginning/end then\n      // two-steps movement is not necessary.\n\n\n      if (data.shiftKey || data.altKey || data.ctrlKey) {\n        return;\n      }\n\n      const arrowRightPressed = data.keyCode == keyCodes.arrowright;\n      const arrowLeftPressed = data.keyCode == keyCodes.arrowleft; // When neither left or right arrow has been pressed then do noting.\n\n      if (!arrowRightPressed && !arrowLeftPressed) {\n        return;\n      }\n\n      const contentDirection = locale.contentLanguageDirection;\n      let isMovementHandled = false;\n\n      if (contentDirection === 'ltr' && arrowRightPressed || contentDirection === 'rtl' && arrowLeftPressed) {\n        isMovementHandled = this._handleForwardMovement(data);\n      } else {\n        isMovementHandled = this._handleBackwardMovement(data);\n      } // Stop the keydown event if the two-step caret movement handled it. Avoid collisions\n      // with other features which may also take over the caret movement (e.g. Widget).\n\n\n      if (isMovementHandled === true) {\n        evt.stop();\n      }\n    }, {\n      context: '$text',\n      priority: 'highest'\n    });\n    /**\n     * A flag indicating that the automatic gravity restoration should not happen upon the next\n     * gravity restoration.\n     * {@link module:engine/model/selection~Selection#event:change:range} event.\n     *\n     * @private\n     * @member {String}\n     */\n\n    this._isNextGravityRestorationSkipped = false; // The automatic gravity restoration logic.\n\n    this.listenTo(modelSelection, 'change:range', (evt, data) => {\n      // Skipping the automatic restoration is needed if the selection should change\n      // but the gravity must remain overridden afterwards. See the #handleBackwardMovement\n      // to learn more.\n      if (this._isNextGravityRestorationSkipped) {\n        this._isNextGravityRestorationSkipped = false;\n        return;\n      } // Skip automatic restore when the gravity is not overridden — simply, there's nothing to restore\n      // at this moment.\n\n\n      if (!this._isGravityOverridden) {\n        return;\n      } // Skip automatic restore when the change is indirect AND the selection is at the attribute boundary.\n      // It means that e.g. if the change was external (collaboration) and the user had their\n      // selection around the link, its gravity should remain intact in this change:range event.\n\n\n      if (!data.directChange && isBetweenDifferentAttributes(modelSelection.getFirstPosition(), this.attributes)) {\n        return;\n      }\n\n      this._restoreGravity();\n    });\n  }\n  /**\n   * Registers a given attribute for the two-step caret movement.\n   *\n   * @param {String} attribute Name of the attribute to handle.\n   */\n\n\n  registerAttribute(attribute) {\n    this.attributes.add(attribute);\n  }\n  /**\n   * Updates the document selection and the view according to the two–step caret movement state\n   * when moving **forwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n   *\n   * @private\n   * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n   * @returns {Boolean} `true` when the handler prevented caret movement\n   */\n\n\n  _handleForwardMovement(data) {\n    const attributes = this.attributes;\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const position = selection.getFirstPosition(); // DON'T ENGAGE 2-SCM if gravity is already overridden. It means that we just entered\n    //\n    // \t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n    //\n    // or left the attribute\n    //\n    // \t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n    //\n    // and the gravity will be restored automatically.\n\n    if (this._isGravityOverridden) {\n      return false;\n    } // DON'T ENGAGE 2-SCM when the selection is at the beginning of the block AND already has the\n    // attribute:\n    // * when the selection was initially set there using the mouse,\n    // * when the editor has just started\n    //\n    //\t\t<paragraph><$text attribute>{}bar</$text>baz</paragraph>\n    //\n\n\n    if (position.isAtStart && hasAnyAttribute(selection, attributes)) {\n      return false;\n    } // ENGAGE 2-SCM When at least one of the observed attributes changes its value (incl. starts, ends).\n    //\n    //\t\t<paragraph>foo<$text attribute>bar{}</$text>baz</paragraph>\n    //\t\t<paragraph>foo<$text attribute>bar{}</$text><$text otherAttribute>baz</$text></paragraph>\n    //\t\t<paragraph>foo<$text attribute=1>bar{}</$text><$text attribute=2>baz</$text></paragraph>\n    //\t\t<paragraph>foo{}<$text attribute>bar</$text>baz</paragraph>\n    //\n\n\n    if (isBetweenDifferentAttributes(position, attributes)) {\n      preventCaretMovement(data);\n\n      this._overrideGravity();\n\n      return true;\n    }\n  }\n  /**\n   * Updates the document selection and the view according to the two–step caret movement state\n   * when moving **backwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n   *\n   * @private\n   * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n   * @returns {Boolean} `true` when the handler prevented caret movement\n   */\n\n\n  _handleBackwardMovement(data) {\n    const attributes = this.attributes;\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const position = selection.getFirstPosition(); // When the gravity is already overridden (by this plugin), it means we are on the two-step position.\n    // Prevent the movement, restore the gravity and update selection attributes.\n    //\n    //\t\t<paragraph>foo<$text attribute=1>bar</$text><$text attribute=2>{}baz</$text></paragraph>\n    //\t\t<paragraph>foo<$text attribute>bar</$text><$text otherAttribute>{}baz</$text></paragraph>\n    //\t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n    //\t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n    //\n\n    if (this._isGravityOverridden) {\n      preventCaretMovement(data);\n\n      this._restoreGravity();\n\n      setSelectionAttributesFromTheNodeBefore(model, attributes, position);\n      return true;\n    } else {\n      // REMOVE SELECTION ATTRIBUTE when restoring gravity towards a non-existent content at the\n      // beginning of the block.\n      //\n      // \t\t<paragraph>{}<$text attribute>bar</$text></paragraph>\n      //\n      if (position.isAtStart) {\n        if (hasAnyAttribute(selection, attributes)) {\n          preventCaretMovement(data);\n          setSelectionAttributesFromTheNodeBefore(model, attributes, position);\n          return true;\n        }\n\n        return false;\n      } // When we are moving from natural gravity, to the position of the 2SCM, we need to override the gravity,\n      // and make sure it won't be restored. Unless it's at the end of the block and an observed attribute.\n      // We need to check if the caret is a one position before the attribute boundary:\n      //\n      //\t\t<paragraph>foo<$text attribute=1>bar</$text><$text attribute=2>b{}az</$text></paragraph>\n      //\t\t<paragraph>foo<$text attribute>bar</$text><$text otherAttribute>b{}az</$text></paragraph>\n      //\t\t<paragraph>foo<$text attribute>b{}ar</$text>baz</paragraph>\n      //\t\t<paragraph>foo<$text attribute>bar</$text>b{}az</paragraph>\n      //\n\n\n      if (isStepAfterAnyAttributeBoundary(position, attributes)) {\n        // ENGAGE 2-SCM if the selection has no attribute. This may happen when the user\n        // left the attribute using a FORWARD 2-SCM.\n        //\n        // \t\t<paragraph><$text attribute>bar</$text>{}</paragraph>\n        //\n        if (position.isAtEnd && !hasAnyAttribute(selection, attributes) && isBetweenDifferentAttributes(position, attributes)) {\n          preventCaretMovement(data);\n          setSelectionAttributesFromTheNodeBefore(model, attributes, position);\n          return true;\n        } // Skip the automatic gravity restore upon the next selection#change:range event.\n        // If not skipped, it would automatically restore the gravity, which should remain\n        // overridden.\n\n\n        this._isNextGravityRestorationSkipped = true;\n\n        this._overrideGravity(); // Don't return \"true\" here because we didn't call _preventCaretMovement.\n        // Returning here will destabilize the filler logic, which also listens to\n        // keydown (and the event would be stopped).\n\n\n        return false;\n      }\n    }\n  }\n  /**\n   * `true` when the gravity is overridden for the plugin.\n   *\n   * @readonly\n   * @private\n   * @type {Boolean}\n   */\n\n\n  get _isGravityOverridden() {\n    return !!this._overrideUid;\n  }\n  /**\n   * Overrides the gravity using the {@link module:engine/model/writer~Writer model writer}\n   * and stores the information about this fact in the {@link #_overrideUid}.\n   *\n   * A shorthand for {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n   *\n   * @private\n   */\n\n\n  _overrideGravity() {\n    this._overrideUid = this.editor.model.change(writer => {\n      return writer.overrideSelectionGravity();\n    });\n  }\n  /**\n   * Restores the gravity using the {@link module:engine/model/writer~Writer model writer}.\n   *\n   * A shorthand for {@link module:engine/model/writer~Writer#restoreSelectionGravity}.\n   *\n   * @private\n   */\n\n\n  _restoreGravity() {\n    this.editor.model.change(writer => {\n      writer.restoreSelectionGravity(this._overrideUid);\n      this._overrideUid = null;\n    });\n  }\n\n} // Checks whether the selection has any of given attributes.\n//\n// @param {module:engine/model/documentselection~DocumentSelection} selection\n// @param {Iterable.<String>} attributes\n\nfunction hasAnyAttribute(selection, attributes) {\n  for (const observedAttribute of attributes) {\n    if (selection.hasAttribute(observedAttribute)) {\n      return true;\n    }\n  }\n\n  return false;\n} // Applies the given attributes to the current selection using using the\n// values from the node before the current position. Uses\n// the {@link module:engine/model/writer~Writer model writer}.\n//\n// @param {module:engine/model/model~Model}\n// @param {Iterable.<String>} attributess\n// @param {module:engine/model/position~Position} position\n\n\nfunction setSelectionAttributesFromTheNodeBefore(model, attributes, position) {\n  const nodeBefore = position.nodeBefore;\n  model.change(writer => {\n    if (nodeBefore) {\n      writer.setSelectionAttribute(nodeBefore.getAttributes());\n    } else {\n      writer.removeSelectionAttribute(attributes);\n    }\n  });\n} // Prevents the caret movement in the view by calling `preventDefault` on the event data.\n//\n// @alias data.preventDefault\n\n\nfunction preventCaretMovement(data) {\n  data.preventDefault();\n} // Checks whether the step before `isBetweenDifferentAttributes()`.\n//\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\n\n\nfunction isStepAfterAnyAttributeBoundary(position, attributes) {\n  const positionBefore = position.getShiftedBy(-1);\n  return isBetweenDifferentAttributes(positionBefore, attributes);\n} // Checks whether the given position is between different values of given attributes.\n//\n// @param {module:engine/model/position~Position} position\n// @param {Iterable.<String>} attributes\n\n\nfunction isBetweenDifferentAttributes(position, attributes) {\n  const {\n    nodeBefore,\n    nodeAfter\n  } = position;\n\n  for (const observedAttribute of attributes) {\n    const attrBefore = nodeBefore ? nodeBefore.getAttribute(observedAttribute) : undefined;\n    const attrAfter = nodeAfter ? nodeAfter.getAttribute(observedAttribute) : undefined;\n\n    if (attrAfter !== attrBefore) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-typing/src/twostepcaretmovement.js"],"names":["Plugin","keyCodes","TwoStepCaretMovement","pluginName","constructor","editor","attributes","Set","_overrideUid","init","model","view","editing","locale","modelSelection","document","selection","listenTo","evt","data","isCollapsed","shiftKey","altKey","ctrlKey","arrowRightPressed","keyCode","arrowright","arrowLeftPressed","arrowleft","contentDirection","contentLanguageDirection","isMovementHandled","_handleForwardMovement","_handleBackwardMovement","stop","context","priority","_isNextGravityRestorationSkipped","_isGravityOverridden","directChange","isBetweenDifferentAttributes","getFirstPosition","_restoreGravity","registerAttribute","attribute","add","position","isAtStart","hasAnyAttribute","preventCaretMovement","_overrideGravity","setSelectionAttributesFromTheNodeBefore","isStepAfterAnyAttributeBoundary","isAtEnd","change","writer","overrideSelectionGravity","restoreSelectionGravity","observedAttribute","hasAttribute","nodeBefore","setSelectionAttribute","getAttributes","removeSelectionAttribute","preventDefault","positionBefore","getShiftedBy","nodeAfter","attrBefore","getAttribute","undefined","attrAfter"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AAEA,SAASC,QAAT,QAAyB,wCAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,oBAAN,SAAmCF,MAAnC,CAA0C;AACxD;AACD;AACA;AACsB,aAAVG,UAAU,GAAG;AACvB,WAAO,sBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,YAAL,GAAoB,IAApB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMJ,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMK,KAAK,GAAGL,MAAM,CAACK,KAArB;AACA,UAAMC,IAAI,GAAGN,MAAM,CAACO,OAAP,CAAeD,IAA5B;AACA,UAAME,MAAM,GAAGR,MAAM,CAACQ,MAAtB;AAEA,UAAMC,cAAc,GAAGJ,KAAK,CAACK,QAAN,CAAeC,SAAtC,CANM,CAQN;;AACA,SAAKC,QAAL,CAAeN,IAAI,CAACI,QAApB,EAA8B,UAA9B,EAA0C,CAAEG,GAAF,EAAOC,IAAP,KAAiB;AAC1D;AACA,UAAK,CAACL,cAAc,CAACM,WAArB,EAAmC;AAClC;AACA,OAJyD,CAM1D;AACA;;;AACA,UAAKD,IAAI,CAACE,QAAL,IAAiBF,IAAI,CAACG,MAAtB,IAAgCH,IAAI,CAACI,OAA1C,EAAoD;AACnD;AACA;;AAED,YAAMC,iBAAiB,GAAGL,IAAI,CAACM,OAAL,IAAgBxB,QAAQ,CAACyB,UAAnD;AACA,YAAMC,gBAAgB,GAAGR,IAAI,CAACM,OAAL,IAAgBxB,QAAQ,CAAC2B,SAAlD,CAb0D,CAe1D;;AACA,UAAK,CAACJ,iBAAD,IAAsB,CAACG,gBAA5B,EAA+C;AAC9C;AACA;;AAED,YAAME,gBAAgB,GAAGhB,MAAM,CAACiB,wBAAhC;AACA,UAAIC,iBAAiB,GAAG,KAAxB;;AAEA,UAAOF,gBAAgB,KAAK,KAArB,IAA8BL,iBAAhC,IAAyDK,gBAAgB,KAAK,KAArB,IAA8BF,gBAA5F,EAAiH;AAChHI,QAAAA,iBAAiB,GAAG,KAAKC,sBAAL,CAA6Bb,IAA7B,CAApB;AACA,OAFD,MAEO;AACNY,QAAAA,iBAAiB,GAAG,KAAKE,uBAAL,CAA8Bd,IAA9B,CAApB;AACA,OA3ByD,CA6B1D;AACA;;;AACA,UAAKY,iBAAiB,KAAK,IAA3B,EAAkC;AACjCb,QAAAA,GAAG,CAACgB,IAAJ;AACA;AACD,KAlCD,EAkCG;AAAEC,MAAAA,OAAO,EAAE,OAAX;AAAoBC,MAAAA,QAAQ,EAAE;AAA9B,KAlCH;AAoCA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,gCAAL,GAAwC,KAAxC,CArDM,CAuDN;;AACA,SAAKpB,QAAL,CAAeH,cAAf,EAA+B,cAA/B,EAA+C,CAAEI,GAAF,EAAOC,IAAP,KAAiB;AAC/D;AACA;AACA;AACA,UAAK,KAAKkB,gCAAV,EAA6C;AAC5C,aAAKA,gCAAL,GAAwC,KAAxC;AAEA;AACA,OAR8D,CAU/D;AACA;;;AACA,UAAK,CAAC,KAAKC,oBAAX,EAAkC;AACjC;AACA,OAd8D,CAgB/D;AACA;AACA;;;AACA,UAAK,CAACnB,IAAI,CAACoB,YAAN,IAAsBC,4BAA4B,CAAE1B,cAAc,CAAC2B,gBAAf,EAAF,EAAqC,KAAKnC,UAA1C,CAAvD,EAAgH;AAC/G;AACA;;AAED,WAAKoC,eAAL;AACA,KAxBD;AAyBA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,iBAAiB,CAAEC,SAAF,EAAc;AAC9B,SAAKtC,UAAL,CAAgBuC,GAAhB,CAAqBD,SAArB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCZ,EAAAA,sBAAsB,CAAEb,IAAF,EAAS;AAC9B,UAAMb,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAMI,KAAK,GAAG,KAAKL,MAAL,CAAYK,KAA1B;AACA,UAAMM,SAAS,GAAGN,KAAK,CAACK,QAAN,CAAeC,SAAjC;AACA,UAAM8B,QAAQ,GAAG9B,SAAS,CAACyB,gBAAV,EAAjB,CAJ8B,CAK9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAK,KAAKH,oBAAV,EAAiC;AAChC,aAAO,KAAP;AACA,KAhB6B,CAkB9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAKQ,QAAQ,CAACC,SAAT,IAAsBC,eAAe,CAAEhC,SAAF,EAAaV,UAAb,CAA1C,EAAsE;AACrE,aAAO,KAAP;AACA,KA3B6B,CA6B9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAKkC,4BAA4B,CAAEM,QAAF,EAAYxC,UAAZ,CAAjC,EAA4D;AAC3D2C,MAAAA,oBAAoB,CAAE9B,IAAF,CAApB;;AACA,WAAK+B,gBAAL;;AACA,aAAO,IAAP;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCjB,EAAAA,uBAAuB,CAAEd,IAAF,EAAS;AAC/B,UAAMb,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAMI,KAAK,GAAG,KAAKL,MAAL,CAAYK,KAA1B;AACA,UAAMM,SAAS,GAAGN,KAAK,CAACK,QAAN,CAAeC,SAAjC;AACA,UAAM8B,QAAQ,GAAG9B,SAAS,CAACyB,gBAAV,EAAjB,CAJ+B,CAM/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAK,KAAKH,oBAAV,EAAiC;AAChCW,MAAAA,oBAAoB,CAAE9B,IAAF,CAApB;;AACA,WAAKuB,eAAL;;AACAS,MAAAA,uCAAuC,CAAEzC,KAAF,EAASJ,UAAT,EAAqBwC,QAArB,CAAvC;AAEA,aAAO,IAAP;AACA,KAND,MAMO;AACN;AACA;AACA;AACA;AACA;AACA,UAAKA,QAAQ,CAACC,SAAd,EAA0B;AACzB,YAAKC,eAAe,CAAEhC,SAAF,EAAaV,UAAb,CAApB,EAAgD;AAC/C2C,UAAAA,oBAAoB,CAAE9B,IAAF,CAApB;AACAgC,UAAAA,uCAAuC,CAAEzC,KAAF,EAASJ,UAAT,EAAqBwC,QAArB,CAAvC;AAEA,iBAAO,IAAP;AACA;;AAED,eAAO,KAAP;AACA,OAfK,CAiBN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAKM,+BAA+B,CAAEN,QAAF,EAAYxC,UAAZ,CAApC,EAA+D;AAC9D;AACA;AACA;AACA;AACA;AACA,YACCwC,QAAQ,CAACO,OAAT,IACA,CAACL,eAAe,CAAEhC,SAAF,EAAaV,UAAb,CADhB,IAEAkC,4BAA4B,CAAEM,QAAF,EAAYxC,UAAZ,CAH7B,EAIE;AACD2C,UAAAA,oBAAoB,CAAE9B,IAAF,CAApB;AACAgC,UAAAA,uCAAuC,CAAEzC,KAAF,EAASJ,UAAT,EAAqBwC,QAArB,CAAvC;AAEA,iBAAO,IAAP;AACA,SAf6D,CAgB9D;AACA;AACA;;;AACA,aAAKT,gCAAL,GAAwC,IAAxC;;AACA,aAAKa,gBAAL,GApB8D,CAsB9D;AACA;AACA;;;AACA,eAAO,KAAP;AACA;AACD;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACyB,MAApBZ,oBAAoB,GAAG;AAC1B,WAAO,CAAC,CAAC,KAAK9B,YAAd;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC0C,EAAAA,gBAAgB,GAAG;AAClB,SAAK1C,YAAL,GAAoB,KAAKH,MAAL,CAAYK,KAAZ,CAAkB4C,MAAlB,CAA0BC,MAAM,IAAI;AACvD,aAAOA,MAAM,CAACC,wBAAP,EAAP;AACA,KAFmB,CAApB;AAGA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCd,EAAAA,eAAe,GAAG;AACjB,SAAKrC,MAAL,CAAYK,KAAZ,CAAkB4C,MAAlB,CAA0BC,MAAM,IAAI;AACnCA,MAAAA,MAAM,CAACE,uBAAP,CAAgC,KAAKjD,YAArC;AACA,WAAKA,YAAL,GAAoB,IAApB;AACA,KAHD;AAIA;;AA3SuD,C,CA8SzD;AACA;AACA;AACA;;AACA,SAASwC,eAAT,CAA0BhC,SAA1B,EAAqCV,UAArC,EAAkD;AACjD,OAAM,MAAMoD,iBAAZ,IAAiCpD,UAAjC,EAA8C;AAC7C,QAAKU,SAAS,CAAC2C,YAAV,CAAwBD,iBAAxB,CAAL,EAAmD;AAClD,aAAO,IAAP;AACA;AACD;;AAED,SAAO,KAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,uCAAT,CAAkDzC,KAAlD,EAAyDJ,UAAzD,EAAqEwC,QAArE,EAAgF;AAC/E,QAAMc,UAAU,GAAGd,QAAQ,CAACc,UAA5B;AACAlD,EAAAA,KAAK,CAAC4C,MAAN,CAAcC,MAAM,IAAI;AACvB,QAAKK,UAAL,EAAkB;AACjBL,MAAAA,MAAM,CAACM,qBAAP,CAA8BD,UAAU,CAACE,aAAX,EAA9B;AACA,KAFD,MAEO;AACNP,MAAAA,MAAM,CAACQ,wBAAP,CAAiCzD,UAAjC;AACA;AACD,GAND;AAOA,C,CAED;AACA;AACA;;;AACA,SAAS2C,oBAAT,CAA+B9B,IAA/B,EAAsC;AACrCA,EAAAA,IAAI,CAAC6C,cAAL;AACA,C,CAED;AACA;AACA;AACA;;;AACA,SAASZ,+BAAT,CAA0CN,QAA1C,EAAoDxC,UAApD,EAAiE;AAChE,QAAM2D,cAAc,GAAGnB,QAAQ,CAACoB,YAAT,CAAuB,CAAC,CAAxB,CAAvB;AACA,SAAO1B,4BAA4B,CAAEyB,cAAF,EAAkB3D,UAAlB,CAAnC;AACA,C,CAED;AACA;AACA;AACA;;;AACA,SAASkC,4BAAT,CAAuCM,QAAvC,EAAiDxC,UAAjD,EAA8D;AAC7D,QAAM;AAAEsD,IAAAA,UAAF;AAAcO,IAAAA;AAAd,MAA4BrB,QAAlC;;AACA,OAAM,MAAMY,iBAAZ,IAAiCpD,UAAjC,EAA8C;AAC7C,UAAM8D,UAAU,GAAGR,UAAU,GAAGA,UAAU,CAACS,YAAX,CAAyBX,iBAAzB,CAAH,GAAkDY,SAA/E;AACA,UAAMC,SAAS,GAAGJ,SAAS,GAAGA,SAAS,CAACE,YAAV,CAAwBX,iBAAxB,CAAH,GAAiDY,SAA5E;;AAEA,QAAKC,SAAS,KAAKH,UAAnB,EAAgC;AAC/B,aAAO,IAAP;AACA;AACD;;AACD,SAAO,KAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/twostepcaretmovement\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * This plugin enables the two-step caret (phantom) movement behavior for\n * {@link module:typing/twostepcaretmovement~TwoStepCaretMovement#registerAttribute registered attributes}\n * on arrow right (<kbd>→</kbd>) and left (<kbd>←</kbd>) key press.\n *\n * Thanks to this (phantom) caret movement the user is able to type before/after as well as at the\n * beginning/end of an attribute.\n *\n * **Note:** This plugin support right–to–left (Arabic, Hebrew, etc.) content by mirroring its behavior\n * but for the sake of simplicity examples showcase only left–to–right use–cases.\n *\n * # Forward movement\n *\n * ## \"Entering\" an attribute:\n *\n * When this plugin is enabled and registered for the `a` attribute and the selection is right before it\n * (at the attribute boundary), pressing the right arrow key will not move the selection but update its\n * attributes accordingly:\n *\n * * When enabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *    <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">{}bar</$text>\n *\n * * When disabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *   <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">b{}ar</$text>\n *\n *\n * ## \"Leaving\" an attribute:\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *    <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *   <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>b{}az\n *\n * # Backward movement\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *    <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *   <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">ba{}r</$text>b{}az\n *\n * # Multiple attributes\n *\n * * When enabled and many attributes starts or ends at the same position:\n *\n *   \t\t<$text a=\"true\" b=\"true\">bar</$text>{}baz\n *\n *    <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\" b=\"true\">bar{}</$text>baz\n *\n * * When enabled and one procedes another:\n *\n *   \t\t<$text a=\"true\">bar</$text><$text b=\"true\">{}bar</$text>\n *\n *    <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">bar{}</$text><$text b=\"true\">bar</$text>\n *\n */\nexport default class TwoStepCaretMovement extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TwoStepCaretMovement';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A set of attributes to handle.\n\t\t *\n\t\t * @protected\n\t\t * @property {module:typing/twostepcaretmovement~TwoStepCaretMovement}\n\t\t */\n\t\tthis.attributes = new Set();\n\n\t\t/**\n\t\t * The current UID of the overridden gravity, as returned by\n\t\t * {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._overrideUid = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\t\tconst locale = editor.locale;\n\n\t\tconst modelSelection = model.document.selection;\n\n\t\t// Listen to keyboard events and handle the caret movement according to the 2-step caret logic.\n\t\tthis.listenTo( view.document, 'arrowKey', ( evt, data ) => {\n\t\t\t// This implementation works only for collapsed selection.\n\t\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// When user tries to expand the selection or jump over the whole word or to the beginning/end then\n\t\t\t// two-steps movement is not necessary.\n\t\t\tif ( data.shiftKey || data.altKey || data.ctrlKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst arrowRightPressed = data.keyCode == keyCodes.arrowright;\n\t\t\tconst arrowLeftPressed = data.keyCode == keyCodes.arrowleft;\n\n\t\t\t// When neither left or right arrow has been pressed then do noting.\n\t\t\tif ( !arrowRightPressed && !arrowLeftPressed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contentDirection = locale.contentLanguageDirection;\n\t\t\tlet isMovementHandled = false;\n\n\t\t\tif ( ( contentDirection === 'ltr' && arrowRightPressed ) || ( contentDirection === 'rtl' && arrowLeftPressed ) ) {\n\t\t\t\tisMovementHandled = this._handleForwardMovement( data );\n\t\t\t} else {\n\t\t\t\tisMovementHandled = this._handleBackwardMovement( data );\n\t\t\t}\n\n\t\t\t// Stop the keydown event if the two-step caret movement handled it. Avoid collisions\n\t\t\t// with other features which may also take over the caret movement (e.g. Widget).\n\t\t\tif ( isMovementHandled === true ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: '$text', priority: 'highest' } );\n\n\t\t/**\n\t\t * A flag indicating that the automatic gravity restoration should not happen upon the next\n\t\t * gravity restoration.\n\t\t * {@link module:engine/model/selection~Selection#event:change:range} event.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._isNextGravityRestorationSkipped = false;\n\n\t\t// The automatic gravity restoration logic.\n\t\tthis.listenTo( modelSelection, 'change:range', ( evt, data ) => {\n\t\t\t// Skipping the automatic restoration is needed if the selection should change\n\t\t\t// but the gravity must remain overridden afterwards. See the #handleBackwardMovement\n\t\t\t// to learn more.\n\t\t\tif ( this._isNextGravityRestorationSkipped ) {\n\t\t\t\tthis._isNextGravityRestorationSkipped = false;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip automatic restore when the gravity is not overridden — simply, there's nothing to restore\n\t\t\t// at this moment.\n\t\t\tif ( !this._isGravityOverridden ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip automatic restore when the change is indirect AND the selection is at the attribute boundary.\n\t\t\t// It means that e.g. if the change was external (collaboration) and the user had their\n\t\t\t// selection around the link, its gravity should remain intact in this change:range event.\n\t\t\tif ( !data.directChange && isBetweenDifferentAttributes( modelSelection.getFirstPosition(), this.attributes ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._restoreGravity();\n\t\t} );\n\t}\n\n\t/**\n\t * Registers a given attribute for the two-step caret movement.\n\t *\n\t * @param {String} attribute Name of the attribute to handle.\n\t */\n\tregisterAttribute( attribute ) {\n\t\tthis.attributes.add( attribute );\n\t}\n\n\t/**\n\t * Updates the document selection and the view according to the two–step caret movement state\n\t * when moving **forwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n\t *\n\t * @private\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n\t * @returns {Boolean} `true` when the handler prevented caret movement\n\t */\n\t_handleForwardMovement( data ) {\n\t\tconst attributes = this.attributes;\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst position = selection.getFirstPosition();\n\t\t// DON'T ENGAGE 2-SCM if gravity is already overridden. It means that we just entered\n\t\t//\n\t\t// \t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n\t\t//\n\t\t// or left the attribute\n\t\t//\n\t\t// \t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n\t\t//\n\t\t// and the gravity will be restored automatically.\n\t\tif ( this._isGravityOverridden ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// DON'T ENGAGE 2-SCM when the selection is at the beginning of the block AND already has the\n\t\t// attribute:\n\t\t// * when the selection was initially set there using the mouse,\n\t\t// * when the editor has just started\n\t\t//\n\t\t//\t\t<paragraph><$text attribute>{}bar</$text>baz</paragraph>\n\t\t//\n\t\tif ( position.isAtStart && hasAnyAttribute( selection, attributes ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// ENGAGE 2-SCM When at least one of the observed attributes changes its value (incl. starts, ends).\n\t\t//\n\t\t//\t\t<paragraph>foo<$text attribute>bar{}</$text>baz</paragraph>\n\t\t//\t\t<paragraph>foo<$text attribute>bar{}</$text><$text otherAttribute>baz</$text></paragraph>\n\t\t//\t\t<paragraph>foo<$text attribute=1>bar{}</$text><$text attribute=2>baz</$text></paragraph>\n\t\t//\t\t<paragraph>foo{}<$text attribute>bar</$text>baz</paragraph>\n\t\t//\n\t\tif ( isBetweenDifferentAttributes( position, attributes ) ) {\n\t\t\tpreventCaretMovement( data );\n\t\t\tthis._overrideGravity();\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the document selection and the view according to the two–step caret movement state\n\t * when moving **backwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n\t *\n\t * @private\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n\t * @returns {Boolean} `true` when the handler prevented caret movement\n\t */\n\t_handleBackwardMovement( data ) {\n\t\tconst attributes = this.attributes;\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst position = selection.getFirstPosition();\n\n\t\t// When the gravity is already overridden (by this plugin), it means we are on the two-step position.\n\t\t// Prevent the movement, restore the gravity and update selection attributes.\n\t\t//\n\t\t//\t\t<paragraph>foo<$text attribute=1>bar</$text><$text attribute=2>{}baz</$text></paragraph>\n\t\t//\t\t<paragraph>foo<$text attribute>bar</$text><$text otherAttribute>{}baz</$text></paragraph>\n\t\t//\t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n\t\t//\t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n\t\t//\n\t\tif ( this._isGravityOverridden ) {\n\t\t\tpreventCaretMovement( data );\n\t\t\tthis._restoreGravity();\n\t\t\tsetSelectionAttributesFromTheNodeBefore( model, attributes, position );\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\t// REMOVE SELECTION ATTRIBUTE when restoring gravity towards a non-existent content at the\n\t\t\t// beginning of the block.\n\t\t\t//\n\t\t\t// \t\t<paragraph>{}<$text attribute>bar</$text></paragraph>\n\t\t\t//\n\t\t\tif ( position.isAtStart ) {\n\t\t\t\tif ( hasAnyAttribute( selection, attributes ) ) {\n\t\t\t\t\tpreventCaretMovement( data );\n\t\t\t\t\tsetSelectionAttributesFromTheNodeBefore( model, attributes, position );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// When we are moving from natural gravity, to the position of the 2SCM, we need to override the gravity,\n\t\t\t// and make sure it won't be restored. Unless it's at the end of the block and an observed attribute.\n\t\t\t// We need to check if the caret is a one position before the attribute boundary:\n\t\t\t//\n\t\t\t//\t\t<paragraph>foo<$text attribute=1>bar</$text><$text attribute=2>b{}az</$text></paragraph>\n\t\t\t//\t\t<paragraph>foo<$text attribute>bar</$text><$text otherAttribute>b{}az</$text></paragraph>\n\t\t\t//\t\t<paragraph>foo<$text attribute>b{}ar</$text>baz</paragraph>\n\t\t\t//\t\t<paragraph>foo<$text attribute>bar</$text>b{}az</paragraph>\n\t\t\t//\n\t\t\tif ( isStepAfterAnyAttributeBoundary( position, attributes ) ) {\n\t\t\t\t// ENGAGE 2-SCM if the selection has no attribute. This may happen when the user\n\t\t\t\t// left the attribute using a FORWARD 2-SCM.\n\t\t\t\t//\n\t\t\t\t// \t\t<paragraph><$text attribute>bar</$text>{}</paragraph>\n\t\t\t\t//\n\t\t\t\tif (\n\t\t\t\t\tposition.isAtEnd &&\n\t\t\t\t\t!hasAnyAttribute( selection, attributes ) &&\n\t\t\t\t\tisBetweenDifferentAttributes( position, attributes )\n\t\t\t\t) {\n\t\t\t\t\tpreventCaretMovement( data );\n\t\t\t\t\tsetSelectionAttributesFromTheNodeBefore( model, attributes, position );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// Skip the automatic gravity restore upon the next selection#change:range event.\n\t\t\t\t// If not skipped, it would automatically restore the gravity, which should remain\n\t\t\t\t// overridden.\n\t\t\t\tthis._isNextGravityRestorationSkipped = true;\n\t\t\t\tthis._overrideGravity();\n\n\t\t\t\t// Don't return \"true\" here because we didn't call _preventCaretMovement.\n\t\t\t\t// Returning here will destabilize the filler logic, which also listens to\n\t\t\t\t// keydown (and the event would be stopped).\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * `true` when the gravity is overridden for the plugin.\n\t *\n\t * @readonly\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _isGravityOverridden() {\n\t\treturn !!this._overrideUid;\n\t}\n\n\t/**\n\t * Overrides the gravity using the {@link module:engine/model/writer~Writer model writer}\n\t * and stores the information about this fact in the {@link #_overrideUid}.\n\t *\n\t * A shorthand for {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n\t *\n\t * @private\n\t */\n\t_overrideGravity() {\n\t\tthis._overrideUid = this.editor.model.change( writer => {\n\t\t\treturn writer.overrideSelectionGravity();\n\t\t} );\n\t}\n\n\t/**\n\t * Restores the gravity using the {@link module:engine/model/writer~Writer model writer}.\n\t *\n\t * A shorthand for {@link module:engine/model/writer~Writer#restoreSelectionGravity}.\n\t *\n\t * @private\n\t */\n\t_restoreGravity() {\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.restoreSelectionGravity( this._overrideUid );\n\t\t\tthis._overrideUid = null;\n\t\t} );\n\t}\n}\n\n// Checks whether the selection has any of given attributes.\n//\n// @param {module:engine/model/documentselection~DocumentSelection} selection\n// @param {Iterable.<String>} attributes\nfunction hasAnyAttribute( selection, attributes ) {\n\tfor ( const observedAttribute of attributes ) {\n\t\tif ( selection.hasAttribute( observedAttribute ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n// Applies the given attributes to the current selection using using the\n// values from the node before the current position. Uses\n// the {@link module:engine/model/writer~Writer model writer}.\n//\n// @param {module:engine/model/model~Model}\n// @param {Iterable.<String>} attributess\n// @param {module:engine/model/position~Position} position\nfunction setSelectionAttributesFromTheNodeBefore( model, attributes, position ) {\n\tconst nodeBefore = position.nodeBefore;\n\tmodel.change( writer => {\n\t\tif ( nodeBefore ) {\n\t\t\twriter.setSelectionAttribute( nodeBefore.getAttributes() );\n\t\t} else {\n\t\t\twriter.removeSelectionAttribute( attributes );\n\t\t}\n\t} );\n}\n\n// Prevents the caret movement in the view by calling `preventDefault` on the event data.\n//\n// @alias data.preventDefault\nfunction preventCaretMovement( data ) {\n\tdata.preventDefault();\n}\n\n// Checks whether the step before `isBetweenDifferentAttributes()`.\n//\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\nfunction isStepAfterAnyAttributeBoundary( position, attributes ) {\n\tconst positionBefore = position.getShiftedBy( -1 );\n\treturn isBetweenDifferentAttributes( positionBefore, attributes );\n}\n\n// Checks whether the given position is between different values of given attributes.\n//\n// @param {module:engine/model/position~Position} position\n// @param {Iterable.<String>} attributes\nfunction isBetweenDifferentAttributes( position, attributes ) {\n\tconst { nodeBefore, nodeAfter } = position;\n\tfor ( const observedAttribute of attributes ) {\n\t\tconst attrBefore = nodeBefore ? nodeBefore.getAttribute( observedAttribute ) : undefined;\n\t\tconst attrAfter = nodeAfter ? nodeAfter.getAttribute( observedAttribute ) : undefined;\n\n\t\tif ( attrAfter !== attrBefore ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n"]},"metadata":{},"sourceType":"module"}