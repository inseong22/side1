{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/utils\n */\n\n/**\n * Normalizes the {@link module:font/fontfamily~FontFamilyConfig#options configuration options}\n * to the {@link module:font/fontfamily~FontFamilyOption} format.\n *\n * @param {Array.<String|Object>} configuredOptions An array of options taken from the configuration.\n * @returns {Array.<module:font/fontfamily~FontFamilyOption>}\n */\nexport function normalizeOptions(configuredOptions) {\n  // Convert options to objects.\n  return configuredOptions.map(getOptionDefinition) // Filter out undefined values that `getOptionDefinition` might return.\n  .filter(option => !!option);\n} // Returns an option definition either created from string shortcut.\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n//\n// @param {String|Object} option\n// @returns {undefined|module:font/fontfamily~FontFamilyOption}\n\nfunction getOptionDefinition(option) {\n  // Treat any object as full item definition provided by user in configuration.\n  if (typeof option === 'object') {\n    return option;\n  } // Handle 'default' string as a special case. It will be used to remove the fontFamily attribute.\n\n\n  if (option === 'default') {\n    return {\n      title: 'Default',\n      model: undefined\n    };\n  } // Ignore values that we cannot parse to a definition.\n\n\n  if (typeof option !== 'string') {\n    return;\n  } // Return font family definition from font string.\n\n\n  return generateFontPreset(option);\n} // Creates a predefined preset for pixel size. It deconstructs font-family like string into full configuration option.\n// A font definition is passed as coma delimited set of font family names. Font names might be quoted.\n//\n// @param {String} A font definition form configuration.\n\n\nfunction generateFontPreset(fontDefinition) {\n  // Remove quotes from font names. They will be normalized later.\n  const fontNames = fontDefinition.replace(/\"|'/g, '').split(','); // The first matched font name will be used as dropdown list item title and as model value.\n\n  const firstFontName = fontNames[0]; // CSS-compatible font names.\n\n  const cssFontNames = fontNames.map(normalizeFontNameForCSS).join(', ');\n  return {\n    title: firstFontName,\n    model: cssFontNames,\n    view: {\n      name: 'span',\n      styles: {\n        'font-family': cssFontNames\n      },\n      priority: 7\n    }\n  };\n} // Normalizes font name for the style attribute. It adds braces (') if font name contains spaces.\n//\n// @param {String} fontName\n// @returns {String}\n\n\nfunction normalizeFontNameForCSS(fontName) {\n  fontName = fontName.trim(); // Compound font names should be quoted.\n\n  if (fontName.indexOf(' ') > 0) {\n    fontName = `'${fontName}'`;\n  }\n\n  return fontName;\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/fontfamily/utils.js"],"names":["normalizeOptions","configuredOptions","map","getOptionDefinition","filter","option","title","model","undefined","generateFontPreset","fontDefinition","fontNames","replace","split","firstFontName","cssFontNames","normalizeFontNameForCSS","join","view","name","styles","priority","fontName","trim","indexOf"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA2BC,iBAA3B,EAA+C;AACrD;AACA,SAAOA,iBAAiB,CACtBC,GADK,CACAC,mBADA,EAEN;AAFM,GAGLC,MAHK,CAGGC,MAAM,IAAI,CAAC,CAACA,MAHf,CAAP;AAIA,C,CAED;AACA;AACA;AACA;AACA;;AACA,SAASF,mBAAT,CAA8BE,MAA9B,EAAuC;AACtC;AACA,MAAK,OAAOA,MAAP,KAAkB,QAAvB,EAAkC;AACjC,WAAOA,MAAP;AACA,GAJqC,CAMtC;;;AACA,MAAKA,MAAM,KAAK,SAAhB,EAA4B;AAC3B,WAAO;AACNC,MAAAA,KAAK,EAAE,SADD;AAENC,MAAAA,KAAK,EAAEC;AAFD,KAAP;AAIA,GAZqC,CActC;;;AACA,MAAK,OAAOH,MAAP,KAAkB,QAAvB,EAAkC;AACjC;AACA,GAjBqC,CAmBtC;;;AACA,SAAOI,kBAAkB,CAAEJ,MAAF,CAAzB;AACA,C,CAED;AACA;AACA;AACA;;;AACA,SAASI,kBAAT,CAA6BC,cAA7B,EAA8C;AAC7C;AACA,QAAMC,SAAS,GAAGD,cAAc,CAACE,OAAf,CAAwB,MAAxB,EAAgC,EAAhC,EAAqCC,KAArC,CAA4C,GAA5C,CAAlB,CAF6C,CAI7C;;AACA,QAAMC,aAAa,GAAGH,SAAS,CAAE,CAAF,CAA/B,CAL6C,CAO7C;;AACA,QAAMI,YAAY,GAAGJ,SAAS,CAACT,GAAV,CAAec,uBAAf,EAAyCC,IAAzC,CAA+C,IAA/C,CAArB;AAEA,SAAO;AACNX,IAAAA,KAAK,EAAEQ,aADD;AAENP,IAAAA,KAAK,EAAEQ,YAFD;AAGNG,IAAAA,IAAI,EAAE;AACLC,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,MAAM,EAAE;AACP,uBAAeL;AADR,OAFH;AAKLM,MAAAA,QAAQ,EAAE;AALL;AAHA,GAAP;AAWA,C,CAED;AACA;AACA;AACA;;;AACA,SAASL,uBAAT,CAAkCM,QAAlC,EAA6C;AAC5CA,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,IAAT,EAAX,CAD4C,CAG5C;;AACA,MAAKD,QAAQ,CAACE,OAAT,CAAkB,GAAlB,IAA0B,CAA/B,EAAmC;AAClCF,IAAAA,QAAQ,GAAI,IAAIA,QAAU,GAA1B;AACA;;AAED,SAAOA,QAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/utils\n */\n\n/**\n * Normalizes the {@link module:font/fontfamily~FontFamilyConfig#options configuration options}\n * to the {@link module:font/fontfamily~FontFamilyOption} format.\n *\n * @param {Array.<String|Object>} configuredOptions An array of options taken from the configuration.\n * @returns {Array.<module:font/fontfamily~FontFamilyOption>}\n */\nexport function normalizeOptions( configuredOptions ) {\n\t// Convert options to objects.\n\treturn configuredOptions\n\t\t.map( getOptionDefinition )\n\t\t// Filter out undefined values that `getOptionDefinition` might return.\n\t\t.filter( option => !!option );\n}\n\n// Returns an option definition either created from string shortcut.\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n//\n// @param {String|Object} option\n// @returns {undefined|module:font/fontfamily~FontFamilyOption}\nfunction getOptionDefinition( option ) {\n\t// Treat any object as full item definition provided by user in configuration.\n\tif ( typeof option === 'object' ) {\n\t\treturn option;\n\t}\n\n\t// Handle 'default' string as a special case. It will be used to remove the fontFamily attribute.\n\tif ( option === 'default' ) {\n\t\treturn {\n\t\t\ttitle: 'Default',\n\t\t\tmodel: undefined\n\t\t};\n\t}\n\n\t// Ignore values that we cannot parse to a definition.\n\tif ( typeof option !== 'string' ) {\n\t\treturn;\n\t}\n\n\t// Return font family definition from font string.\n\treturn generateFontPreset( option );\n}\n\n// Creates a predefined preset for pixel size. It deconstructs font-family like string into full configuration option.\n// A font definition is passed as coma delimited set of font family names. Font names might be quoted.\n//\n// @param {String} A font definition form configuration.\nfunction generateFontPreset( fontDefinition ) {\n\t// Remove quotes from font names. They will be normalized later.\n\tconst fontNames = fontDefinition.replace( /\"|'/g, '' ).split( ',' );\n\n\t// The first matched font name will be used as dropdown list item title and as model value.\n\tconst firstFontName = fontNames[ 0 ];\n\n\t// CSS-compatible font names.\n\tconst cssFontNames = fontNames.map( normalizeFontNameForCSS ).join( ', ' );\n\n\treturn {\n\t\ttitle: firstFontName,\n\t\tmodel: cssFontNames,\n\t\tview: {\n\t\t\tname: 'span',\n\t\t\tstyles: {\n\t\t\t\t'font-family': cssFontNames\n\t\t\t},\n\t\t\tpriority: 7\n\t\t}\n\t};\n}\n\n// Normalizes font name for the style attribute. It adds braces (') if font name contains spaces.\n//\n// @param {String} fontName\n// @returns {String}\nfunction normalizeFontNameForCSS( fontName ) {\n\tfontName = fontName.trim();\n\n\t// Compound font names should be quoted.\n\tif ( fontName.indexOf( ' ' ) > 0 ) {\n\t\tfontName = `'${ fontName }'`;\n\t}\n\n\treturn fontName;\n}\n"]},"metadata":{},"sourceType":"module"}