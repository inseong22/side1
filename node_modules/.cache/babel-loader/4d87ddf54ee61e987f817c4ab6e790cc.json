{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/fontsizeui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { normalizeOptions } from './utils';\nimport { FONT_SIZE } from '../utils';\nimport fontSizeIcon from '../../theme/icons/font-size.svg';\nimport '../../theme/fontsize.css';\n/**\n * The font size UI plugin. It introduces the `'fontSize'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontSizeUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FontSizeUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n\n    const options = this._getLocalizedOptions();\n\n    const command = editor.commands.get(FONT_SIZE); // Register UI component.\n\n    editor.ui.componentFactory.add(FONT_SIZE, locale => {\n      const dropdownView = createDropdown(locale);\n      addListToDropdown(dropdownView, _prepareListOptions(options, command)); // Create dropdown model.\n\n      dropdownView.buttonView.set({\n        label: t('Font Size'),\n        icon: fontSizeIcon,\n        tooltip: true\n      });\n      dropdownView.extendTemplate({\n        attributes: {\n          class: ['ck-font-size-dropdown']\n        }\n      });\n      dropdownView.bind('isEnabled').to(command); // Execute command when an item from the dropdown is selected.\n\n      this.listenTo(dropdownView, 'execute', evt => {\n        editor.execute(evt.source.commandName, {\n          value: evt.source.commandParam\n        });\n        editor.editing.view.focus();\n      });\n      return dropdownView;\n    });\n  }\n  /**\n   * Returns options as defined in `config.fontSize.options` but processed to account for\n   * editor localization, i.e. to display {@link module:font/fontsize~FontSizeOption}\n   * in the correct language.\n   *\n   * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n   * when the user configuration is defined because the editor does not exist yet.\n   *\n   * @private\n   * @returns {Array.<module:font/fontsize~FontSizeOption>}.\n   */\n\n\n  _getLocalizedOptions() {\n    const editor = this.editor;\n    const t = editor.t;\n    const localizedTitles = {\n      Default: t('Default'),\n      Tiny: t('Tiny'),\n      Small: t('Small'),\n      Big: t('Big'),\n      Huge: t('Huge')\n    };\n    const options = normalizeOptions(editor.config.get(FONT_SIZE).options);\n    return options.map(option => {\n      const title = localizedTitles[option.title];\n\n      if (title && title != option.title) {\n        // Clone the option to avoid altering the original `namedPresets` from `./utils.js`.\n        option = Object.assign({}, option, {\n          title\n        });\n      }\n\n      return option;\n    });\n  }\n\n} // Prepares FontSize dropdown items.\n// @private\n// @param {Array.<module:font/fontsize~FontSizeOption>} options\n// @param {module:font/fontsize/fontsizecommand~FontSizeCommand} command\n\nfunction _prepareListOptions(options, command) {\n  const itemDefinitions = new Collection();\n\n  for (const option of options) {\n    const def = {\n      type: 'button',\n      model: new Model({\n        commandName: FONT_SIZE,\n        commandParam: option.model,\n        label: option.title,\n        class: 'ck-fontsize-option',\n        withText: true\n      })\n    };\n\n    if (option.view && option.view.styles) {\n      def.model.set('labelStyle', `font-size:${option.view.styles['font-size']}`);\n    }\n\n    if (option.view && option.view.classes) {\n      def.model.set('class', `${def.model.class} ${option.view.classes}`);\n    }\n\n    def.model.bind('isOn').to(command, 'value', value => value === option.model); // Add the option to the collection.\n\n    itemDefinitions.add(def);\n  }\n\n  return itemDefinitions;\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/fontsize/fontsizeui.js"],"names":["Plugin","Model","createDropdown","addListToDropdown","Collection","normalizeOptions","FONT_SIZE","fontSizeIcon","FontSizeUI","pluginName","init","editor","t","options","_getLocalizedOptions","command","commands","get","ui","componentFactory","add","locale","dropdownView","_prepareListOptions","buttonView","set","label","icon","tooltip","extendTemplate","attributes","class","bind","to","listenTo","evt","execute","source","commandName","value","commandParam","editing","view","focus","localizedTitles","Default","Tiny","Small","Big","Huge","config","map","option","title","Object","assign","itemDefinitions","def","type","model","withText","styles","classes"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/fontsizeui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\n\nimport { normalizeOptions } from './utils';\nimport { FONT_SIZE } from '../utils';\n\nimport fontSizeIcon from '../../theme/icons/font-size.svg';\nimport '../../theme/fontsize.css';\n\n/**\n * The font size UI plugin. It introduces the `'fontSize'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FontSizeUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'FontSizeUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\tconst options = this._getLocalizedOptions();\n\n\t\tconst command = editor.commands.get( FONT_SIZE );\n\n\t\t// Register UI component.\n\t\teditor.ui.componentFactory.add( FONT_SIZE, locale => {\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\taddListToDropdown( dropdownView, _prepareListOptions( options, command ) );\n\n\t\t\t// Create dropdown model.\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tlabel: t( 'Font Size' ),\n\t\t\t\ticon: fontSizeIcon,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tdropdownView.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: [\n\t\t\t\t\t\t'ck-font-size-dropdown'\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\t// Execute command when an item from the dropdown is selected.\n\t\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\t\teditor.execute( evt.source.commandName, { value: evt.source.commandParam } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n\n\t/**\n\t * Returns options as defined in `config.fontSize.options` but processed to account for\n\t * editor localization, i.e. to display {@link module:font/fontsize~FontSizeOption}\n\t * in the correct language.\n\t *\n\t * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n\t * when the user configuration is defined because the editor does not exist yet.\n\t *\n\t * @private\n\t * @returns {Array.<module:font/fontsize~FontSizeOption>}.\n\t */\n\t_getLocalizedOptions() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\tconst localizedTitles = {\n\t\t\tDefault: t( 'Default' ),\n\t\t\tTiny: t( 'Tiny' ),\n\t\t\tSmall: t( 'Small' ),\n\t\t\tBig: t( 'Big' ),\n\t\t\tHuge: t( 'Huge' )\n\t\t};\n\n\t\tconst options = normalizeOptions( editor.config.get( FONT_SIZE ).options );\n\n\t\treturn options.map( option => {\n\t\t\tconst title = localizedTitles[ option.title ];\n\n\t\t\tif ( title && title != option.title ) {\n\t\t\t\t// Clone the option to avoid altering the original `namedPresets` from `./utils.js`.\n\t\t\t\toption = Object.assign( {}, option, { title } );\n\t\t\t}\n\n\t\t\treturn option;\n\t\t} );\n\t}\n}\n\n// Prepares FontSize dropdown items.\n// @private\n// @param {Array.<module:font/fontsize~FontSizeOption>} options\n// @param {module:font/fontsize/fontsizecommand~FontSizeCommand} command\nfunction _prepareListOptions( options, command ) {\n\tconst itemDefinitions = new Collection();\n\n\tfor ( const option of options ) {\n\t\tconst def = {\n\t\t\ttype: 'button',\n\t\t\tmodel: new Model( {\n\t\t\t\tcommandName: FONT_SIZE,\n\t\t\t\tcommandParam: option.model,\n\t\t\t\tlabel: option.title,\n\t\t\t\tclass: 'ck-fontsize-option',\n\t\t\t\twithText: true\n\t\t\t} )\n\t\t};\n\n\t\tif ( option.view && option.view.styles ) {\n\t\t\tdef.model.set( 'labelStyle', `font-size:${ option.view.styles[ 'font-size' ] }` );\n\t\t}\n\n\t\tif ( option.view && option.view.classes ) {\n\t\t\tdef.model.set( 'class', `${ def.model.class } ${ option.view.classes }` );\n\t\t}\n\n\t\tdef.model.bind( 'isOn' ).to( command, 'value', value => value === option.model );\n\n\t\t// Add the option to the collection.\n\t\titemDefinitions.add( def );\n\t}\n\n\treturn itemDefinitions;\n}\n"]},"metadata":{},"sourceType":"module"}