{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizehandles\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { WidgetResize } from 'ckeditor5/src/widget';\nimport ImageLoadObserver from '../image/imageloadobserver';\nconst RESIZABLE_IMAGES_CSS_SELECTOR = 'figure.image.ck-widget > img,' + 'figure.image.ck-widget > picture > img,' + 'figure.image.ck-widget > a > img,' + 'figure.image.ck-widget > a > picture > img,' + 'span.image-inline.ck-widget > img,' + 'span.image-inline.ck-widget > picture > img';\nconst IMAGE_WIDGETS_CLASSES_MATCH_REGEXP = /(image|image-inline)/;\nconst RESIZED_IMAGE_CLASS = 'image_resized';\n/**\n * The image resize by handles feature.\n *\n * It adds the ability to resize each image using handles or manually by\n * {@link module:image/imageresize/imageresizebuttons~ImageResizeButtons} buttons.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageResizeHandles extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [WidgetResize];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageResizeHandles';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const command = this.editor.commands.get('resizeImage');\n    this.bind('isEnabled').to(command);\n\n    this._setupResizerCreator();\n  }\n  /**\n   * Attaches the listeners responsible for creating a resizer for each image, except for images inside the HTML embed preview.\n   *\n   * @private\n   */\n\n\n  _setupResizerCreator() {\n    const editor = this.editor;\n    const editingView = editor.editing.view;\n    editingView.addObserver(ImageLoadObserver);\n    this.listenTo(editingView.document, 'imageLoaded', (evt, domEvent) => {\n      // The resizer must be attached only to images loaded by the `ImageInsert`, `ImageUpload` or `LinkImage` plugins.\n      if (!domEvent.target.matches(RESIZABLE_IMAGES_CSS_SELECTOR)) {\n        return;\n      }\n\n      const domConverter = editor.editing.view.domConverter;\n      const imageView = domConverter.domToView(domEvent.target);\n      const widgetView = imageView.findAncestor({\n        classes: IMAGE_WIDGETS_CLASSES_MATCH_REGEXP\n      });\n      let resizer = this.editor.plugins.get(WidgetResize).getResizerByViewElement(widgetView);\n\n      if (resizer) {\n        // There are rare cases when the image will be triggered multiple times for the same widget, e.g. when\n        // the image's source was changed after upload (https://github.com/ckeditor/ckeditor5/pull/8108#issuecomment-708302992).\n        resizer.redraw();\n        return;\n      }\n\n      const mapper = editor.editing.mapper;\n      const imageModel = mapper.toModelElement(widgetView);\n      resizer = editor.plugins.get(WidgetResize).attachTo({\n        unit: editor.config.get('image.resizeUnit'),\n        modelElement: imageModel,\n        viewElement: widgetView,\n        editor,\n\n        getHandleHost(domWidgetElement) {\n          return domWidgetElement.querySelector('img');\n        },\n\n        getResizeHost() {\n          // Return the model image element parent to avoid setting an inline element (<a>/<span>) as a resize host.\n          return domConverter.viewToDom(mapper.toViewElement(imageModel.parent));\n        },\n\n        // TODO consider other positions.\n        isCentered() {\n          const imageStyle = imageModel.getAttribute('imageStyle');\n          return !imageStyle || imageStyle == 'block' || imageStyle == 'alignCenter';\n        },\n\n        onCommit(newValue) {\n          // Get rid of the CSS class in case the command execution that follows is unsuccessful\n          // (e.g. Track Changes can override it and the new dimensions will not apply). Otherwise,\n          // the presence of the class and the absence of the width style will cause it to take 100%\n          // of the horizontal space.\n          editingView.change(writer => {\n            writer.removeClass(RESIZED_IMAGE_CLASS, widgetView);\n          });\n          editor.execute('resizeImage', {\n            width: newValue\n          });\n        }\n\n      });\n      resizer.on('updateSize', () => {\n        if (!widgetView.hasClass(RESIZED_IMAGE_CLASS)) {\n          editingView.change(writer => {\n            writer.addClass(RESIZED_IMAGE_CLASS, widgetView);\n          });\n        }\n      });\n      resizer.bind('isEnabled').to(this);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imageresize/imageresizehandles.js"],"names":["Plugin","WidgetResize","ImageLoadObserver","RESIZABLE_IMAGES_CSS_SELECTOR","IMAGE_WIDGETS_CLASSES_MATCH_REGEXP","RESIZED_IMAGE_CLASS","ImageResizeHandles","requires","pluginName","init","command","editor","commands","get","bind","to","_setupResizerCreator","editingView","editing","view","addObserver","listenTo","document","evt","domEvent","target","matches","domConverter","imageView","domToView","widgetView","findAncestor","classes","resizer","plugins","getResizerByViewElement","redraw","mapper","imageModel","toModelElement","attachTo","unit","config","modelElement","viewElement","getHandleHost","domWidgetElement","querySelector","getResizeHost","viewToDom","toViewElement","parent","isCentered","imageStyle","getAttribute","onCommit","newValue","change","writer","removeClass","execute","width","on","hasClass","addClass"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizehandles\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { WidgetResize } from 'ckeditor5/src/widget';\n\nimport ImageLoadObserver from '../image/imageloadobserver';\n\nconst RESIZABLE_IMAGES_CSS_SELECTOR =\n\t'figure.image.ck-widget > img,' +\n\t'figure.image.ck-widget > picture > img,' +\n\t'figure.image.ck-widget > a > img,' +\n\t'figure.image.ck-widget > a > picture > img,' +\n\t'span.image-inline.ck-widget > img,' +\n\t'span.image-inline.ck-widget > picture > img';\n\nconst IMAGE_WIDGETS_CLASSES_MATCH_REGEXP = /(image|image-inline)/;\n\nconst RESIZED_IMAGE_CLASS = 'image_resized';\n\n/**\n * The image resize by handles feature.\n *\n * It adds the ability to resize each image using handles or manually by\n * {@link module:image/imageresize/imageresizebuttons~ImageResizeButtons} buttons.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageResizeHandles extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ WidgetResize ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageResizeHandles';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst command = this.editor.commands.get( 'resizeImage' );\n\t\tthis.bind( 'isEnabled' ).to( command );\n\n\t\tthis._setupResizerCreator();\n\t}\n\n\t/**\n\t * Attaches the listeners responsible for creating a resizer for each image, except for images inside the HTML embed preview.\n\t *\n\t * @private\n\t */\n\t_setupResizerCreator() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\teditingView.addObserver( ImageLoadObserver );\n\n\t\tthis.listenTo( editingView.document, 'imageLoaded', ( evt, domEvent ) => {\n\t\t\t// The resizer must be attached only to images loaded by the `ImageInsert`, `ImageUpload` or `LinkImage` plugins.\n\t\t\tif ( !domEvent.target.matches( RESIZABLE_IMAGES_CSS_SELECTOR ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst domConverter = editor.editing.view.domConverter;\n\t\t\tconst imageView = domConverter.domToView( domEvent.target );\n\t\t\tconst widgetView = imageView.findAncestor( { classes: IMAGE_WIDGETS_CLASSES_MATCH_REGEXP } );\n\t\t\tlet resizer = this.editor.plugins.get( WidgetResize ).getResizerByViewElement( widgetView );\n\n\t\t\tif ( resizer ) {\n\t\t\t\t// There are rare cases when the image will be triggered multiple times for the same widget, e.g. when\n\t\t\t\t// the image's source was changed after upload (https://github.com/ckeditor/ckeditor5/pull/8108#issuecomment-708302992).\n\t\t\t\tresizer.redraw();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst mapper = editor.editing.mapper;\n\t\t\tconst imageModel = mapper.toModelElement( widgetView );\n\n\t\t\tresizer = editor.plugins\n\t\t\t\t.get( WidgetResize )\n\t\t\t\t.attachTo( {\n\t\t\t\t\tunit: editor.config.get( 'image.resizeUnit' ),\n\n\t\t\t\t\tmodelElement: imageModel,\n\t\t\t\t\tviewElement: widgetView,\n\t\t\t\t\teditor,\n\n\t\t\t\t\tgetHandleHost( domWidgetElement ) {\n\t\t\t\t\t\treturn domWidgetElement.querySelector( 'img' );\n\t\t\t\t\t},\n\t\t\t\t\tgetResizeHost() {\n\t\t\t\t\t\t// Return the model image element parent to avoid setting an inline element (<a>/<span>) as a resize host.\n\t\t\t\t\t\treturn domConverter.viewToDom( mapper.toViewElement( imageModel.parent ) );\n\t\t\t\t\t},\n\t\t\t\t\t// TODO consider other positions.\n\t\t\t\t\tisCentered() {\n\t\t\t\t\t\tconst imageStyle = imageModel.getAttribute( 'imageStyle' );\n\n\t\t\t\t\t\treturn !imageStyle || imageStyle == 'block' || imageStyle == 'alignCenter';\n\t\t\t\t\t},\n\n\t\t\t\t\tonCommit( newValue ) {\n\t\t\t\t\t\t// Get rid of the CSS class in case the command execution that follows is unsuccessful\n\t\t\t\t\t\t// (e.g. Track Changes can override it and the new dimensions will not apply). Otherwise,\n\t\t\t\t\t\t// the presence of the class and the absence of the width style will cause it to take 100%\n\t\t\t\t\t\t// of the horizontal space.\n\t\t\t\t\t\teditingView.change( writer => {\n\t\t\t\t\t\t\twriter.removeClass( RESIZED_IMAGE_CLASS, widgetView );\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\teditor.execute( 'resizeImage', { width: newValue } );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\tresizer.on( 'updateSize', () => {\n\t\t\t\tif ( !widgetView.hasClass( RESIZED_IMAGE_CLASS ) ) {\n\t\t\t\t\teditingView.change( writer => {\n\t\t\t\t\t\twriter.addClass( RESIZED_IMAGE_CLASS, widgetView );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tresizer.bind( 'isEnabled' ).to( this );\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}