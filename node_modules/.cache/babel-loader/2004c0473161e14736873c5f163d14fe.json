{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\n\nexport function containerChildrenMutated(mutations) {\n  if (mutations.length == 0) {\n    return false;\n  } // Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\n\n  for (const mutation of mutations) {\n    if (mutation.type === 'children' && !getSingleTextNodeChange(mutation)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\n\nexport function getSingleTextNodeChange(mutation) {\n  // One new node.\n  if (mutation.newChildren.length - mutation.oldChildren.length != 1) {\n    return;\n  } // Which is text.\n\n\n  const diffResult = diff(mutation.oldChildren, mutation.newChildren, compareChildNodes);\n  const changes = diffToChanges(diffResult, mutation.newChildren); // In case of [ delete, insert, insert ] the previous check will not exit.\n\n  if (changes.length > 1) {\n    return;\n  }\n\n  const change = changes[0]; // Which is text.\n\n  if (!(!!change.values[0] && change.values[0].is('$text'))) {\n    return;\n  }\n\n  return change;\n}\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\n\nexport function compareChildNodes(oldChild, newChild) {\n  if (!!oldChild && oldChild.is('$text') && !!newChild && newChild.is('$text')) {\n    return oldChild.data === newChild.data;\n  } else {\n    return oldChild === newChild;\n  }\n}\n/**\n * Checks if <kbd>Shift</kbd> + <kbd>Delete</kbd> keystroke was pressed on a non-collapsed selection.\n *\n * This key combination has a special meaning on Windows machines and it should work in the same way as the `cut` event on a non-collapsed\n * selection.\n *\n * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData Event data.\n * @param {module:engine/view/document~Document} document The document instance on which the event has been fired.\n * @returns {Boolean}\n */\n\nexport function isShiftDeleteOnNonCollapsedSelection(domEventData, document) {\n  const selection = document.selection;\n  const isShiftDelete = domEventData.shiftKey && domEventData.keyCode === keyCodes.delete;\n  const isNonCollapsedSelection = !selection.isCollapsed;\n  return isShiftDelete && isNonCollapsedSelection;\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-typing/src/utils/utils.js"],"names":["diff","diffToChanges","keyCodes","containerChildrenMutated","mutations","length","mutation","type","getSingleTextNodeChange","newChildren","oldChildren","diffResult","compareChildNodes","changes","change","values","is","oldChild","newChild","data","isShiftDeleteOnNonCollapsedSelection","domEventData","document","selection","isShiftDelete","shiftKey","keyCode","delete","isNonCollapsedSelection","isCollapsed"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,oCAAjB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,SAASC,QAAT,QAAyB,wCAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAmCC,SAAnC,EAA+C;AACrD,MAAKA,SAAS,CAACC,MAAV,IAAoB,CAAzB,EAA6B;AAC5B,WAAO,KAAP;AACA,GAHoD,CAKrD;;;AACA,OAAM,MAAMC,QAAZ,IAAwBF,SAAxB,EAAoC;AACnC,QAAKE,QAAQ,CAACC,IAAT,KAAkB,UAAlB,IAAgC,CAACC,uBAAuB,CAAEF,QAAF,CAA7D,EAA4E;AAC3E,aAAO,IAAP;AACA;AACD;;AAED,SAAO,KAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,uBAAT,CAAkCF,QAAlC,EAA6C;AACnD;AACA,MAAKA,QAAQ,CAACG,WAAT,CAAqBJ,MAArB,GAA8BC,QAAQ,CAACI,WAAT,CAAqBL,MAAnD,IAA6D,CAAlE,EAAsE;AACrE;AACA,GAJkD,CAMnD;;;AACA,QAAMM,UAAU,GAAGX,IAAI,CAAEM,QAAQ,CAACI,WAAX,EAAwBJ,QAAQ,CAACG,WAAjC,EAA8CG,iBAA9C,CAAvB;AACA,QAAMC,OAAO,GAAGZ,aAAa,CAAEU,UAAF,EAAcL,QAAQ,CAACG,WAAvB,CAA7B,CARmD,CAUnD;;AACA,MAAKI,OAAO,CAACR,MAAR,GAAiB,CAAtB,EAA0B;AACzB;AACA;;AAED,QAAMS,MAAM,GAAGD,OAAO,CAAE,CAAF,CAAtB,CAfmD,CAiBnD;;AACA,MAAK,EAAG,CAAC,CAACC,MAAM,CAACC,MAAP,CAAe,CAAf,CAAF,IAAwBD,MAAM,CAACC,MAAP,CAAe,CAAf,EAAmBC,EAAnB,CAAuB,OAAvB,CAA3B,CAAL,EAAqE;AACpE;AACA;;AAED,SAAOF,MAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASF,iBAAT,CAA4BK,QAA5B,EAAsCC,QAAtC,EAAiD;AACvD,MAAK,CAAC,CAACD,QAAF,IAAcA,QAAQ,CAACD,EAAT,CAAa,OAAb,CAAd,IAAwC,CAAC,CAACE,QAA1C,IAAsDA,QAAQ,CAACF,EAAT,CAAa,OAAb,CAA3D,EAAoF;AACnF,WAAOC,QAAQ,CAACE,IAAT,KAAkBD,QAAQ,CAACC,IAAlC;AACA,GAFD,MAEO;AACN,WAAOF,QAAQ,KAAKC,QAApB;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,oCAAT,CAA+CC,YAA/C,EAA6DC,QAA7D,EAAwE;AAC9E,QAAMC,SAAS,GAAGD,QAAQ,CAACC,SAA3B;AACA,QAAMC,aAAa,GAAGH,YAAY,CAACI,QAAb,IAAyBJ,YAAY,CAACK,OAAb,KAAyBxB,QAAQ,CAACyB,MAAjF;AACA,QAAMC,uBAAuB,GAAG,CAACL,SAAS,CAACM,WAA3C;AAEA,SAAOL,aAAa,IAAII,uBAAxB;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\nexport function containerChildrenMutated( mutations ) {\n\tif ( mutations.length == 0 ) {\n\t\treturn false;\n\t}\n\n\t// Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\tfor ( const mutation of mutations ) {\n\t\tif ( mutation.type === 'children' && !getSingleTextNodeChange( mutation ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\nexport function getSingleTextNodeChange( mutation ) {\n\t// One new node.\n\tif ( mutation.newChildren.length - mutation.oldChildren.length != 1 ) {\n\t\treturn;\n\t}\n\n\t// Which is text.\n\tconst diffResult = diff( mutation.oldChildren, mutation.newChildren, compareChildNodes );\n\tconst changes = diffToChanges( diffResult, mutation.newChildren );\n\n\t// In case of [ delete, insert, insert ] the previous check will not exit.\n\tif ( changes.length > 1 ) {\n\t\treturn;\n\t}\n\n\tconst change = changes[ 0 ];\n\n\t// Which is text.\n\tif ( !( !!change.values[ 0 ] && change.values[ 0 ].is( '$text' ) ) ) {\n\t\treturn;\n\t}\n\n\treturn change;\n}\n\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\nexport function compareChildNodes( oldChild, newChild ) {\n\tif ( !!oldChild && oldChild.is( '$text' ) && !!newChild && newChild.is( '$text' ) ) {\n\t\treturn oldChild.data === newChild.data;\n\t} else {\n\t\treturn oldChild === newChild;\n\t}\n}\n\n/**\n * Checks if <kbd>Shift</kbd> + <kbd>Delete</kbd> keystroke was pressed on a non-collapsed selection.\n *\n * This key combination has a special meaning on Windows machines and it should work in the same way as the `cut` event on a non-collapsed\n * selection.\n *\n * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData Event data.\n * @param {module:engine/view/document~Document} document The document instance on which the event has been fired.\n * @returns {Boolean}\n */\nexport function isShiftDeleteOnNonCollapsedSelection( domEventData, document ) {\n\tconst selection = document.selection;\n\tconst isShiftDelete = domEventData.shiftKey && domEventData.keyCode === keyCodes.delete;\n\tconst isNonCollapsedSelection = !selection.isCollapsed;\n\n\treturn isShiftDelete && isNonCollapsedSelection;\n}\n"]},"metadata":{},"sourceType":"module"}