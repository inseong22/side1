{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/documentcolorcollection\n */\nimport { Collection, ObservableMixin, mix } from 'ckeditor5/src/utils';\n/**\n * A collection to store document colors. It enforces colors to be unique.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n * @extends module:utils/collection~Collection\n */\n\nexport default class DocumentColorCollection extends Collection {\n  constructor(options) {\n    super(options);\n    /**\n     * Indicates whether the document color collection is empty.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #isEmpty\n     */\n\n    this.set('isEmpty', true);\n    this.on('change', () => {\n      this.set('isEmpty', this.length === 0);\n    });\n  }\n  /**\n   * Adds a color to the document color collection.\n   *\n   * This method ensures that no color duplicates are inserted (compared using\n   * the color value of the {@link module:ui/colorgrid/colorgrid~ColorDefinition}).\n   *\n   * If the item does not have an ID, it will be automatically generated and set on the item.\n   *\n   * @chainable\n   * @param {module:ui/colorgrid/colorgrid~ColorDefinition} item\n   * @param {Number} [index] The position of the item in the collection. The item\n   * is pushed to the collection when `index` is not specified.\n   * @fires add\n   * @fires change\n   */\n\n\n  add(item, index) {\n    if (this.find(element => element.color === item.color)) {\n      // No duplicates are allowed.\n      return;\n    }\n\n    super.add(item, index);\n  }\n  /**\n   * Checks if an object with given colors is present in the document color collection.\n   *\n   * @param {String} color\n   * @returns {Boolean}\n   */\n\n\n  hasColor(color) {\n    return !!this.find(item => item.color === color);\n  }\n\n}\nmix(DocumentColorCollection, ObservableMixin);","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/documentcolorcollection.js"],"names":["Collection","ObservableMixin","mix","DocumentColorCollection","constructor","options","set","on","length","add","item","index","find","element","color","hasColor"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,UAAT,EAAqBC,eAArB,EAAsCC,GAAtC,QAAiD,qBAAjD;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,uBAAN,SAAsCH,UAAtC,CAAiD;AAC/DI,EAAAA,WAAW,CAAEC,OAAF,EAAY;AACtB,UAAOA,OAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,GAAL,CAAU,SAAV,EAAqB,IAArB;AAEA,SAAKC,EAAL,CAAS,QAAT,EAAmB,MAAM;AACxB,WAAKD,GAAL,CAAU,SAAV,EAAqB,KAAKE,MAAL,KAAgB,CAArC;AACA,KAFD;AAGA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,GAAG,CAAEC,IAAF,EAAQC,KAAR,EAAgB;AAClB,QAAK,KAAKC,IAAL,CAAWC,OAAO,IAAIA,OAAO,CAACC,KAAR,KAAkBJ,IAAI,CAACI,KAA7C,CAAL,EAA4D;AAC3D;AACA;AACA;;AAED,UAAML,GAAN,CAAWC,IAAX,EAAiBC,KAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCI,EAAAA,QAAQ,CAAED,KAAF,EAAU;AACjB,WAAO,CAAC,CAAC,KAAKF,IAAL,CAAWF,IAAI,IAAIA,IAAI,CAACI,KAAL,KAAeA,KAAlC,CAAT;AACA;;AAlD8D;AAqDhEZ,GAAG,CAAEC,uBAAF,EAA2BF,eAA3B,CAAH","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/documentcolorcollection\n */\n\nimport { Collection, ObservableMixin, mix } from 'ckeditor5/src/utils';\n\n/**\n * A collection to store document colors. It enforces colors to be unique.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n * @extends module:utils/collection~Collection\n */\nexport default class DocumentColorCollection extends Collection {\n\tconstructor( options ) {\n\t\tsuper( options );\n\n\t\t/**\n\t\t * Indicates whether the document color collection is empty.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEmpty\n\t\t */\n\t\tthis.set( 'isEmpty', true );\n\n\t\tthis.on( 'change', () => {\n\t\t\tthis.set( 'isEmpty', this.length === 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Adds a color to the document color collection.\n\t *\n\t * This method ensures that no color duplicates are inserted (compared using\n\t * the color value of the {@link module:ui/colorgrid/colorgrid~ColorDefinition}).\n\t *\n\t * If the item does not have an ID, it will be automatically generated and set on the item.\n\t *\n\t * @chainable\n\t * @param {module:ui/colorgrid/colorgrid~ColorDefinition} item\n\t * @param {Number} [index] The position of the item in the collection. The item\n\t * is pushed to the collection when `index` is not specified.\n\t * @fires add\n\t * @fires change\n\t */\n\tadd( item, index ) {\n\t\tif ( this.find( element => element.color === item.color ) ) {\n\t\t\t// No duplicates are allowed.\n\t\t\treturn;\n\t\t}\n\n\t\tsuper.add( item, index );\n\t}\n\n\t/**\n\t * Checks if an object with given colors is present in the document color collection.\n\t *\n\t * @param {String} color\n\t * @returns {Boolean}\n\t */\n\thasColor( color ) {\n\t\treturn !!this.find( item => item.color === color );\n\t}\n}\n\nmix( DocumentColorCollection, ObservableMixin );\n"]},"metadata":{},"sourceType":"module"}