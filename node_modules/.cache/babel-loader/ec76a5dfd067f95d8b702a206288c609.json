{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/ui/colorui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { createDropdown, normalizeColorOptions, getLocalizedColorOptions } from 'ckeditor5/src/ui';\nimport { addColorTableToDropdown } from '../utils';\n/**\n * The color UI plugin which isolates the common logic responsible for displaying dropdowns with color grids.\n *\n * It is used to create the `'fontBackgroundColor'` and `'fontColor'` dropdowns, each hosting\n * a {@link module:font/ui/colortableview~ColorTableView}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ColorUI extends Plugin {\n  /**\n   * Creates a plugin which introduces a dropdown with a pre–configured {@link module:font/ui/colortableview~ColorTableView}.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {Object} config The configuration object.\n   * @param {String} config.commandName The name of the command which will be executed when a color tile is clicked.\n   * @param {String} config.componentName The name of the dropdown in the {@link module:ui/componentfactory~ComponentFactory}\n   * and the configuration scope name in `editor.config`.\n   * @param {String} config.icon The SVG icon used by the dropdown.\n   * @param {String} config.dropdownLabel The label used by the dropdown.\n   */\n  constructor(editor, {\n    commandName,\n    icon,\n    componentName,\n    dropdownLabel\n  }) {\n    super(editor);\n    /**\n     * The name of the command which will be executed when a color tile is clicked.\n     *\n     * @type {String}\n     */\n\n    this.commandName = commandName;\n    /**\n     * The name of this component in the {@link module:ui/componentfactory~ComponentFactory}.\n     * Also the configuration scope name in `editor.config`.\n     *\n     * @type {String}\n     */\n\n    this.componentName = componentName;\n    /**\n     * The SVG icon used by the dropdown.\n     * @type {String}\n     */\n\n    this.icon = icon;\n    /**\n     * The label used by the dropdown.\n     *\n     * @type {String}\n     */\n\n    this.dropdownLabel = dropdownLabel;\n    /**\n     * The number of columns in the color grid.\n     *\n     * @type {Number}\n     */\n\n    this.columns = editor.config.get(`${this.componentName}.columns`);\n    /**\n     * Keeps a reference to {@link module:font/ui/colortableview~ColorTableView}.\n     *\n     * @member {module:font/ui/colortableview~ColorTableView}\n     */\n\n    this.colorTableView = undefined;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const locale = editor.locale;\n    const t = locale.t;\n    const command = editor.commands.get(this.commandName);\n    const colorsConfig = normalizeColorOptions(editor.config.get(this.componentName).colors);\n    const localizedColors = getLocalizedColorOptions(locale, colorsConfig);\n    const documentColorsCount = editor.config.get(`${this.componentName}.documentColors`); // Register the UI component.\n\n    editor.ui.componentFactory.add(this.componentName, locale => {\n      const dropdownView = createDropdown(locale);\n      this.colorTableView = addColorTableToDropdown({\n        dropdownView,\n        colors: localizedColors.map(option => ({\n          label: option.label,\n          color: option.model,\n          options: {\n            hasBorder: option.hasBorder\n          }\n        })),\n        columns: this.columns,\n        removeButtonLabel: t('Remove color'),\n        documentColorsLabel: documentColorsCount !== 0 ? t('Document colors') : undefined,\n        documentColorsCount: documentColorsCount === undefined ? this.columns : documentColorsCount\n      });\n      this.colorTableView.bind('selectedColor').to(command, 'value');\n      dropdownView.buttonView.set({\n        label: this.dropdownLabel,\n        icon: this.icon,\n        tooltip: true\n      });\n      dropdownView.extendTemplate({\n        attributes: {\n          class: 'ck-color-ui-dropdown'\n        }\n      });\n      dropdownView.bind('isEnabled').to(command);\n      dropdownView.on('execute', (evt, data) => {\n        editor.execute(this.commandName, data);\n        editor.editing.view.focus();\n      });\n      dropdownView.on('change:isOpen', (evt, name, isVisible) => {\n        // Grids rendering is deferred (#6192).\n        dropdownView.colorTableView.appendGrids();\n\n        if (isVisible) {\n          if (documentColorsCount !== 0) {\n            this.colorTableView.updateDocumentColors(editor.model, this.componentName);\n          }\n\n          this.colorTableView.updateSelectedColors();\n        }\n      });\n      return dropdownView;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-font/src/ui/colorui.js"],"names":["Plugin","createDropdown","normalizeColorOptions","getLocalizedColorOptions","addColorTableToDropdown","ColorUI","constructor","editor","commandName","icon","componentName","dropdownLabel","columns","config","get","colorTableView","undefined","init","locale","t","command","commands","colorsConfig","colors","localizedColors","documentColorsCount","ui","componentFactory","add","dropdownView","map","option","label","color","model","options","hasBorder","removeButtonLabel","documentColorsLabel","bind","to","buttonView","set","tooltip","extendTemplate","attributes","class","on","evt","data","execute","editing","view","focus","name","isVisible","appendGrids","updateDocumentColors","updateSelectedColors"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/ui/colorui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { createDropdown, normalizeColorOptions, getLocalizedColorOptions } from 'ckeditor5/src/ui';\n\nimport { addColorTableToDropdown } from '../utils';\n\n/**\n * The color UI plugin which isolates the common logic responsible for displaying dropdowns with color grids.\n *\n * It is used to create the `'fontBackgroundColor'` and `'fontColor'` dropdowns, each hosting\n * a {@link module:font/ui/colortableview~ColorTableView}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ColorUI extends Plugin {\n\t/**\n\t * Creates a plugin which introduces a dropdown with a pre–configured {@link module:font/ui/colortableview~ColorTableView}.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Object} config The configuration object.\n\t * @param {String} config.commandName The name of the command which will be executed when a color tile is clicked.\n\t * @param {String} config.componentName The name of the dropdown in the {@link module:ui/componentfactory~ComponentFactory}\n\t * and the configuration scope name in `editor.config`.\n\t * @param {String} config.icon The SVG icon used by the dropdown.\n\t * @param {String} config.dropdownLabel The label used by the dropdown.\n\t */\n\tconstructor( editor, { commandName, icon, componentName, dropdownLabel } ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The name of the command which will be executed when a color tile is clicked.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.commandName = commandName;\n\n\t\t/**\n\t\t * The name of this component in the {@link module:ui/componentfactory~ComponentFactory}.\n\t\t * Also the configuration scope name in `editor.config`.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.componentName = componentName;\n\n\t\t/**\n\t\t * The SVG icon used by the dropdown.\n\t\t * @type {String}\n\t\t */\n\t\tthis.icon = icon;\n\n\t\t/**\n\t\t * The label used by the dropdown.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.dropdownLabel = dropdownLabel;\n\n\t\t/**\n\t\t * The number of columns in the color grid.\n\t\t *\n\t\t * @type {Number}\n\t\t */\n\t\tthis.columns = editor.config.get( `${ this.componentName }.columns` );\n\n\t\t/**\n\t\t * Keeps a reference to {@link module:font/ui/colortableview~ColorTableView}.\n\t\t *\n\t\t * @member {module:font/ui/colortableview~ColorTableView}\n\t\t */\n\t\tthis.colorTableView = undefined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\t\tconst t = locale.t;\n\t\tconst command = editor.commands.get( this.commandName );\n\t\tconst colorsConfig = normalizeColorOptions( editor.config.get( this.componentName ).colors );\n\t\tconst localizedColors = getLocalizedColorOptions( locale, colorsConfig );\n\t\tconst documentColorsCount = editor.config.get( `${ this.componentName }.documentColors` );\n\n\t\t// Register the UI component.\n\t\teditor.ui.componentFactory.add( this.componentName, locale => {\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\tthis.colorTableView = addColorTableToDropdown( {\n\t\t\t\tdropdownView,\n\t\t\t\tcolors: localizedColors.map( option => ( {\n\t\t\t\t\tlabel: option.label,\n\t\t\t\t\tcolor: option.model,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\thasBorder: option.hasBorder\n\t\t\t\t\t}\n\t\t\t\t} ) ),\n\t\t\t\tcolumns: this.columns,\n\t\t\t\tremoveButtonLabel: t( 'Remove color' ),\n\t\t\t\tdocumentColorsLabel: documentColorsCount !== 0 ? t( 'Document colors' ) : undefined,\n\t\t\t\tdocumentColorsCount: documentColorsCount === undefined ? this.columns : documentColorsCount\n\t\t\t} );\n\n\t\t\tthis.colorTableView.bind( 'selectedColor' ).to( command, 'value' );\n\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tlabel: this.dropdownLabel,\n\t\t\t\ticon: this.icon,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tdropdownView.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: 'ck-color-ui-dropdown'\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\tdropdownView.on( 'execute', ( evt, data ) => {\n\t\t\t\teditor.execute( this.commandName, data );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tdropdownView.on( 'change:isOpen', ( evt, name, isVisible ) => {\n\t\t\t\t// Grids rendering is deferred (#6192).\n\t\t\t\tdropdownView.colorTableView.appendGrids();\n\n\t\t\t\tif ( isVisible ) {\n\t\t\t\t\tif ( documentColorsCount !== 0 ) {\n\t\t\t\t\t\tthis.colorTableView.updateDocumentColors( editor.model, this.componentName );\n\t\t\t\t\t}\n\t\t\t\t\tthis.colorTableView.updateSelectedColors();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}