{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"color\", \"inputType\", \"rectProps\", \"onChange\"];\nimport React, { Fragment } from 'react';\nimport { hsvaToRgbaString, color as handleColor, validHex, hexToHsva, hsvaToHex, hsvaToHexa } from '@uiw/color-convert';\nimport Github, { GithubPlacement } from '@uiw/react-color-github';\nimport Saturation from '@uiw/react-color-saturation';\nimport Hue from '@uiw/react-color-hue';\nimport Alpha from '@uiw/react-color-alpha';\nimport EditableInput from '@uiw/react-color-editable-input';\nimport EditableInputRGBA from '@uiw/react-color-editable-input-rgba';\nimport EditableInputHSLA from '@uiw/react-color-editable-input-hsla';\nimport { useState } from 'react';\nimport Arrow from './Arrow';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var ChromeInputType;\n\n(function (ChromeInputType) {\n  ChromeInputType[\"HEXA\"] = \"hexa\";\n  ChromeInputType[\"RGBA\"] = \"rgba\";\n  ChromeInputType[\"HSLA\"] = \"hsla\";\n})(ChromeInputType || (ChromeInputType = {}));\n\nvar Chrome = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var {\n    prefixCls = 'w-color-chrome',\n    className,\n    color,\n    inputType = ChromeInputType.RGBA,\n    rectProps = {},\n    onChange\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var hsva = typeof color === 'string' && validHex(color) ? hexToHsva(color) : color || {\n    h: 0,\n    s: 0,\n    l: 0,\n    a: 0\n  };\n\n  var handleChange = hsv => onChange && onChange(handleColor(hsv));\n\n  var [type, setType] = useState(inputType);\n\n  var handleClick = () => {\n    if (type === ChromeInputType.RGBA) {\n      setType(ChromeInputType.HSLA);\n    }\n\n    if (type === ChromeInputType.HSLA) {\n      setType(ChromeInputType.HEXA);\n    }\n\n    if (type === ChromeInputType.HEXA) {\n      setType(ChromeInputType.RGBA);\n    }\n  };\n\n  var labelStyle = {\n    paddingTop: 6\n  };\n  var inputStyle = {\n    textAlign: 'center',\n    paddingTop: 4,\n    paddingBottom: 4\n  };\n  return /*#__PURE__*/_jsx(Github, _extends({\n    ref: ref,\n    color: hsva,\n    style: {\n      borderRadius: 0,\n      flexDirection: 'column',\n      width: 230,\n      padding: 0\n    },\n    colors: undefined,\n    className: [prefixCls, className].filter(Boolean).join(' '),\n    placement: GithubPlacement.TopLeft\n  }, other, {\n    addonAfter: /*#__PURE__*/_jsxs(Fragment, {\n      children: [/*#__PURE__*/_jsx(Saturation, {\n        hsva: hsva,\n        style: {\n          width: '100%',\n          height: 130\n        },\n        onChange: newColor => {\n          handleChange(_extends({}, hsva, newColor, {\n            a: hsva.a\n          }));\n        }\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          padding: 15,\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsx(Alpha, {\n          width: 24,\n          height: 24,\n          hsva: hsva,\n          radius: 2,\n          style: {\n            marginRight: 15,\n            borderRadius: '50%'\n          },\n          bgProps: {\n            style: {\n              background: 'transparent'\n            }\n          },\n          innerProps: {\n            style: {\n              borderRadius: '50%',\n              background: hsvaToRgbaString(hsva),\n              boxShadow: 'rgb(0 0 0 / 25%) 0px 0px 1px inset'\n            }\n          },\n          pointer: () => /*#__PURE__*/_jsx(Fragment, {})\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            flex: 1\n          },\n          children: [/*#__PURE__*/_jsx(Hue, {\n            hue: hsva.h,\n            style: {\n              width: '100%'\n            },\n            bgProps: {\n              style: {\n                borderRadius: 2\n              }\n            },\n            onChange: newHue => {\n              handleChange(_extends({}, hsva, newHue));\n            }\n          }), /*#__PURE__*/_jsx(Alpha, {\n            hsva: hsva,\n            style: {\n              marginTop: 10\n            },\n            bgProps: {\n              style: {\n                borderRadius: 2\n              }\n            },\n            onChange: newAlpha => {\n              handleChange(_extends({}, hsva, newAlpha));\n            }\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'flex-start',\n          padding: '0 15px 15px 15px',\n          userSelect: 'none'\n        },\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            flex: 1\n          },\n          children: [type == ChromeInputType.RGBA && /*#__PURE__*/_jsx(EditableInputRGBA, {\n            hsva: hsva,\n            rProps: {\n              labelStyle,\n              inputStyle\n            },\n            gProps: {\n              labelStyle,\n              inputStyle\n            },\n            bProps: {\n              labelStyle,\n              inputStyle\n            },\n            aProps: {\n              labelStyle,\n              inputStyle\n            },\n            onChange: reColor => handleChange(reColor.hsva)\n          }), type === ChromeInputType.HEXA && /*#__PURE__*/_jsx(EditableInput, {\n            label: \"HEX\",\n            labelStyle: labelStyle,\n            inputStyle: inputStyle,\n            value: hsva.a > 0 && hsva.a < 1 ? hsvaToHexa(hsva).toLocaleUpperCase() : hsvaToHex(hsva).toLocaleUpperCase(),\n            onChange: (_, value) => {\n              if (typeof value === 'string') {\n                handleChange(hexToHsva(/^#/.test(value) ? value : \"#\" + value));\n              }\n            }\n          }), type === ChromeInputType.HSLA && /*#__PURE__*/_jsx(EditableInputHSLA, {\n            hsva: hsva,\n            hProps: {\n              labelStyle,\n              inputStyle\n            },\n            sProps: {\n              labelStyle,\n              inputStyle\n            },\n            lProps: {\n              labelStyle,\n              inputStyle\n            },\n            aProps: {\n              labelStyle,\n              inputStyle\n            },\n            onChange: reColor => handleChange(reColor.hsva)\n          })]\n        }), /*#__PURE__*/_jsx(Arrow, {\n          onClick: handleClick\n        })]\n      })]\n    }),\n    rectRender: _ref => {\n      var {\n        key\n      } = _ref;\n      return /*#__PURE__*/_jsx(Fragment, {}, key);\n    }\n  }));\n});\nChrome.displayName = 'Chrome';\nexport default Chrome;","map":{"version":3,"sources":["../src/index.tsx"],"names":["color","ChromeInputType","Chrome","prefixCls","inputType","rectProps","onChange","other","hsva","validHex","hexToHsva","h","s","l","a","handleChange","hsv","handleColor","useState","handleClick","type","setType","labelStyle","paddingTop","inputStyle","textAlign","paddingBottom","borderRadius","flexDirection","width","padding","GithubPlacement","TopLeft","height","newColor","display","alignItems","marginRight","style","background","hsvaToRgbaString","boxShadow","flex","newHue","marginTop","newAlpha","userSelect","reColor","hsvaToHexa","hsvaToHex","key"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport {\n  HsvaColor,\n  hsvaToRgbaString,\n  color as handleColor,\n  validHex,\n  hexToHsva,\n  hsvaToHex,\n  hsvaToHexa,\n} from '@uiw/color-convert';\nimport Github, { GithubProps, GithubPlacement } from '@uiw/react-color-github';\nimport Saturation from '@uiw/react-color-saturation';\nimport Hue from '@uiw/react-color-hue';\nimport Alpha from '@uiw/react-color-alpha';\nimport EditableInput from '@uiw/react-color-editable-input';\nimport EditableInputRGBA from '@uiw/react-color-editable-input-rgba';\nimport EditableInputHSLA from '@uiw/react-color-editable-input-hsla';\nimport { useState } from 'react';\nimport Arrow from './Arrow';\n\nexport enum ChromeInputType {\n  HEXA = 'hexa',\n  RGBA = 'rgba',\n  HSLA = 'hsla',\n}\n\nexport interface ChromeProps extends Omit<GithubProps, 'colors'> {\n  inputType?: ChromeInputType;\n}\n\nconst Chrome = React.forwardRef<HTMLDivElement, ChromeProps>((props, ref) => {\n  const {\n    prefixCls = 'w-color-chrome',\n    className,\n    style,\n    color,\n    inputType = ChromeInputType.RGBA,\n    rectProps = {},\n    onChange,\n    ...other\n  } = props;\n  const hsva = (\n    typeof color === 'string' && validHex(color) ? hexToHsva(color) : color || { h: 0, s: 0, l: 0, a: 0 }\n  ) as HsvaColor;\n  const handleChange = (hsv: HsvaColor) => onChange && onChange(handleColor(hsv));\n  const [type, setType] = useState(inputType);\n  const handleClick = () => {\n    if (type === ChromeInputType.RGBA) {\n      setType(ChromeInputType.HSLA);\n    }\n    if (type === ChromeInputType.HSLA) {\n      setType(ChromeInputType.HEXA);\n    }\n    if (type === ChromeInputType.HEXA) {\n      setType(ChromeInputType.RGBA);\n    }\n  };\n  const labelStyle: React.CSSProperties = { paddingTop: 6 };\n  const inputStyle: React.CSSProperties = { textAlign: 'center', paddingTop: 4, paddingBottom: 4 };\n  return (\n    <Github\n      ref={ref}\n      color={hsva}\n      style={{ borderRadius: 0, flexDirection: 'column', width: 230, padding: 0 }}\n      colors={undefined}\n      className={[prefixCls, className].filter(Boolean).join(' ')}\n      placement={GithubPlacement.TopLeft}\n      {...other}\n      addonAfter={\n        <Fragment>\n          <Saturation\n            hsva={hsva}\n            style={{ width: '100%', height: 130 }}\n            onChange={(newColor) => {\n              handleChange({ ...hsva, ...newColor, a: hsva.a });\n            }}\n          />\n          <div style={{ padding: 15, display: 'flex', alignItems: 'center' }}>\n            <Alpha\n              width={24}\n              height={24}\n              hsva={hsva}\n              radius={2}\n              style={{\n                marginRight: 15,\n                borderRadius: '50%',\n              }}\n              bgProps={{ style: { background: 'transparent' } }}\n              innerProps={{\n                style: {\n                  borderRadius: '50%',\n                  background: hsvaToRgbaString(hsva),\n                  boxShadow: 'rgb(0 0 0 / 25%) 0px 0px 1px inset',\n                },\n              }}\n              pointer={() => <Fragment />}\n            />\n            <div style={{ flex: 1 }}>\n              <Hue\n                hue={hsva.h}\n                style={{ width: '100%' }}\n                bgProps={{\n                  style: { borderRadius: 2 },\n                }}\n                onChange={(newHue) => {\n                  handleChange({ ...hsva, ...newHue });\n                }}\n              />\n              <Alpha\n                hsva={hsva}\n                style={{ marginTop: 10 }}\n                bgProps={{\n                  style: { borderRadius: 2 },\n                }}\n                onChange={(newAlpha) => {\n                  handleChange({ ...hsva, ...newAlpha });\n                }}\n              />\n            </div>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'flex-start', padding: '0 15px 15px 15px', userSelect: 'none' }}>\n            <div style={{ flex: 1 }}>\n              {type == ChromeInputType.RGBA && (\n                <EditableInputRGBA\n                  hsva={hsva}\n                  rProps={{ labelStyle, inputStyle }}\n                  gProps={{ labelStyle, inputStyle }}\n                  bProps={{ labelStyle, inputStyle }}\n                  aProps={{ labelStyle, inputStyle }}\n                  onChange={(reColor) => handleChange(reColor.hsva)}\n                />\n              )}\n              {type === ChromeInputType.HEXA && (\n                <EditableInput\n                  label=\"HEX\"\n                  labelStyle={labelStyle}\n                  inputStyle={inputStyle}\n                  value={hsva.a > 0 && hsva.a < 1 ? hsvaToHexa(hsva).toLocaleUpperCase() : hsvaToHex(hsva).toLocaleUpperCase()}\n                  onChange={(_, value) => {\n                    if (typeof value === 'string') {\n                      handleChange(hexToHsva(/^#/.test(value) ? value : `#${value}`));\n                    }\n                  }}\n                />\n              )}\n              {type === ChromeInputType.HSLA && (\n                <EditableInputHSLA\n                  hsva={hsva}\n                  hProps={{ labelStyle, inputStyle }}\n                  sProps={{ labelStyle, inputStyle }}\n                  lProps={{ labelStyle, inputStyle }}\n                  aProps={{ labelStyle, inputStyle }}\n                  onChange={(reColor) => handleChange(reColor.hsva)}\n                />\n              )}\n            </div>\n            <Arrow onClick={handleClick} />\n          </div>\n        </Fragment>\n      }\n      rectRender={({ key }) => <Fragment key={key} />}\n    />\n  );\n});\n\nChrome.displayName = 'Chrome';\n\nexport default Chrome;\n"]},"metadata":{},"sourceType":"module"}