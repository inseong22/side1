{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizebuttons\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, DropdownButtonView, Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { CKEditorError, Collection } from 'ckeditor5/src/utils';\nimport ImageResizeEditing from './imageresizeediting';\nconst RESIZE_ICONS = {\n  small: icons.objectSizeSmall,\n  medium: icons.objectSizeMedium,\n  large: icons.objectSizeLarge,\n  original: icons.objectSizeFull\n};\n/**\n * The image resize buttons plugin.\n *\n * It adds a possibility to resize images using the toolbar dropdown or individual buttons, depending on the plugin configuration.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageResizeButtons extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageResizeEditing];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageResizeButtons';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * The resize unit.\n     *\n     * @readonly\n     * @private\n     * @type {module:image/image~ImageConfig#resizeUnit}\n     * @default '%'\n     */\n\n    this._resizeUnit = editor.config.get('image.resizeUnit');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const options = editor.config.get('image.resizeOptions');\n    const command = editor.commands.get('resizeImage');\n    this.bind('isEnabled').to(command);\n\n    for (const option of options) {\n      this._registerImageResizeButton(option);\n    }\n\n    this._registerImageResizeDropdown(options);\n  }\n  /**\n   * A helper function that creates a standalone button component for the plugin.\n   *\n   * @private\n   * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} resizeOption A model of the resize option.\n   */\n\n\n  _registerImageResizeButton(option) {\n    const editor = this.editor;\n    const {\n      name,\n      value,\n      icon\n    } = option;\n    const optionValueWithUnit = value ? value + this._resizeUnit : null;\n    editor.ui.componentFactory.add(name, locale => {\n      const button = new ButtonView(locale);\n      const command = editor.commands.get('resizeImage');\n\n      const labelText = this._getOptionLabelValue(option, true);\n\n      if (!RESIZE_ICONS[icon]) {\n        /**\n         * When configuring {@link module:image/image~ImageConfig#resizeOptions `config.image.resizeOptions`} for standalone\n         * buttons, a valid `icon` token must be set for each option.\n         *\n         * See all valid options described in the\n         * {@link module:image/imageresize/imageresizebuttons~ImageResizeOption plugin configuration}.\n         *\n         * @error imageresizebuttons-missing-icon\n         * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} option Invalid image resize option.\n        */\n        throw new CKEditorError('imageresizebuttons-missing-icon', editor, option);\n      }\n\n      button.set({\n        // Use the `label` property for a verbose description (because of ARIA).\n        label: labelText,\n        icon: RESIZE_ICONS[icon],\n        tooltip: labelText,\n        isToggleable: true\n      }); // Bind button to the command.\n\n      button.bind('isEnabled').to(this);\n      button.bind('isOn').to(command, 'value', getIsOnButtonCallback(optionValueWithUnit));\n      this.listenTo(button, 'execute', () => {\n        editor.execute('resizeImage', {\n          width: optionValueWithUnit\n        });\n      });\n      return button;\n    });\n  }\n  /**\n   * A helper function that creates a dropdown component for the plugin containing all the resize options defined in\n   * the editor configuration.\n   *\n   * @private\n   * @param {Array.<module:image/imageresize/imageresizebuttons~ImageResizeOption>} options An array of configured options.\n   */\n\n\n  _registerImageResizeDropdown(options) {\n    const editor = this.editor;\n    const t = editor.t;\n    const originalSizeOption = options.find(option => !option.value);\n\n    const componentCreator = locale => {\n      const command = editor.commands.get('resizeImage');\n      const dropdownView = createDropdown(locale, DropdownButtonView);\n      const dropdownButton = dropdownView.buttonView;\n      dropdownButton.set({\n        tooltip: t('Resize image'),\n        commandValue: originalSizeOption.value,\n        icon: RESIZE_ICONS.medium,\n        isToggleable: true,\n        label: this._getOptionLabelValue(originalSizeOption),\n        withText: true,\n        class: 'ck-resize-image-button'\n      });\n      dropdownButton.bind('label').to(command, 'value', commandValue => {\n        if (commandValue && commandValue.width) {\n          return commandValue.width;\n        } else {\n          return this._getOptionLabelValue(originalSizeOption);\n        }\n      });\n      dropdownView.bind('isOn').to(command);\n      dropdownView.bind('isEnabled').to(this);\n      addListToDropdown(dropdownView, this._getResizeDropdownListItemDefinitions(options, command));\n      dropdownView.listView.ariaLabel = t('Image resize list'); // Execute command when an item from the dropdown is selected.\n\n      this.listenTo(dropdownView, 'execute', evt => {\n        editor.execute(evt.source.commandName, {\n          width: evt.source.commandValue\n        });\n        editor.editing.view.focus();\n      });\n      return dropdownView;\n    }; // Register `resizeImage` dropdown and add `imageResize` dropdown as an alias for backward compatibility.\n\n\n    editor.ui.componentFactory.add('resizeImage', componentCreator);\n    editor.ui.componentFactory.add('imageResize', componentCreator);\n  }\n  /**\n   * A helper function for creating an option label value string.\n   *\n   * @private\n   * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} option A resize option object.\n   * @param {Boolean} [forTooltip] An optional flag for creating a tooltip label.\n   * @returns {String} A user-defined label combined from the numeric value and the resize unit or the default label\n   * for reset options (`Original`).\n   */\n\n\n  _getOptionLabelValue(option, forTooltip) {\n    const t = this.editor.t;\n\n    if (option.label) {\n      return option.label;\n    } else if (forTooltip) {\n      if (option.value) {\n        return t('Resize image to %0', option.value + this._resizeUnit);\n      } else {\n        return t('Resize image to the original size');\n      }\n    } else {\n      if (option.value) {\n        return option.value + this._resizeUnit;\n      } else {\n        return t('Original');\n      }\n    }\n  }\n  /**\n   * A helper function that parses the resize options and returns list item definitions ready for use in the dropdown.\n   *\n   * @private\n   * @param {Array.<module:image/imageresize/imageresizebuttons~ImageResizeOption>} options The resize options.\n   * @param {module:image/imageresize/resizeimagecommand~ResizeImageCommand} command The resize image command.\n   * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} Dropdown item definitions.\n   */\n\n\n  _getResizeDropdownListItemDefinitions(options, command) {\n    const itemDefinitions = new Collection();\n    options.map(option => {\n      const optionValueWithUnit = option.value ? option.value + this._resizeUnit : null;\n      const definition = {\n        type: 'button',\n        model: new Model({\n          commandName: 'resizeImage',\n          commandValue: optionValueWithUnit,\n          label: this._getOptionLabelValue(option),\n          withText: true,\n          icon: null\n        })\n      };\n      definition.model.bind('isOn').to(command, 'value', getIsOnButtonCallback(optionValueWithUnit));\n      itemDefinitions.add(definition);\n    });\n    return itemDefinitions;\n  }\n\n} // A helper function for setting the `isOn` state of buttons in value bindings.\n\nfunction getIsOnButtonCallback(value) {\n  return commandValue => {\n    if (value === null && commandValue === value) {\n      return true;\n    }\n\n    return commandValue && commandValue.width === value;\n  };\n}\n/**\n * The image resize option used in the {@link module:image/image~ImageConfig#resizeOptions image resize configuration}.\n *\n * @typedef {Object} module:image/imageresize/imageresizebuttons~ImageResizeOption\n * @property {String} name The name of the UI component that changes the image size.\n * * If you configure the feature using individual resize buttons, you can refer to this name in the\n * {@link module:image/image~ImageConfig#toolbar image toolbar configuration}.\n * * If you configure the feature using the resize dropdown, this name will be used for a list item in the dropdown.\n * @property {String} value The value of the resize option without the unit\n * ({@link module:image/image~ImageConfig#resizeUnit configured separately}). `null` resets an image to its original size.\n * @property {String} [icon] An icon used by an individual resize button (see the `name` property to learn more).\n * Available icons are: `'small'`, `'medium'`, `'large'`, `'original'`.\n * @property {String} [label] An option label displayed in the dropdown or, if the feature is configured using\n * individual buttons, a {@link module:ui/button/buttonview~ButtonView#tooltip} and an ARIA attribute of a button.\n * If not specified, the label is generated automatically based on the `value` option and the\n * {@link module:image/image~ImageConfig#resizeUnit `config.image.resizeUnit`}.\n */","map":{"version":3,"sources":["/Users/oyejin/Surfee/kiwi/node_modules/@ckeditor/ckeditor5-image/src/imageresize/imageresizebuttons.js"],"names":["Plugin","icons","ButtonView","DropdownButtonView","Model","createDropdown","addListToDropdown","CKEditorError","Collection","ImageResizeEditing","RESIZE_ICONS","small","objectSizeSmall","medium","objectSizeMedium","large","objectSizeLarge","original","objectSizeFull","ImageResizeButtons","requires","pluginName","constructor","editor","_resizeUnit","config","get","init","options","command","commands","bind","to","option","_registerImageResizeButton","_registerImageResizeDropdown","name","value","icon","optionValueWithUnit","ui","componentFactory","add","locale","button","labelText","_getOptionLabelValue","set","label","tooltip","isToggleable","getIsOnButtonCallback","listenTo","execute","width","t","originalSizeOption","find","componentCreator","dropdownView","dropdownButton","buttonView","commandValue","withText","class","_getResizeDropdownListItemDefinitions","listView","ariaLabel","evt","source","commandName","editing","view","focus","forTooltip","itemDefinitions","map","definition","type","model"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizebuttons\n */\n\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, DropdownButtonView, Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { CKEditorError, Collection } from 'ckeditor5/src/utils';\n\nimport ImageResizeEditing from './imageresizeediting';\n\nconst RESIZE_ICONS = {\n\tsmall: icons.objectSizeSmall,\n\tmedium: icons.objectSizeMedium,\n\tlarge: icons.objectSizeLarge,\n\toriginal: icons.objectSizeFull\n};\n\n/**\n * The image resize buttons plugin.\n *\n * It adds a possibility to resize images using the toolbar dropdown or individual buttons, depending on the plugin configuration.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageResizeButtons extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ImageResizeEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageResizeButtons';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The resize unit.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @type {module:image/image~ImageConfig#resizeUnit}\n\t\t * @default '%'\n\t\t */\n\t\tthis._resizeUnit = editor.config.get( 'image.resizeUnit' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst options = editor.config.get( 'image.resizeOptions' );\n\t\tconst command = editor.commands.get( 'resizeImage' );\n\n\t\tthis.bind( 'isEnabled' ).to( command );\n\n\t\tfor ( const option of options ) {\n\t\t\tthis._registerImageResizeButton( option );\n\t\t}\n\n\t\tthis._registerImageResizeDropdown( options );\n\t}\n\n\t/**\n\t * A helper function that creates a standalone button component for the plugin.\n\t *\n\t * @private\n\t * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} resizeOption A model of the resize option.\n\t */\n\t_registerImageResizeButton( option ) {\n\t\tconst editor = this.editor;\n\t\tconst { name, value, icon } = option;\n\t\tconst optionValueWithUnit = value ? value + this._resizeUnit : null;\n\n\t\teditor.ui.componentFactory.add( name, locale => {\n\t\t\tconst button = new ButtonView( locale );\n\t\t\tconst command = editor.commands.get( 'resizeImage' );\n\t\t\tconst labelText = this._getOptionLabelValue( option, true );\n\n\t\t\tif ( !RESIZE_ICONS[ icon ] ) {\n\t\t\t\t/**\n\t\t\t\t * When configuring {@link module:image/image~ImageConfig#resizeOptions `config.image.resizeOptions`} for standalone\n\t\t\t\t * buttons, a valid `icon` token must be set for each option.\n\t\t\t\t *\n\t\t\t\t * See all valid options described in the\n\t\t\t\t * {@link module:image/imageresize/imageresizebuttons~ImageResizeOption plugin configuration}.\n\t\t\t\t *\n\t\t\t\t * @error imageresizebuttons-missing-icon\n\t\t\t\t * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} option Invalid image resize option.\n\t\t\t\t*/\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'imageresizebuttons-missing-icon',\n\t\t\t\t\teditor,\n\t\t\t\t\toption\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tbutton.set( {\n\t\t\t\t// Use the `label` property for a verbose description (because of ARIA).\n\t\t\t\tlabel: labelText,\n\t\t\t\ticon: RESIZE_ICONS[ icon ],\n\t\t\t\ttooltip: labelText,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\t// Bind button to the command.\n\t\t\tbutton.bind( 'isEnabled' ).to( this );\n\t\t\tbutton.bind( 'isOn' ).to( command, 'value', getIsOnButtonCallback( optionValueWithUnit ) );\n\n\t\t\tthis.listenTo( button, 'execute', () => {\n\t\t\t\teditor.execute( 'resizeImage', { width: optionValueWithUnit } );\n\t\t\t} );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n\n\t/**\n\t * A helper function that creates a dropdown component for the plugin containing all the resize options defined in\n\t * the editor configuration.\n\t *\n\t * @private\n\t * @param {Array.<module:image/imageresize/imageresizebuttons~ImageResizeOption>} options An array of configured options.\n\t */\n\t_registerImageResizeDropdown( options ) {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst originalSizeOption = options.find( option => !option.value );\n\n\t\tconst componentCreator = locale => {\n\t\t\tconst command = editor.commands.get( 'resizeImage' );\n\t\t\tconst dropdownView = createDropdown( locale, DropdownButtonView );\n\t\t\tconst dropdownButton = dropdownView.buttonView;\n\n\t\t\tdropdownButton.set( {\n\t\t\t\ttooltip: t( 'Resize image' ),\n\t\t\t\tcommandValue: originalSizeOption.value,\n\t\t\t\ticon: RESIZE_ICONS.medium,\n\t\t\t\tisToggleable: true,\n\t\t\t\tlabel: this._getOptionLabelValue( originalSizeOption ),\n\t\t\t\twithText: true,\n\t\t\t\tclass: 'ck-resize-image-button'\n\t\t\t} );\n\n\t\t\tdropdownButton.bind( 'label' ).to( command, 'value', commandValue => {\n\t\t\t\tif ( commandValue && commandValue.width ) {\n\t\t\t\t\treturn commandValue.width;\n\t\t\t\t} else {\n\t\t\t\t\treturn this._getOptionLabelValue( originalSizeOption );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tdropdownView.bind( 'isOn' ).to( command );\n\t\t\tdropdownView.bind( 'isEnabled' ).to( this );\n\n\t\t\taddListToDropdown( dropdownView, this._getResizeDropdownListItemDefinitions( options, command ) );\n\n\t\t\tdropdownView.listView.ariaLabel = t( 'Image resize list' );\n\n\t\t\t// Execute command when an item from the dropdown is selected.\n\t\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\t\teditor.execute( evt.source.commandName, { width: evt.source.commandValue } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t};\n\n\t\t// Register `resizeImage` dropdown and add `imageResize` dropdown as an alias for backward compatibility.\n\t\teditor.ui.componentFactory.add( 'resizeImage', componentCreator );\n\t\teditor.ui.componentFactory.add( 'imageResize', componentCreator );\n\t}\n\n\t/**\n\t * A helper function for creating an option label value string.\n\t *\n\t * @private\n\t * @param {module:image/imageresize/imageresizebuttons~ImageResizeOption} option A resize option object.\n\t * @param {Boolean} [forTooltip] An optional flag for creating a tooltip label.\n\t * @returns {String} A user-defined label combined from the numeric value and the resize unit or the default label\n\t * for reset options (`Original`).\n\t */\n\t_getOptionLabelValue( option, forTooltip ) {\n\t\tconst t = this.editor.t;\n\n\t\tif ( option.label ) {\n\t\t\treturn option.label;\n\t\t} else if ( forTooltip ) {\n\t\t\tif ( option.value ) {\n\t\t\t\treturn t( 'Resize image to %0', option.value + this._resizeUnit );\n\t\t\t} else {\n\t\t\t\treturn t( 'Resize image to the original size' );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( option.value ) {\n\t\t\t\treturn option.value + this._resizeUnit;\n\t\t\t} else {\n\t\t\t\treturn t( 'Original' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A helper function that parses the resize options and returns list item definitions ready for use in the dropdown.\n\t *\n\t * @private\n\t * @param {Array.<module:image/imageresize/imageresizebuttons~ImageResizeOption>} options The resize options.\n\t * @param {module:image/imageresize/resizeimagecommand~ResizeImageCommand} command The resize image command.\n\t * @returns {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} Dropdown item definitions.\n\t */\n\t_getResizeDropdownListItemDefinitions( options, command ) {\n\t\tconst itemDefinitions = new Collection();\n\n\t\toptions.map( option => {\n\t\t\tconst optionValueWithUnit = option.value ? option.value + this._resizeUnit : null;\n\t\t\tconst definition = {\n\t\t\t\ttype: 'button',\n\t\t\t\tmodel: new Model( {\n\t\t\t\t\tcommandName: 'resizeImage',\n\t\t\t\t\tcommandValue: optionValueWithUnit,\n\t\t\t\t\tlabel: this._getOptionLabelValue( option ),\n\t\t\t\t\twithText: true,\n\t\t\t\t\ticon: null\n\t\t\t\t} )\n\t\t\t};\n\n\t\t\tdefinition.model.bind( 'isOn' ).to( command, 'value', getIsOnButtonCallback( optionValueWithUnit ) );\n\n\t\t\titemDefinitions.add( definition );\n\t\t} );\n\n\t\treturn itemDefinitions;\n\t}\n}\n\n// A helper function for setting the `isOn` state of buttons in value bindings.\nfunction getIsOnButtonCallback( value ) {\n\treturn commandValue => {\n\t\tif ( value === null && commandValue === value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn commandValue && commandValue.width === value;\n\t};\n}\n\n/**\n * The image resize option used in the {@link module:image/image~ImageConfig#resizeOptions image resize configuration}.\n *\n * @typedef {Object} module:image/imageresize/imageresizebuttons~ImageResizeOption\n * @property {String} name The name of the UI component that changes the image size.\n * * If you configure the feature using individual resize buttons, you can refer to this name in the\n * {@link module:image/image~ImageConfig#toolbar image toolbar configuration}.\n * * If you configure the feature using the resize dropdown, this name will be used for a list item in the dropdown.\n * @property {String} value The value of the resize option without the unit\n * ({@link module:image/image~ImageConfig#resizeUnit configured separately}). `null` resets an image to its original size.\n * @property {String} [icon] An icon used by an individual resize button (see the `name` property to learn more).\n * Available icons are: `'small'`, `'medium'`, `'large'`, `'original'`.\n * @property {String} [label] An option label displayed in the dropdown or, if the feature is configured using\n * individual buttons, a {@link module:ui/button/buttonview~ButtonView#tooltip} and an ARIA attribute of a button.\n * If not specified, the label is generated automatically based on the `value` option and the\n * {@link module:image/image~ImageConfig#resizeUnit `config.image.resizeUnit`}.\n */\n"]},"metadata":{},"sourceType":"module"}