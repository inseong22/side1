{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "Circle",
    "React",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "color",
    "colors",
    "rectProps",
    "onChange",
    "other",
    "hsva",
    "hex",
    "filter",
    "Boolean",
    "join",
    "hsvColor",
    "displayName"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAOA,IAAMA,MAAM,gBAAGC,kBAAMC,UAAN,CAA8C,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC3E,yBAA4GD,KAA5G,CAAQE,SAAR;AAAA,MAAQA,SAAR,iCAAoB,gBAApB;AAAA,MAAsCC,SAAtC,GAA4GH,KAA5G,CAAsCG,SAAtC;AAAA,MAAiDC,KAAjD,GAA4GJ,KAA5G,CAAiDI,KAAjD;AAAA,sBAA4GJ,KAA5G,CAAwDK,MAAxD;AAAA,MAAwDA,MAAxD,8BAAiE,EAAjE;AAAA,yBAA4GL,KAA5G,CAAqEM,SAArE;AAAA,MAAqEA,SAArE,iCAAiF,EAAjF;AAAA,MAAqFC,SAArF,GAA4GP,KAA5G,CAAqFO,QAArF;AAAA,MAAkGC,KAAlG,6CAA4GR,KAA5G;AACA,MAAMS,IAAI,GAAI,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,4BAASA,KAAT,CAA7B,GAA+C,6BAAUA,KAAV,CAA/C,GAAkEA,KAAK,IAAI,EAAzF;AACA,MAAMM,GAAG,GAAGN,KAAK,GAAG,6BAAUK,IAAV,CAAH,GAAqB,EAAtC;AACA,sBACE,qBAAC,4BAAD;AACE,IAAA,GAAG,EAAER,GADP;AAEE,IAAA,MAAM,EAAEI,MAFV;AAGE,IAAA,KAAK,EAAEK;AAHT,KAIMF,KAJN;AAKE,IAAA,SAAS,EAAE,CAACN,SAAD,EAAYC,SAAZ,EAAuBQ,MAAvB,CAA8BC,OAA9B,EAAuCC,IAAvC,CAA4C,GAA5C,CALb;AAME,IAAA,UAAU,EAAE;AAAA,UAAMb,KAAN;AAAA,0BAAkB,qBAAC,iBAAD,oEAAWA,KAAX;AAAkB,QAAA,SAAS,EAAEM;AAA7B,SAAlB;AAAA,KANd;AAOE,IAAA,QAAQ,EAAE,kBAACQ,QAAD,EAAc;AACtBP,MAAAA,SAAQ,IAAIA,SAAQ,CAAC,yBAAYO,QAAZ,CAAD,CAApB;AACD;AATH,KADF;AAaD,CAjBc,CAAf;;AAmBAjB,MAAM,CAACkB,WAAP,GAAqB,QAArB;eAEelB,M",
  "sourcesContent": [
    "import React from 'react';\nimport { validHex, hsvaToHex, HsvaColor, hexToHsva, ColorResult, color as handleColor } from '@uiw/color-convert';\nimport Swatch, { SwatchProps } from '@uiw/react-color-swatch';\nimport Point from './Point';\n\nexport interface CircleProps extends Omit<SwatchProps, 'color' | 'onChange'> {\n  color?: string | HsvaColor;\n  onChange?: (color: ColorResult) => void;\n}\n\nconst Circle = React.forwardRef<HTMLDivElement, CircleProps>((props, ref) => {\n  const { prefixCls = 'w-color-circle', className, color, colors = [], rectProps = {}, onChange, ...other } = props;\n  const hsva = (typeof color === 'string' && validHex(color) ? hexToHsva(color) : color || {}) as HsvaColor;\n  const hex = color ? hsvaToHex(hsva) : '';\n  return (\n    <Swatch\n      ref={ref}\n      colors={colors}\n      color={hex}\n      {...other}\n      className={[prefixCls, className].filter(Boolean).join(' ')}\n      rectRender={({ ...props }) => <Point {...props} rectProps={rectProps} />}\n      onChange={(hsvColor) => {\n        onChange && onChange(handleColor(hsvColor));\n      }}\n    />\n  );\n});\n\nCircle.displayName = 'Circle';\n\nexport default Circle;\n"
  ]
}