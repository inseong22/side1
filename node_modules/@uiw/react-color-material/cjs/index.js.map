{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "styleRBG",
    "boxShadow",
    "borderWidth",
    "borderBottomColor",
    "borderBottomStyle",
    "height",
    "outline",
    "fontSize",
    "padding",
    "Material",
    "React",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "style",
    "color",
    "onChange",
    "other",
    "hsva",
    "hex",
    "replace",
    "handleChange",
    "hsv",
    "handleHex",
    "value",
    "evn",
    "test",
    "String",
    "length",
    "filter",
    "Boolean",
    "join",
    "width",
    "fontFamily",
    "backgroundColor",
    "toLocaleUpperCase",
    "val",
    "target",
    "slice",
    "border",
    "flexDirection",
    "alignItems",
    "marginTop",
    "inputStyle",
    "result",
    "displayName"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport { HsvaColor, ColorResult, color as handleColor, validHex, hexToHsva, hsvaToHex } from '@uiw/color-convert';\nimport EditableInput from '@uiw/react-color-editable-input';\nimport RGBA from '@uiw/react-color-editable-input-rgba';\n\nexport interface MaterialProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'color'> {\n  prefixCls?: string;\n  color?: string | HsvaColor;\n  onChange?: (color: ColorResult) => void;\n}\n\nconst styleRBG: React.CSSProperties = {\n  boxShadow: 'initial',\n  borderWidth: '0 0 1px 0',\n  borderBottomColor: '#eee',\n  borderBottomStyle: 'solid',\n  height: 30,\n  outline: 0,\n  fontSize: 15,\n  padding: 0,\n};\n\nconst Material = React.forwardRef<HTMLDivElement, MaterialProps>((props, ref) => {\n  const { prefixCls = 'w-color-material', className, style, color, onChange, ...other } = props;\n  const hsva = (typeof color === 'string' && validHex(color) ? hexToHsva(color) : color) as HsvaColor;\n  const hex = color ? hsvaToHex(hsva).replace(/^#/, '') : '';\n  const handleChange = (hsv: HsvaColor) => {\n    onChange && onChange(handleColor(hsv));\n  };\n  const handleHex = (value: string | number, evn: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof value === 'string' && validHex(value) && /(3|6)/.test(String(value.length))) {\n      onChange && onChange(handleColor(hexToHsva(value)));\n    }\n  };\n  return (\n    <div\n      ref={ref}\n      className={[prefixCls, className || ''].filter(Boolean).join(' ')}\n      style={{ padding: 16, width: 98, fontFamily: 'Roboto', backgroundColor: '#fff', ...style }}\n      {...other}\n    >\n      <EditableInput\n        label=\"Hex\"\n        value={hex.toLocaleUpperCase()}\n        onChange={(evn, val) => handleHex(val, evn)}\n        onBlur={(evn) => {\n          const value = evn.target.value;\n          evn.target.value = value.slice(0, 6);\n          handleHex(value.slice(0, 6), evn);\n        }}\n        inputStyle={{\n          outline: 0,\n          border: 0,\n          height: 30,\n          fontSize: 15,\n          padding: 0,\n          boxShadow: 'initial',\n          borderWidth: '0 0 2px 0',\n          borderBottomColor: hex ? `#${hex}` : '#eee',\n          borderBottomStyle: 'solid',\n        }}\n        style={{ flexDirection: 'column-reverse', alignItems: 'flex-start' }}\n      />\n\n      <RGBA\n        hsva={hsva}\n        placement=\"top\"\n        style={{ marginTop: 11 }}\n        rProps={{\n          style: {\n            alignItems: 'flex-start',\n          },\n          inputStyle: { ...styleRBG },\n        }}\n        gProps={{\n          style: {\n            alignItems: 'flex-start',\n          },\n          inputStyle: { ...styleRBG },\n        }}\n        bProps={{\n          style: {\n            alignItems: 'flex-start',\n          },\n          inputStyle: { ...styleRBG },\n        }}\n        aProps={false}\n        onChange={(result) => handleChange(result.hsva)}\n      />\n    </div>\n  );\n});\n\nMaterial.displayName = 'Material';\n\nexport default Material;\n"
  ]
}