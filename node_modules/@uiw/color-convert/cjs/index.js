"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  rgbaToHsva: true,
  hsvaToHslString: true,
  hsvaToHsvString: true,
  hsvaToHsvaString: true,
  hsvaToHslaString: true,
  hslStringToHsla: true,
  hslaStringToHsva: true,
  hslStringToHsva: true,
  hslaToHsva: true,
  hsvaToHsla: true,
  hsvaStringToHsva: true,
  parseHue: true,
  hsvStringToHsva: true,
  rgbaStringToHsva: true,
  rgbStringToHsva: true,
  rgbaToHex: true,
  rgbaToHexa: true,
  hexToHsva: true,
  hexToRgba: true,
  hsvaToRgba: true,
  hsvaToRgbString: true,
  hsvaToRgbaString: true,
  rgbaToRgb: true,
  hslaToHsl: true,
  hsvaToHex: true,
  hsvaToHexa: true,
  hsvaToHsv: true,
  color: true
};
exports.rgbaToRgb = exports.rgbaToHsva = exports.rgbaToHexa = exports.rgbaToHex = exports.rgbaStringToHsva = exports.rgbStringToHsva = exports.parseHue = exports.hsvaToRgbaString = exports.hsvaToRgba = exports.hsvaToRgbString = exports.hsvaToHsvaString = exports.hsvaToHsvString = exports.hsvaToHsv = exports.hsvaToHslaString = exports.hsvaToHsla = exports.hsvaToHslString = exports.hsvaToHexa = exports.hsvaToHex = exports.hsvaStringToHsva = exports.hsvStringToHsva = exports.hslaToHsva = exports.hslaToHsl = exports.hslaStringToHsva = exports.hslStringToHsva = exports.hslStringToHsla = exports.hexToRgba = exports.hexToHsva = exports.color = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _utils = require("./utils");

Object.keys(_utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _utils[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _utils[key];
    }
  });
});

var _getContrastingColor = require("./getContrastingColor");

Object.keys(_getContrastingColor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _getContrastingColor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _getContrastingColor[key];
    }
  });
});
var RGB_MAX = 255;
var HUE_MAX = 360;
var SV_MAX = 100;

/**
 * ```js
 * rgbaToHsva({ r: 255, g: 255, b: 255, a: 1 }) //=> { h: 0, s: 0, v: 100, a: 1 }
 * ```
 */
var rgbaToHsva = function rgbaToHsva(_ref) {
  var r = _ref.r,
      g = _ref.g,
      b = _ref.b,
      a = _ref.a;
  var max = Math.max(r, g, b);
  var delta = max - Math.min(r, g, b); // prettier-ignore

  var hh = delta ? max === r ? (g - b) / delta : max === g ? 2 + (b - r) / delta : 4 + (r - g) / delta : 0;
  return {
    h: 60 * (hh < 0 ? hh + 6 : hh),
    s: max ? delta / max * SV_MAX : 0,
    v: max / RGB_MAX * SV_MAX,
    a: a
  };
};

exports.rgbaToHsva = rgbaToHsva;

var hsvaToHslString = function hsvaToHslString(hsva) {
  var _hsvaToHsla = hsvaToHsla(hsva),
      h = _hsvaToHsla.h,
      s = _hsvaToHsla.s,
      l = _hsvaToHsla.l; // return `hsl(${h}, ${s}%, ${l}%)`;


  return "hsl(".concat(h, ", ").concat(Math.round(s), "%, ").concat(Math.round(l), "%)");
};

exports.hsvaToHslString = hsvaToHslString;

var hsvaToHsvString = function hsvaToHsvString(_ref2) {
  var h = _ref2.h,
      s = _ref2.s,
      v = _ref2.v;
  return "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)");
};

exports.hsvaToHsvString = hsvaToHsvString;

var hsvaToHsvaString = function hsvaToHsvaString(_ref3) {
  var h = _ref3.h,
      s = _ref3.s,
      v = _ref3.v,
      a = _ref3.a;
  return "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
};

exports.hsvaToHsvaString = hsvaToHsvaString;

var hsvaToHslaString = function hsvaToHslaString(hsva) {
  var _hsvaToHsla2 = hsvaToHsla(hsva),
      h = _hsvaToHsla2.h,
      s = _hsvaToHsla2.s,
      l = _hsvaToHsla2.l,
      a = _hsvaToHsla2.a;

  return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
};

exports.hsvaToHslaString = hsvaToHslaString;

var hslStringToHsla = function hslStringToHsla(str) {
  var _map = (str.match(/\d+/g) || []).map(Number),
      _map2 = (0, _slicedToArray2["default"])(_map, 4),
      h = _map2[0],
      s = _map2[1],
      l = _map2[2],
      a = _map2[3];

  return {
    h: h,
    s: s,
    l: l,
    a: a
  };
};

exports.hslStringToHsla = hslStringToHsla;

var hslaStringToHsva = function hslaStringToHsva(hslString) {
  var matcher = /hsla?\(?\s*(-?\d*\.?\d+)(deg|rad|grad|turn)?[,\s]+(-?\d*\.?\d+)%?[,\s]+(-?\d*\.?\d+)%?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
  var match = matcher.exec(hslString);
  if (!match) return {
    h: 0,
    s: 0,
    v: 0,
    a: 1
  };
  return hslaToHsva({
    h: parseHue(match[1], match[2]),
    s: Number(match[3]),
    l: Number(match[4]),
    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)
  });
};

exports.hslaStringToHsva = hslaStringToHsva;
var hslStringToHsva = hslaStringToHsva;
exports.hslStringToHsva = hslStringToHsva;

var hslaToHsva = function hslaToHsva(_ref4) {
  var h = _ref4.h,
      s = _ref4.s,
      l = _ref4.l,
      a = _ref4.a;
  s *= (l < 50 ? l : SV_MAX - l) / SV_MAX;
  return {
    h: h,
    s: s > 0 ? 2 * s / (l + s) * SV_MAX : 0,
    v: l + s,
    a: a
  };
};

exports.hslaToHsva = hslaToHsva;

var hsvaToHsla = function hsvaToHsla(_ref5) {
  var h = _ref5.h,
      s = _ref5.s,
      v = _ref5.v,
      a = _ref5.a;
  var hh = (200 - s) * v / SV_MAX;
  return {
    h: h,
    s: hh > 0 && hh < 200 ? s * v / SV_MAX / (hh <= SV_MAX ? hh : 200 - hh) * SV_MAX : 0,
    l: hh / 2,
    a: a
  };
};

exports.hsvaToHsla = hsvaToHsla;

var hsvaStringToHsva = function hsvaStringToHsva(hsvString) {
  var matcher = /hsva?\(?\s*(-?\d*\.?\d+)(deg|rad|grad|turn)?[,\s]+(-?\d*\.?\d+)%?[,\s]+(-?\d*\.?\d+)%?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
  var match = matcher.exec(hsvString);
  if (!match) return {
    h: 0,
    s: 0,
    v: 0,
    a: 1
  };
  return {
    h: parseHue(match[1], match[2]),
    s: Number(match[3]),
    v: Number(match[4]),
    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? SV_MAX : 1)
  };
};
/**
 * Valid CSS <angle> units.
 * https://developer.mozilla.org/en-US/docs/Web/CSS/angle
 */


exports.hsvaStringToHsva = hsvaStringToHsva;
var angleUnits = {
  grad: HUE_MAX / 400,
  turn: HUE_MAX,
  rad: HUE_MAX / (Math.PI * 2)
};

var parseHue = function parseHue(value) {
  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'deg';
  return Number(value) * (angleUnits[unit] || 1);
};

exports.parseHue = parseHue;
var hsvStringToHsva = hsvaStringToHsva;
exports.hsvStringToHsva = hsvStringToHsva;

var rgbaStringToHsva = function rgbaStringToHsva(rgbaString) {
  var matcher = /rgba?\(?\s*(-?\d*\.?\d+)(%)?[,\s]+(-?\d*\.?\d+)(%)?[,\s]+(-?\d*\.?\d+)(%)?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
  var match = matcher.exec(rgbaString);
  if (!match) return {
    h: 0,
    s: 0,
    v: 0,
    a: 1
  };
  return rgbaToHsva({
    r: Number(match[1]) / (match[2] ? SV_MAX / RGB_MAX : 1),
    g: Number(match[3]) / (match[4] ? SV_MAX / RGB_MAX : 1),
    b: Number(match[5]) / (match[6] ? SV_MAX / RGB_MAX : 1),
    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? SV_MAX : 1)
  });
};

exports.rgbaStringToHsva = rgbaStringToHsva;
var rgbStringToHsva = rgbaStringToHsva;
/** Converts an RGBA color plus alpha transparency to hex */

exports.rgbStringToHsva = rgbStringToHsva;

var rgbaToHex = function rgbaToHex(_ref6) {
  var r = _ref6.r,
      g = _ref6.g,
      b = _ref6.b;
  var bin = r << 16 | g << 8 | b;
  return "#".concat(function (h) {
    return new Array(7 - h.length).join('0') + h;
  }(bin.toString(16)));
};

exports.rgbaToHex = rgbaToHex;

var rgbaToHexa = function rgbaToHexa(_ref7) {
  var r = _ref7.r,
      g = _ref7.g,
      b = _ref7.b,
      a = _ref7.a;
  var alpha = typeof a === 'number' && (a * 255 | 1 << 8).toString(16).slice(1);
  return "".concat(rgbaToHex({
    r: r,
    g: g,
    b: b,
    a: a
  })).concat(alpha ? alpha : '');
};

exports.rgbaToHexa = rgbaToHexa;

var hexToHsva = function hexToHsva(hex) {
  return rgbaToHsva(hexToRgba(hex));
};

exports.hexToHsva = hexToHsva;

var hexToRgba = function hexToRgba(hex) {
  var htemp = hex.replace('#', '');

  if (/^#?/.test(hex) && htemp.length === 3) {
    hex = "#".concat(htemp.charAt(0)).concat(htemp.charAt(0)).concat(htemp.charAt(1)).concat(htemp.charAt(1)).concat(htemp.charAt(2)).concat(htemp.charAt(2));
  }

  var reg = new RegExp("[A-Za-z0-9]{2}", 'g');

  var _map3 = hex.match(reg).map(function (v) {
    return parseInt(v, 16);
  }),
      _map4 = (0, _slicedToArray2["default"])(_map3, 4),
      r = _map4[0],
      g = _map4[1],
      _map4$ = _map4[2],
      b = _map4$ === void 0 ? 0 : _map4$,
      a = _map4[3];

  return {
    r: r,
    g: g,
    b: b,
    a: a ? a / RGB_MAX : 1
  };
};
/**
 * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV
 * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]
 */


exports.hexToRgba = hexToRgba;

var hsvaToRgba = function hsvaToRgba(_ref8) {
  var h = _ref8.h,
      s = _ref8.s,
      v = _ref8.v,
      a = _ref8.a;

  var _h = h / 60,
      _s = s / SV_MAX,
      _v = v / SV_MAX,
      hi = Math.floor(_h) % 6;

  var f = _h - Math.floor(_h),
      _p = RGB_MAX * _v * (1 - _s),
      _q = RGB_MAX * _v * (1 - _s * f),
      _t = RGB_MAX * _v * (1 - _s * (1 - f));

  _v *= RGB_MAX;
  var rgba = {};

  switch (hi) {
    case 0:
      rgba.r = _v;
      rgba.g = _t;
      rgba.b = _p;
      break;

    case 1:
      rgba.r = _q;
      rgba.g = _v;
      rgba.b = _p;
      break;

    case 2:
      rgba.r = _p;
      rgba.g = _v;
      rgba.b = _t;
      break;

    case 3:
      rgba.r = _p;
      rgba.g = _q;
      rgba.b = _v;
      break;

    case 4:
      rgba.r = _t;
      rgba.g = _p;
      rgba.b = _v;
      break;

    case 5:
      rgba.r = _v;
      rgba.g = _p;
      rgba.b = _q;
      break;
  }

  rgba.r = Math.round(rgba.r);
  rgba.g = Math.round(rgba.g);
  rgba.b = Math.round(rgba.b);
  return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, rgba), {}, {
    a: a
  });
};

exports.hsvaToRgba = hsvaToRgba;

var hsvaToRgbString = function hsvaToRgbString(hsva) {
  var _hsvaToRgba = hsvaToRgba(hsva),
      r = _hsvaToRgba.r,
      g = _hsvaToRgba.g,
      b = _hsvaToRgba.b;

  return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
};

exports.hsvaToRgbString = hsvaToRgbString;

var hsvaToRgbaString = function hsvaToRgbaString(hsva) {
  var _hsvaToRgba2 = hsvaToRgba(hsva),
      r = _hsvaToRgba2.r,
      g = _hsvaToRgba2.g,
      b = _hsvaToRgba2.b,
      a = _hsvaToRgba2.a;

  return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")");
};

exports.hsvaToRgbaString = hsvaToRgbaString;

var rgbaToRgb = function rgbaToRgb(_ref9) {
  var r = _ref9.r,
      g = _ref9.g,
      b = _ref9.b;
  return {
    r: r,
    g: g,
    b: b
  };
};

exports.rgbaToRgb = rgbaToRgb;

var hslaToHsl = function hslaToHsl(_ref10) {
  var h = _ref10.h,
      s = _ref10.s,
      l = _ref10.l;
  return {
    h: h,
    s: s,
    l: l
  };
};

exports.hslaToHsl = hslaToHsl;

var hsvaToHex = function hsvaToHex(hsva) {
  return rgbaToHex(hsvaToRgba(hsva));
};

exports.hsvaToHex = hsvaToHex;

var hsvaToHexa = function hsvaToHexa(hsva) {
  return rgbaToHexa(hsvaToRgba(hsva));
};

exports.hsvaToHexa = hsvaToHexa;

var hsvaToHsv = function hsvaToHsv(_ref11) {
  var h = _ref11.h,
      s = _ref11.s,
      v = _ref11.v;
  return {
    h: h,
    s: s,
    v: v
  };
};

exports.hsvaToHsv = hsvaToHsv;

var color = function color(str) {
  var rgb;
  var hsl;
  var hsv;
  var rgba;
  var hsla;
  var hsva;
  var hex;
  var hexa;

  if (typeof str === 'string' && (0, _utils.validHex)(str)) {
    hsva = hexToHsva(str);
    hex = str;
  } else if (typeof str !== 'string') {
    hsva = str;
  }

  if (hsva) {
    hsv = hsvaToHsv(hsva);
    hsla = hsvaToHsla(hsva);
    rgba = hsvaToRgba(hsva);
    hexa = rgbaToHexa(rgba);
    hex = hsvaToHex(hsva);
    hsl = hslaToHsl(hsla);
    rgb = rgbaToRgb(rgba);
  }

  return {
    rgb: rgb,
    hsl: hsl,
    hsv: hsv,
    rgba: rgba,
    hsla: hsla,
    hsva: hsva,
    hex: hex,
    hexa: hexa
  };
};

exports.color = color;
//# sourceMappingURL=index.js.map