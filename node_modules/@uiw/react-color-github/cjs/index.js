"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.GithubPlacement = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _colorConvert = require("@uiw/color-convert");

var _reactColorSwatch = _interopRequireDefault(require("@uiw/react-color-swatch"));

var _Point = _interopRequireDefault(require("./Point"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "placement", "className", "style", "color", "colors", "rectProps", "onChange"],
    _excluded2 = ["key"];
var CORLER_HEX = ['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB'];
var GithubPlacement;
exports.GithubPlacement = GithubPlacement;

(function (GithubPlacement) {
  GithubPlacement["Left"] = "L";
  GithubPlacement["LeftTop"] = "LT";
  GithubPlacement["LeftBotton"] = "LB";
  GithubPlacement["Right"] = "R";
  GithubPlacement["RightTop"] = "RT";
  GithubPlacement["RightBotton"] = "RB";
  GithubPlacement["Top"] = "T";
  GithubPlacement["TopRight"] = "TR";
  GithubPlacement["TopLeft"] = "TL";
  GithubPlacement["Botton"] = "B";
  GithubPlacement["BottonLeft"] = "BL";
  GithubPlacement["BottonRight"] = "BR";
})(GithubPlacement || (exports.GithubPlacement = GithubPlacement = {}));

var Github = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-color-github' : _props$prefixCls,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? GithubPlacement.TopRight : _props$placement,
      className = props.className,
      style = props.style,
      color = props.color,
      _props$colors = props.colors,
      colors = _props$colors === void 0 ? CORLER_HEX : _props$colors,
      _props$rectProps = props.rectProps,
      rectProps = _props$rectProps === void 0 ? {} : _props$rectProps,
      onChange = props.onChange,
      other = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var hsva = typeof color === 'string' && (0, _colorConvert.validHex)(color) ? (0, _colorConvert.hexToHsva)(color) : color;
  var hex = color ? (0, _colorConvert.hsvaToHex)(hsva) : '';

  var handleChange = function handleChange(hsv) {
    return onChange && onChange((0, _colorConvert.color)(hsv));
  };

  var rStyle = {
    borderStyle: 'solid',
    position: 'absolute'
  };
  var arrBrStyl = (0, _objectSpread2["default"])({}, rStyle);
  var arrStyl = (0, _objectSpread2["default"])({}, rStyle);

  if (/^T/.test(placement)) {
    arrBrStyl.borderWidth = '0 8px 8px';
    arrBrStyl.borderColor = 'transparent transparent rgba(0, 0, 0, 0.15)';
    arrStyl.borderWidth = '0 7px 7px';
    arrStyl.borderColor = 'transparent transparent #fff';
  }

  if (placement === GithubPlacement.TopRight) {
    arrBrStyl.top = -8;
    arrStyl.top = -7;
  }

  if (placement === GithubPlacement.Top) {
    arrBrStyl.top = -8;
    arrStyl.top = -7;
  }

  if (placement === GithubPlacement.TopLeft) {
    arrBrStyl.top = -8;
    arrStyl.top = -7;
  }

  if (/^B/.test(placement)) {
    arrBrStyl.borderWidth = '8px 8px 0 ';
    arrBrStyl.borderColor = 'rgba(0, 0, 0, 0.15) transparent transparent';
    arrStyl.borderWidth = '7px 7px 0px';
    arrStyl.borderColor = '#fff transparent transparent';

    if (placement === GithubPlacement.BottonRight) {
      arrBrStyl.top = '100%';
      arrStyl.top = '100%';
    }

    if (placement === GithubPlacement.Botton) {
      arrBrStyl.top = '100%';
      arrStyl.top = '100%';
    }

    if (placement === GithubPlacement.BottonLeft) {
      arrBrStyl.top = '100%';
      arrStyl.top = '100%';
    }
  }

  if (/^(B|T)/.test(placement)) {
    if (placement === GithubPlacement.Top || placement === GithubPlacement.Botton) {
      arrBrStyl.left = '50%';
      arrBrStyl.marginLeft = -8;
      arrStyl.left = '50%';
      arrStyl.marginLeft = -7;
    }

    if (placement === GithubPlacement.TopRight || placement === GithubPlacement.BottonRight) {
      arrBrStyl.right = 10;
      arrStyl.right = 11;
    }

    if (placement === GithubPlacement.TopLeft || placement === GithubPlacement.BottonLeft) {
      arrBrStyl.left = 7;
      arrStyl.left = 8;
    }
  }

  if (/^L/.test(placement)) {
    arrBrStyl.borderWidth = '8px 8px 8px 0px';
    arrBrStyl.borderColor = 'transparent rgba(0, 0, 0, 0.15) transparent transparent';
    arrStyl.borderWidth = '7px 7px 7px 0px';
    arrStyl.borderColor = 'transparent #fff transparent transparent';
    arrBrStyl.left = -8;
    arrStyl.left = -7;
  }

  if (/^R/.test(placement)) {
    arrBrStyl.borderWidth = '8px 0px 8px 8px';
    arrBrStyl.borderColor = 'transparent transparent transparent rgba(0, 0, 0, 0.15)';
    arrStyl.borderWidth = '7px 0px 7px 7px';
    arrStyl.borderColor = 'transparent transparent transparent #fff';
    arrBrStyl.right = -8;
    arrStyl.right = -7;
  }

  if (/^(L|R)/.test(placement)) {
    if (placement === GithubPlacement.RightTop || placement === GithubPlacement.LeftTop) {
      arrBrStyl.top = 5;
      arrStyl.top = 6;
    }

    if (placement === GithubPlacement.Left || placement === GithubPlacement.Right) {
      arrBrStyl.top = '50%';
      arrStyl.top = '50%';
      arrBrStyl.marginTop = -8;
      arrStyl.marginTop = -7;
    }

    if (placement === GithubPlacement.LeftBotton || placement === GithubPlacement.RightBotton) {
      arrBrStyl.top = '100%';
      arrStyl.top = '100%';
      arrBrStyl.marginTop = -21;
      arrStyl.marginTop = -20;
    }
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactColorSwatch["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    ref: ref,
    className: [prefixCls, className].filter(Boolean).join(' '),
    colors: colors,
    color: hex,
    rectRender: function rectRender(_ref) {
      var key = _ref.key,
          props = (0, _objectWithoutProperties2["default"])(_ref, _excluded2);
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Point["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, props), {}, {
        rectProps: rectProps
      }), key);
    }
  }, other), {}, {
    onChange: handleChange,
    style: (0, _objectSpread2["default"])({
      width: 200,
      borderRadius: 4,
      background: '#fff',
      boxShadow: 'rgb(0 0 0 / 15%) 0px 3px 12px',
      border: '1px solid rgba(0, 0, 0, 0.2)',
      position: 'relative',
      padding: 5
    }, style),
    rectProps: {
      style: {
        marginRight: 0,
        marginBottom: 0,
        borderRadius: 0,
        height: 25,
        width: 25
      }
    },
    addonBefore: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        style: arrBrStyl
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        style: arrStyl
      })]
    })
  }));
});

Github.displayName = 'Github';
var _default = Github;
exports["default"] = _default;
//# sourceMappingURL=index.js.map