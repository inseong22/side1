{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "ShadeSlider",
    "React",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "onChange",
    "direction",
    "hsva",
    "other",
    "colorFrom",
    "Object",
    "assign",
    "a",
    "s",
    "v",
    "h",
    "_",
    "interaction",
    "left",
    "top",
    "displayName"
  ],
  "mappings": ";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAMA,IAAMA,WAAW,gBAAGC,kBAAMC,UAAN,CAAmD,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACrF,yBAA4GD,KAA5G,CAAQE,SAAR;AAAA,MAAQA,SAAR,iCAAoB,oBAApB;AAAA,MAA0CC,SAA1C,GAA4GH,KAA5G,CAA0CG,SAA1C;AAAA,MAAqDC,SAArD,GAA4GJ,KAA5G,CAAqDI,QAArD;AAAA,yBAA4GJ,KAA5G,CAA+DK,SAA/D;AAAA,MAA+DA,SAA/D,iCAA2E,YAA3E;AAAA,MAAyFC,IAAzF,GAA4GN,KAA5G,CAAyFM,IAAzF;AAAA,MAAkGC,KAAlG,6CAA4GP,KAA5G;AACA,MAAMQ,SAAS,GAAG,oCAAiBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,IAAlB,EAAwB;AAAEK,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,GAAX;AAAgBC,IAAAA,CAAC,EAAE;AAAnB,GAAxB,CAAjB,CAAlB;AACA,sBACE,qBAAC,2BAAD;AACE,IAAA,GAAG,EAAEZ;AADP,KAEMM,KAFN;AAGE,IAAA,SAAS,YAAKL,SAAL,cAAkBC,SAAS,IAAI,EAA/B,CAHX;AAIE,IAAA,IAAI,EAAE;AAAEW,MAAAA,CAAC,EAAER,IAAI,CAACQ,CAAV;AAAaF,MAAAA,CAAC,EAAE,GAAhB;AAAqBC,MAAAA,CAAC,EAAEP,IAAI,CAACO,CAA7B;AAAgCF,MAAAA,CAAC,EAAE,IAAIL,IAAI,CAACO,CAAL,GAAS;AAAhD,KAJR;AAKE,IAAA,SAAS,EAAER,SALb;AAME,IAAA,UAAU,+BAAwBA,SAAS,KAAK,YAAd,GAA6B,OAA7B,GAAuC,QAA/D,eAA4EG,SAA5E,oBANZ;AAOE,IAAA,QAAQ,EAAE,kBAACO,CAAD,EAAIC,WAAJ,EAAoB;AAC5BZ,MAAAA,SAAQ,IACNA,SAAQ,CAAC;AAAES,QAAAA,CAAC,EAAER,SAAS,KAAK,YAAd,GAA6B,MAAMW,WAAW,CAACC,IAAZ,GAAmB,GAAtD,GAA4D,MAAMD,WAAW,CAACE,GAAZ,GAAkB,GAAzF;AAA8FN,QAAAA,CAAC,EAAE;AAAjG,OAAD,CADV;AAED;AAVH,KADF;AAcD,CAjBmB,CAApB;;AAmBAf,WAAW,CAACsB,WAAZ,GAA0B,aAA1B;eAEetB,W",
  "sourcesContent": [
    "import React from 'react';\nimport { hsvaToHslaString } from '@uiw/color-convert';\nimport Alpha, { AlphaProps } from '@uiw/react-color-alpha';\n\nexport interface ShadeSliderProps extends Omit<AlphaProps, 'onChange'> {\n  onChange?: (newShade: { v: number; s: number }) => void;\n}\n\nconst ShadeSlider = React.forwardRef<HTMLDivElement, ShadeSliderProps>((props, ref) => {\n  const { prefixCls = 'w-color-saturation', className, onChange, direction = 'horizontal', hsva, ...other } = props;\n  const colorFrom = hsvaToHslaString(Object.assign({}, hsva, { a: 1, s: 100, v: 100 }));\n  return (\n    <Alpha\n      ref={ref}\n      {...other}\n      className={`${prefixCls} ${className || ''}`}\n      hsva={{ h: hsva.h, s: 100, v: hsva.v, a: 1 - hsva.v / 100 }}\n      direction={direction}\n      background={`linear-gradient(to ${direction === 'horizontal' ? 'right' : 'bottom'}, ${colorFrom}, rgb(0, 0, 0))`}\n      onChange={(_, interaction) => {\n        onChange &&\n          onChange({ v: direction === 'horizontal' ? 100 - interaction.left * 100 : 100 - interaction.top * 100, s: 100 });\n      }}\n    />\n  );\n});\n\nShadeSlider.displayName = 'ShadeSlider';\n\nexport default ShadeSlider;\n"
  ]
}