{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "hsvaToHslaString",
    "Alpha",
    "ShadeSlider",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "onChange",
    "direction",
    "hsva",
    "other",
    "colorFrom",
    "Object",
    "assign",
    "a",
    "s",
    "v",
    "h",
    "_",
    "interaction",
    "left",
    "top",
    "displayName"
  ],
  "mappings": ";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,OAAOC,KAAP,MAAkC,wBAAlC;;AAMA,IAAMC,WAAW,gBAAGH,KAAK,CAACI,UAAN,CAAmD,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACrF,MAAM;AAAEC,IAAAA,SAAS,GAAG,oBAAd;AAAoCC,IAAAA,SAApC;AAA+CC,IAAAA,QAAQ,EAARA,SAA/C;AAAyDC,IAAAA,SAAS,GAAG,YAArE;AAAmFC,IAAAA;AAAnF,MAAsGN,KAA5G;AAAA,MAAkGO,KAAlG,iCAA4GP,KAA5G;;AACA,MAAMQ,SAAS,GAAGZ,gBAAgB,CAACa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,IAAlB,EAAwB;AAAEK,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,GAAX;AAAgBC,IAAAA,CAAC,EAAE;AAAnB,GAAxB,CAAD,CAAlC;AACA,sBACE,KAAC,KAAD;AACE,IAAA,GAAG,EAAEZ;AADP,KAEMM,KAFN;AAGE,IAAA,SAAS,EAAKL,SAAL,UAAkBC,SAAS,IAAI,EAA/B,CAHX;AAIE,IAAA,IAAI,EAAE;AAAEW,MAAAA,CAAC,EAAER,IAAI,CAACQ,CAAV;AAAaF,MAAAA,CAAC,EAAE,GAAhB;AAAqBC,MAAAA,CAAC,EAAEP,IAAI,CAACO,CAA7B;AAAgCF,MAAAA,CAAC,EAAE,IAAIL,IAAI,CAACO,CAAL,GAAS;AAAhD,KAJR;AAKE,IAAA,SAAS,EAAER,SALb;AAME,IAAA,UAAU,2BAAwBA,SAAS,KAAK,YAAd,GAA6B,OAA7B,GAAuC,QAA/D,WAA4EG,SAA5E,oBANZ;AAOE,IAAA,QAAQ,EAAE,CAACO,CAAD,EAAIC,WAAJ,KAAoB;AAC5BZ,MAAAA,SAAQ,IACNA,SAAQ,CAAC;AAAES,QAAAA,CAAC,EAAER,SAAS,KAAK,YAAd,GAA6B,MAAMW,WAAW,CAACC,IAAZ,GAAmB,GAAtD,GAA4D,MAAMD,WAAW,CAACE,GAAZ,GAAkB,GAAzF;AAA8FN,QAAAA,CAAC,EAAE;AAAjG,OAAD,CADV;AAED;AAVH,KADF;AAcD,CAjBmB,CAApB;AAmBAd,WAAW,CAACqB,WAAZ,GAA0B,aAA1B;AAEA,eAAerB,WAAf",
  "sourcesContent": [
    "import React from 'react';\nimport { hsvaToHslaString } from '@uiw/color-convert';\nimport Alpha, { AlphaProps } from '@uiw/react-color-alpha';\n\nexport interface ShadeSliderProps extends Omit<AlphaProps, 'onChange'> {\n  onChange?: (newShade: { v: number; s: number }) => void;\n}\n\nconst ShadeSlider = React.forwardRef<HTMLDivElement, ShadeSliderProps>((props, ref) => {\n  const { prefixCls = 'w-color-saturation', className, onChange, direction = 'horizontal', hsva, ...other } = props;\n  const colorFrom = hsvaToHslaString(Object.assign({}, hsva, { a: 1, s: 100, v: 100 }));\n  return (\n    <Alpha\n      ref={ref}\n      {...other}\n      className={`${prefixCls} ${className || ''}`}\n      hsva={{ h: hsva.h, s: 100, v: hsva.v, a: 1 - hsva.v / 100 }}\n      direction={direction}\n      background={`linear-gradient(to ${direction === 'horizontal' ? 'right' : 'bottom'}, ${colorFrom}, rgb(0, 0, 0))`}\n      onChange={(_, interaction) => {\n        onChange &&\n          onChange({ v: direction === 'horizontal' ? 100 - interaction.left * 100 : 100 - interaction.top * 100, s: 100 });\n      }}\n    />\n  );\n});\n\nShadeSlider.displayName = 'ShadeSlider';\n\nexport default ShadeSlider;\n"
  ]
}