"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ChromeInputType = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _colorConvert = require("@uiw/color-convert");

var _reactColorGithub = _interopRequireWildcard(require("@uiw/react-color-github"));

var _reactColorSaturation = _interopRequireDefault(require("@uiw/react-color-saturation"));

var _reactColorHue = _interopRequireDefault(require("@uiw/react-color-hue"));

var _reactColorAlpha = _interopRequireDefault(require("@uiw/react-color-alpha"));

var _reactColorEditableInput = _interopRequireDefault(require("@uiw/react-color-editable-input"));

var _reactColorEditableInputRgba = _interopRequireDefault(require("@uiw/react-color-editable-input-rgba"));

var _reactColorEditableInputHsla = _interopRequireDefault(require("@uiw/react-color-editable-input-hsla"));

var _Arrow = _interopRequireDefault(require("./Arrow"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "className", "style", "color", "inputType", "rectProps", "onChange"];
var ChromeInputType;
exports.ChromeInputType = ChromeInputType;

(function (ChromeInputType) {
  ChromeInputType["HEXA"] = "hexa";
  ChromeInputType["RGBA"] = "rgba";
  ChromeInputType["HSLA"] = "hsla";
})(ChromeInputType || (exports.ChromeInputType = ChromeInputType = {}));

var Chrome = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-color-chrome' : _props$prefixCls,
      className = props.className,
      style = props.style,
      color = props.color,
      _props$inputType = props.inputType,
      inputType = _props$inputType === void 0 ? ChromeInputType.RGBA : _props$inputType,
      _props$rectProps = props.rectProps,
      rectProps = _props$rectProps === void 0 ? {} : _props$rectProps,
      onChange = props.onChange,
      other = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var hsva = typeof color === 'string' && (0, _colorConvert.validHex)(color) ? (0, _colorConvert.hexToHsva)(color) : color || {
    h: 0,
    s: 0,
    l: 0,
    a: 0
  };

  var handleChange = function handleChange(hsv) {
    return onChange && onChange((0, _colorConvert.color)(hsv));
  };

  var _useState = (0, _react.useState)(inputType),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      type = _useState2[0],
      setType = _useState2[1];

  var handleClick = function handleClick() {
    if (type === ChromeInputType.RGBA) {
      setType(ChromeInputType.HSLA);
    }

    if (type === ChromeInputType.HSLA) {
      setType(ChromeInputType.HEXA);
    }

    if (type === ChromeInputType.HEXA) {
      setType(ChromeInputType.RGBA);
    }
  };

  var labelStyle = {
    paddingTop: 6
  };
  var inputStyle = {
    textAlign: 'center',
    paddingTop: 4,
    paddingBottom: 4
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactColorGithub["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    ref: ref,
    color: hsva,
    style: {
      borderRadius: 0,
      flexDirection: 'column',
      width: 230,
      padding: 0
    },
    colors: undefined,
    className: [prefixCls, className].filter(Boolean).join(' '),
    placement: _reactColorGithub.GithubPlacement.TopLeft
  }, other), {}, {
    addonAfter: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactColorSaturation["default"], {
        hsva: hsva,
        style: {
          width: '100%',
          height: 130
        },
        onChange: function onChange(newColor) {
          handleChange((0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, hsva), newColor), {}, {
            a: hsva.a
          }));
        }
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        style: {
          padding: 15,
          display: 'flex',
          alignItems: 'center'
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactColorAlpha["default"], {
          width: 24,
          height: 24,
          hsva: hsva,
          radius: 2,
          style: {
            marginRight: 15,
            borderRadius: '50%'
          },
          bgProps: {
            style: {
              background: 'transparent'
            }
          },
          innerProps: {
            style: {
              borderRadius: '50%',
              background: (0, _colorConvert.hsvaToRgbaString)(hsva),
              boxShadow: 'rgb(0 0 0 / 25%) 0px 0px 1px inset'
            }
          },
          pointer: function pointer() {
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.Fragment, {});
          }
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          style: {
            flex: 1
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactColorHue["default"], {
            hue: hsva.h,
            style: {
              width: '100%'
            },
            bgProps: {
              style: {
                borderRadius: 2
              }
            },
            onChange: function onChange(newHue) {
              handleChange((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, hsva), newHue));
            }
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactColorAlpha["default"], {
            hsva: hsva,
            style: {
              marginTop: 10
            },
            bgProps: {
              style: {
                borderRadius: 2
              }
            },
            onChange: function onChange(newAlpha) {
              handleChange((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, hsva), newAlpha));
            }
          })]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        style: {
          display: 'flex',
          alignItems: 'flex-start',
          padding: '0 15px 15px 15px',
          userSelect: 'none'
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
          style: {
            flex: 1
          },
          children: [type == ChromeInputType.RGBA && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactColorEditableInputRgba["default"], {
            hsva: hsva,
            rProps: {
              labelStyle: labelStyle,
              inputStyle: inputStyle
            },
            gProps: {
              labelStyle: labelStyle,
              inputStyle: inputStyle
            },
            bProps: {
              labelStyle: labelStyle,
              inputStyle: inputStyle
            },
            aProps: {
              labelStyle: labelStyle,
              inputStyle: inputStyle
            },
            onChange: function onChange(reColor) {
              return handleChange(reColor.hsva);
            }
          }), type === ChromeInputType.HEXA && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactColorEditableInput["default"], {
            label: "HEX",
            labelStyle: labelStyle,
            inputStyle: inputStyle,
            value: hsva.a > 0 && hsva.a < 1 ? (0, _colorConvert.hsvaToHexa)(hsva).toLocaleUpperCase() : (0, _colorConvert.hsvaToHex)(hsva).toLocaleUpperCase(),
            onChange: function onChange(_, value) {
              if (typeof value === 'string') {
                handleChange((0, _colorConvert.hexToHsva)(/^#/.test(value) ? value : "#".concat(value)));
              }
            }
          }), type === ChromeInputType.HSLA && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactColorEditableInputHsla["default"], {
            hsva: hsva,
            hProps: {
              labelStyle: labelStyle,
              inputStyle: inputStyle
            },
            sProps: {
              labelStyle: labelStyle,
              inputStyle: inputStyle
            },
            lProps: {
              labelStyle: labelStyle,
              inputStyle: inputStyle
            },
            aProps: {
              labelStyle: labelStyle,
              inputStyle: inputStyle
            },
            onChange: function onChange(reColor) {
              return handleChange(reColor.hsva);
            }
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Arrow["default"], {
          onClick: handleClick
        })]
      })]
    }),
    rectRender: function rectRender(_ref) {
      var key = _ref.key;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.Fragment, {}, key);
    }
  }));
});

Chrome.displayName = 'Chrome';
var _default = Chrome;
exports["default"] = _default;
//# sourceMappingURL=index.js.map