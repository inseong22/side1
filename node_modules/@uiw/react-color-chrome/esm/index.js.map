{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "Fragment",
    "hsvaToRgbaString",
    "color",
    "handleColor",
    "validHex",
    "hexToHsva",
    "hsvaToHex",
    "hsvaToHexa",
    "Github",
    "GithubPlacement",
    "Saturation",
    "Hue",
    "Alpha",
    "EditableInput",
    "EditableInputRGBA",
    "EditableInputHSLA",
    "useState",
    "Arrow",
    "ChromeInputType",
    "Chrome",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "inputType",
    "RGBA",
    "rectProps",
    "onChange",
    "other",
    "hsva",
    "h",
    "s",
    "l",
    "a",
    "handleChange",
    "hsv",
    "type",
    "setType",
    "handleClick",
    "HSLA",
    "HEXA",
    "labelStyle",
    "paddingTop",
    "inputStyle",
    "textAlign",
    "paddingBottom",
    "borderRadius",
    "flexDirection",
    "width",
    "padding",
    "undefined",
    "filter",
    "Boolean",
    "join",
    "TopLeft",
    "height",
    "newColor",
    "display",
    "alignItems",
    "marginRight",
    "style",
    "background",
    "boxShadow",
    "flex",
    "newHue",
    "marginTop",
    "newAlpha",
    "userSelect",
    "reColor",
    "toLocaleUpperCase",
    "_",
    "value",
    "test",
    "key",
    "displayName"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { Fragment } from 'react';\nimport {\n  HsvaColor,\n  hsvaToRgbaString,\n  color as handleColor,\n  validHex,\n  hexToHsva,\n  hsvaToHex,\n  hsvaToHexa,\n} from '@uiw/color-convert';\nimport Github, { GithubProps, GithubPlacement } from '@uiw/react-color-github';\nimport Saturation from '@uiw/react-color-saturation';\nimport Hue from '@uiw/react-color-hue';\nimport Alpha from '@uiw/react-color-alpha';\nimport EditableInput from '@uiw/react-color-editable-input';\nimport EditableInputRGBA from '@uiw/react-color-editable-input-rgba';\nimport EditableInputHSLA from '@uiw/react-color-editable-input-hsla';\nimport { useState } from 'react';\nimport Arrow from './Arrow';\n\nexport enum ChromeInputType {\n  HEXA = 'hexa',\n  RGBA = 'rgba',\n  HSLA = 'hsla',\n}\n\nexport interface ChromeProps extends Omit<GithubProps, 'colors'> {\n  inputType?: ChromeInputType;\n}\n\nconst Chrome = React.forwardRef<HTMLDivElement, ChromeProps>((props, ref) => {\n  const {\n    prefixCls = 'w-color-chrome',\n    className,\n    style,\n    color,\n    inputType = ChromeInputType.RGBA,\n    rectProps = {},\n    onChange,\n    ...other\n  } = props;\n  const hsva = (\n    typeof color === 'string' && validHex(color) ? hexToHsva(color) : color || { h: 0, s: 0, l: 0, a: 0 }\n  ) as HsvaColor;\n  const handleChange = (hsv: HsvaColor) => onChange && onChange(handleColor(hsv));\n  const [type, setType] = useState(inputType);\n  const handleClick = () => {\n    if (type === ChromeInputType.RGBA) {\n      setType(ChromeInputType.HSLA);\n    }\n    if (type === ChromeInputType.HSLA) {\n      setType(ChromeInputType.HEXA);\n    }\n    if (type === ChromeInputType.HEXA) {\n      setType(ChromeInputType.RGBA);\n    }\n  };\n  const labelStyle: React.CSSProperties = { paddingTop: 6 };\n  const inputStyle: React.CSSProperties = { textAlign: 'center', paddingTop: 4, paddingBottom: 4 };\n  return (\n    <Github\n      ref={ref}\n      color={hsva}\n      style={{ borderRadius: 0, flexDirection: 'column', width: 230, padding: 0 }}\n      colors={undefined}\n      className={[prefixCls, className].filter(Boolean).join(' ')}\n      placement={GithubPlacement.TopLeft}\n      {...other}\n      addonAfter={\n        <Fragment>\n          <Saturation\n            hsva={hsva}\n            style={{ width: '100%', height: 130 }}\n            onChange={(newColor) => {\n              handleChange({ ...hsva, ...newColor, a: hsva.a });\n            }}\n          />\n          <div style={{ padding: 15, display: 'flex', alignItems: 'center' }}>\n            <Alpha\n              width={24}\n              height={24}\n              hsva={hsva}\n              radius={2}\n              style={{\n                marginRight: 15,\n                borderRadius: '50%',\n              }}\n              bgProps={{ style: { background: 'transparent' } }}\n              innerProps={{\n                style: {\n                  borderRadius: '50%',\n                  background: hsvaToRgbaString(hsva),\n                  boxShadow: 'rgb(0 0 0 / 25%) 0px 0px 1px inset',\n                },\n              }}\n              pointer={() => <Fragment />}\n            />\n            <div style={{ flex: 1 }}>\n              <Hue\n                hue={hsva.h}\n                style={{ width: '100%' }}\n                bgProps={{\n                  style: { borderRadius: 2 },\n                }}\n                onChange={(newHue) => {\n                  handleChange({ ...hsva, ...newHue });\n                }}\n              />\n              <Alpha\n                hsva={hsva}\n                style={{ marginTop: 10 }}\n                bgProps={{\n                  style: { borderRadius: 2 },\n                }}\n                onChange={(newAlpha) => {\n                  handleChange({ ...hsva, ...newAlpha });\n                }}\n              />\n            </div>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'flex-start', padding: '0 15px 15px 15px', userSelect: 'none' }}>\n            <div style={{ flex: 1 }}>\n              {type == ChromeInputType.RGBA && (\n                <EditableInputRGBA\n                  hsva={hsva}\n                  rProps={{ labelStyle, inputStyle }}\n                  gProps={{ labelStyle, inputStyle }}\n                  bProps={{ labelStyle, inputStyle }}\n                  aProps={{ labelStyle, inputStyle }}\n                  onChange={(reColor) => handleChange(reColor.hsva)}\n                />\n              )}\n              {type === ChromeInputType.HEXA && (\n                <EditableInput\n                  label=\"HEX\"\n                  labelStyle={labelStyle}\n                  inputStyle={inputStyle}\n                  value={hsva.a > 0 && hsva.a < 1 ? hsvaToHexa(hsva).toLocaleUpperCase() : hsvaToHex(hsva).toLocaleUpperCase()}\n                  onChange={(_, value) => {\n                    if (typeof value === 'string') {\n                      handleChange(hexToHsva(/^#/.test(value) ? value : `#${value}`));\n                    }\n                  }}\n                />\n              )}\n              {type === ChromeInputType.HSLA && (\n                <EditableInputHSLA\n                  hsva={hsva}\n                  hProps={{ labelStyle, inputStyle }}\n                  sProps={{ labelStyle, inputStyle }}\n                  lProps={{ labelStyle, inputStyle }}\n                  aProps={{ labelStyle, inputStyle }}\n                  onChange={(reColor) => handleChange(reColor.hsva)}\n                />\n              )}\n            </div>\n            <Arrow onClick={handleClick} />\n          </div>\n        </Fragment>\n      }\n      rectRender={({ key }) => <Fragment key={key} />}\n    />\n  );\n});\n\nChrome.displayName = 'Chrome';\n\nexport default Chrome;\n"
  ]
}