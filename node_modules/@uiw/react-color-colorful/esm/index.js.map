{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "validHex",
    "color",
    "handleColor",
    "hexToHsva",
    "hsvaToHex",
    "hsvaToRgbaString",
    "Alpha",
    "BACKGROUND_IMG",
    "Saturation",
    "Hue",
    "Pointer",
    "style",
    "props",
    "height",
    "width",
    "position",
    "transform",
    "boxShadow",
    "borderRadius",
    "background",
    "backgroundColor",
    "border",
    "zIndex",
    "Colorful",
    "forwardRef",
    "ref",
    "prefixCls",
    "className",
    "onChange",
    "other",
    "hsva",
    "handleChange",
    "value",
    "minWidth",
    "borderBottom",
    "left",
    "top",
    "newColor",
    "h",
    "newHue",
    "newAlpha",
    "displayName"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport {\n  validHex,\n  color as handleColor,\n  hexToHsva,\n  HsvaColor,\n  ColorResult,\n  hsvaToHex,\n  hsvaToRgbaString,\n} from '@uiw/color-convert';\nimport Alpha, { BACKGROUND_IMG } from '@uiw/react-color-alpha';\nimport Saturation from '@uiw/react-color-saturation';\nimport Hue from '@uiw/react-color-hue';\n\nexport interface ColorfulProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'color'> {\n  prefixCls?: string;\n  onChange?: (color: ColorResult) => void;\n  color?: string | HsvaColor;\n}\n\nconst Pointer = ({ style, color, ...props }: React.HTMLAttributes<HTMLDivElement> & { color: string }) => (\n  <div\n    {...props}\n    style={{\n      height: 28,\n      width: 28,\n      position: 'absolute',\n      transform: 'translate(-14px, -4px)',\n      boxShadow: '0 2px 4px rgb(0 0 0 / 20%)',\n      borderRadius: '50%',\n      background: `url(${BACKGROUND_IMG})`,\n      backgroundColor: '#fff',\n      border: '2px solid #fff',\n      zIndex: 1,\n      ...style,\n    }}\n  >\n    <div\n      style={{\n        backgroundColor: color,\n        borderRadius: '50%',\n        height: ' 100%',\n        width: '100%',\n      }}\n    />\n  </div>\n);\n\nconst Colorful = React.forwardRef<HTMLDivElement, ColorfulProps>((props, ref) => {\n  const { prefixCls = 'w-color-colorful', className, onChange, color, style, ...other } = props;\n  const hsva = (typeof color === 'string' && validHex(color) ? hexToHsva(color) : color || {}) as HsvaColor;\n  const handleChange = (value: HsvaColor) => onChange && onChange(handleColor(value));\n  return (\n    <div\n      ref={ref}\n      style={{\n        width: 200,\n        position: 'relative',\n        ...style,\n      }}\n      {...other}\n      className={`${prefixCls} ${className || ''}`}\n    >\n      <Saturation\n        hsva={hsva}\n        className={prefixCls}\n        radius=\"8px 8px 0 0\"\n        style={{ width: 'auto', height: 150, minWidth: 120, borderBottom: '12px solid #000' }}\n        pointer={({ left, top, color }) => (\n          <Pointer style={{ left, top, transform: 'translate(-16px, -16px)' }} color={hsvaToHex(hsva)} />\n        )}\n        onChange={(newColor) => handleChange({ ...hsva, ...newColor })}\n      />\n      <Hue\n        hue={hsva.h}\n        height={24}\n        className={prefixCls}\n        onChange={(newHue) => handleChange({ ...hsva, ...newHue })}\n        pointer={({ left }) => <Pointer style={{ left }} color={`hsl(${hsva.h || 0}deg 100% 50%)`} />}\n      />\n      <Alpha\n        hsva={hsva}\n        height={24}\n        className={prefixCls}\n        radius=\"0 0 8px 8px\"\n        pointer={({ left }) => <Pointer style={{ left }} color={hsvaToRgbaString(hsva)} />}\n        onChange={(newAlpha) => handleChange({ ...hsva, ...newAlpha })}\n      />\n    </div>\n  );\n});\n\nColorful.displayName = 'Colorful';\n\nexport default Colorful;\n"
  ]
}