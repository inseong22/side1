{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "Pointer",
    "style",
    "color",
    "props",
    "height",
    "width",
    "position",
    "transform",
    "boxShadow",
    "borderRadius",
    "background",
    "BACKGROUND_IMG",
    "backgroundColor",
    "border",
    "zIndex",
    "Colorful",
    "React",
    "forwardRef",
    "ref",
    "prefixCls",
    "className",
    "onChange",
    "other",
    "hsva",
    "handleChange",
    "value",
    "minWidth",
    "borderBottom",
    "left",
    "top",
    "newColor",
    "h",
    "newHue",
    "newAlpha",
    "displayName"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport {\n  validHex,\n  color as handleColor,\n  hexToHsva,\n  HsvaColor,\n  ColorResult,\n  hsvaToHex,\n  hsvaToRgbaString,\n} from '@uiw/color-convert';\nimport Alpha, { BACKGROUND_IMG } from '@uiw/react-color-alpha';\nimport Saturation from '@uiw/react-color-saturation';\nimport Hue from '@uiw/react-color-hue';\n\nexport interface ColorfulProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'color'> {\n  prefixCls?: string;\n  onChange?: (color: ColorResult) => void;\n  color?: string | HsvaColor;\n}\n\nconst Pointer = ({ style, color, ...props }: React.HTMLAttributes<HTMLDivElement> & { color: string }) => (\n  <div\n    {...props}\n    style={{\n      height: 28,\n      width: 28,\n      position: 'absolute',\n      transform: 'translate(-14px, -4px)',\n      boxShadow: '0 2px 4px rgb(0 0 0 / 20%)',\n      borderRadius: '50%',\n      background: `url(${BACKGROUND_IMG})`,\n      backgroundColor: '#fff',\n      border: '2px solid #fff',\n      zIndex: 1,\n      ...style,\n    }}\n  >\n    <div\n      style={{\n        backgroundColor: color,\n        borderRadius: '50%',\n        height: ' 100%',\n        width: '100%',\n      }}\n    />\n  </div>\n);\n\nconst Colorful = React.forwardRef<HTMLDivElement, ColorfulProps>((props, ref) => {\n  const { prefixCls = 'w-color-colorful', className, onChange, color, style, ...other } = props;\n  const hsva = (typeof color === 'string' && validHex(color) ? hexToHsva(color) : color || {}) as HsvaColor;\n  const handleChange = (value: HsvaColor) => onChange && onChange(handleColor(value));\n  return (\n    <div\n      ref={ref}\n      style={{\n        width: 200,\n        position: 'relative',\n        ...style,\n      }}\n      {...other}\n      className={`${prefixCls} ${className || ''}`}\n    >\n      <Saturation\n        hsva={hsva}\n        className={prefixCls}\n        radius=\"8px 8px 0 0\"\n        style={{ width: 'auto', height: 150, minWidth: 120, borderBottom: '12px solid #000' }}\n        pointer={({ left, top, color }) => (\n          <Pointer style={{ left, top, transform: 'translate(-16px, -16px)' }} color={hsvaToHex(hsva)} />\n        )}\n        onChange={(newColor) => handleChange({ ...hsva, ...newColor })}\n      />\n      <Hue\n        hue={hsva.h}\n        height={24}\n        className={prefixCls}\n        onChange={(newHue) => handleChange({ ...hsva, ...newHue })}\n        pointer={({ left }) => <Pointer style={{ left }} color={`hsl(${hsva.h || 0}deg 100% 50%)`} />}\n      />\n      <Alpha\n        hsva={hsva}\n        height={24}\n        className={prefixCls}\n        radius=\"0 0 8px 8px\"\n        pointer={({ left }) => <Pointer style={{ left }} color={hsvaToRgbaString(hsva)} />}\n        onChange={(newAlpha) => handleChange({ ...hsva, ...newAlpha })}\n      />\n    </div>\n  );\n});\n\nColorful.displayName = 'Colorful';\n\nexport default Colorful;\n"
  ]
}