{
  "version": 3,
  "sources": [
    "../src/utils.ts"
  ],
  "names": [
    "TAU",
    "Math",
    "PI",
    "mod",
    "a",
    "n",
    "dist",
    "x",
    "y",
    "sqrt",
    "getWheelDimensions",
    "width",
    "r",
    "radius",
    "cx",
    "cy",
    "isInputInsideWheel",
    "props",
    "getWheelHandlePosition",
    "hsv",
    "handleRange",
    "getHandleRange",
    "handleAngle",
    "translateWheelAngle",
    "h",
    "handleDist",
    "s",
    "direction",
    "cos",
    "sin",
    "angle",
    "invert",
    "wheelAngle",
    "getWheelValueFromInput",
    "hue",
    "atan2",
    "min",
    "round"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { HsvColor } from '@uiw/color-convert';\nimport { WheelProps } from './';\n\nconst TAU = Math.PI * 2;\n\n/**\n * javascript's modulo operator doesn't produce positive numbers with negative input\n * https://www.geeksforgeeks.org/how-to-get-negative-result-using-modulo-operator-in-javascript/\n */\nexport const mod = (a: number, n: number) => ((a % n) + n) % n;\n\n/** distance between points (x, y) and (0, 0) */\nconst dist = (x: number, y: number) => Math.sqrt(x * x + y * y);\n\n/**\n * Get the point as the center of the wheel\n */\nexport function getWheelDimensions({ width = 0 }: Partial<WheelProps>) {\n  const r = width / 2;\n  return {\n    width,\n    radius: r,\n    cx: r,\n    cy: r,\n  };\n}\n\n/**\n * Returns true if point (x, y) lands inside the wheel\n */\nexport function isInputInsideWheel(props: Partial<WheelProps>, x: number, y: number) {\n  const { cx, cy, width } = getWheelDimensions(props);\n  const r = width / 2;\n  return dist(cx - x, cy - y) < r;\n}\n\n/**\n * Get the current handle position for a given color\n */\nexport function getWheelHandlePosition(props: Partial<WheelProps>, hsv: HsvColor) {\n  const { cx, cy } = getWheelDimensions(props);\n  const handleRange = getHandleRange(props);\n  const handleAngle = (180 + translateWheelAngle(props, hsv.h, true)) * (TAU / 360);\n  const handleDist = (hsv.s / 100) * handleRange;\n  const direction = props.direction === 'clockwise' ? -1 : 1;\n  return {\n    x: cx + handleDist * Math.cos(handleAngle) * direction,\n    y: cy + handleDist * Math.sin(handleAngle) * direction,\n  };\n}\n\n/**\n * Get Range\n */\nexport function getHandleRange({ width = 0 }: Partial<WheelProps>) {\n  return width / 2;\n}\n\n/**\n * Translate an angle according to wheelAngle and wheelDirection\n */\nexport function translateWheelAngle(props: Partial<WheelProps>, angle: number, invert?: boolean) {\n  const wheelAngle = props.angle || 0;\n  const direction = props.direction;\n  // inverted and clockwisee\n  if (invert && direction === 'clockwise') angle = wheelAngle + angle;\n  // clockwise (input handling)\n  else if (direction === 'clockwise') angle = 360 - wheelAngle + angle;\n  // inverted and anticlockwise\n  else if (invert && direction === 'anticlockwise') angle = wheelAngle + 180 - angle;\n  // anticlockwise (input handling)\n  else if (direction === 'anticlockwise') angle = wheelAngle - angle;\n  return mod(angle, 360);\n}\n\n/**\n * Get the current wheel value from user input\n * @param props - wheel props\n * @param x - global input x position\n * @param y - global input y position\n */\nexport function getWheelValueFromInput(props: Partial<WheelProps>, x: number, y: number) {\n  const { cx, cy } = getWheelDimensions(props);\n  const handleRange = getHandleRange(props);\n  x = cx - x;\n  y = cy - y;\n  // Calculate the hue by converting the angle to radians\n  const hue = translateWheelAngle(props, Math.atan2(-y, -x) * (360 / TAU));\n  // Find the point's distance from the center of the wheel\n  // This is used to show the saturation level\n  const handleDist = Math.min(dist(x, y), handleRange);\n  return {\n    h: Math.round(hue),\n    s: Math.round((100 / handleRange) * handleDist),\n  };\n}\n"
  ]
}