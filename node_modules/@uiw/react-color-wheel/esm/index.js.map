{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "validHex",
    "hexToHsva",
    "hsvaToHex",
    "color",
    "handleColor",
    "Interactive",
    "Pointer",
    "getWheelHandlePosition",
    "getWheelValueFromInput",
    "HUE_GRADIENT_CLOCKWISE",
    "HUE_GRADIENT_ANTICLOCKWISE",
    "Wheel",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "radius",
    "pointer",
    "className",
    "style",
    "width",
    "height",
    "direction",
    "angle",
    "onChange",
    "other",
    "hsva",
    "hex",
    "positions",
    "comProps",
    "top",
    "left",
    "handleChange",
    "interaction",
    "event",
    "result",
    "x",
    "y",
    "handleHsva",
    "h",
    "s",
    "v",
    "a",
    "filter",
    "Boolean",
    "join",
    "position",
    "createElement",
    "zIndex",
    "transform",
    "borderRadius",
    "background",
    "inset",
    "backgroundColor",
    "opacity",
    "displayName"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport { HsvaColor, ColorResult, validHex, hexToHsva, hsvaToHex, color as handleColor } from '@uiw/color-convert';\nimport Interactive, { Interaction } from '@uiw/react-drag-event-interactive';\nimport { Pointer, PointerProps } from './Pointer';\nimport { getWheelHandlePosition, getWheelValueFromInput } from './utils';\n\nexport interface WheelProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'color'> {\n  prefixCls?: string;\n  color?: string | HsvaColor;\n  width?: number;\n  height?: number;\n  radius?: React.CSSProperties['borderRadius'];\n  /** Starting angle of the color wheel's hue gradient, measured in degrees. */\n  angle?: number;\n  /** Direction of the color wheel's hue gradient; either clockwise or anticlockwise. Default: `anticlockwise` */\n  direction?: 'clockwise' | 'anticlockwise';\n  pointer?: ({ prefixCls, left, top, color }: PointerProps) => JSX.Element;\n  onChange?: (color: ColorResult) => void;\n}\n\nconst HUE_GRADIENT_CLOCKWISE = 'conic-gradient(red, yellow, lime, aqua, blue, magenta, red)';\nconst HUE_GRADIENT_ANTICLOCKWISE = 'conic-gradient(red, magenta, blue, aqua, lime, yellow, red)';\n\nconst Wheel = React.forwardRef<HTMLDivElement, WheelProps>((props, ref) => {\n  const {\n    prefixCls = 'w-color-wheel',\n    radius = 0,\n    pointer,\n    className,\n    style,\n    width = 200,\n    height = 200,\n    direction = 'anticlockwise',\n    angle = 180,\n    color,\n    onChange,\n    ...other\n  } = props;\n  const hsva = (typeof color === 'string' && validHex(color) ? hexToHsva(color) : color || {}) as HsvaColor;\n  const hex = color ? hsvaToHex(hsva) : '';\n  const positions = getWheelHandlePosition({ width }, hsva);\n  const comProps = {\n    top: '0',\n    left: '0',\n    color: hex,\n  };\n  const handleChange = (interaction: Interaction, event: MouseEvent | TouchEvent) => {\n    const result = getWheelValueFromInput({ width }, width - interaction.x, height - interaction.y);\n    const handleHsva = {\n      h: result.h,\n      s: result.s,\n      v: hsva.v,\n      a: hsva.a,\n    };\n    onChange && onChange(handleColor(handleHsva));\n  };\n  return (\n    <Interactive\n      className={[prefixCls, className || ''].filter(Boolean).join(' ')}\n      {...other}\n      style={{\n        ...style,\n        position: 'relative',\n        width,\n        height,\n      }}\n      ref={ref}\n      onMove={handleChange}\n      onDown={handleChange}\n    >\n      {React.createElement(pointer || Pointer, {\n        prefixCls,\n        style: {\n          zIndex: 1,\n          transform: `translate(${positions.x}px, ${positions.y}px)`,\n        },\n        ...comProps,\n      })}\n      <div\n        style={{\n          position: 'absolute',\n          borderRadius: '50%',\n          background: direction === 'anticlockwise' ? HUE_GRADIENT_CLOCKWISE : HUE_GRADIENT_ANTICLOCKWISE,\n          transform: `rotateZ(${angle + 90}deg)`,\n          inset: 0,\n        }}\n      />\n      <div\n        style={{\n          position: 'absolute',\n          borderRadius: '50%',\n          background: 'radial-gradient(circle closest-side, #fff, transparent)',\n          inset: 0,\n        }}\n      />\n      <div\n        style={{\n          backgroundColor: '#000',\n          borderRadius: '50%',\n          position: 'absolute',\n          inset: 0,\n          opacity: typeof hsva.v === 'number' ? 1 - hsva.v / 100 : 0,\n        }}\n      />\n    </Interactive>\n  );\n});\n\nWheel.displayName = 'Wheel';\n\nexport default Wheel;\n"
  ]
}