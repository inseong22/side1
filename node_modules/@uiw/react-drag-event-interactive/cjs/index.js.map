{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "Interactive",
    "React",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "onMove",
    "onDown",
    "reset",
    "container",
    "hasTouched",
    "isDragging",
    "setDragging",
    "onMoveCallback",
    "onKeyCallback",
    "isValid",
    "event",
    "current",
    "handleMove",
    "isDown",
    "touches",
    "length",
    "buttons",
    "handleMoveEnd",
    "toggleDocumentEvents",
    "state",
    "toggleEvent",
    "window",
    "addEventListener",
    "removeEventListener",
    "handleMoveStart",
    "nativeEvent",
    "filter",
    "Boolean",
    "join",
    "style",
    "touchAction",
    "displayName"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { isTouch, preventDefaultMove, getRelativePosition, Interaction, useEventCallback } from './utils';\n\nexport * from './utils';\n\nexport interface InteractiveProps extends React.HTMLAttributes<HTMLDivElement> {\n  prefixCls?: string;\n  onMove?: (interaction: Interaction, event: MouseEvent | TouchEvent) => void;\n  onDown?: (offset: Interaction, event: MouseEvent | TouchEvent) => void;\n}\n\nconst Interactive = React.forwardRef<HTMLDivElement, InteractiveProps>((props, ref) => {\n  const { prefixCls = 'w-color-interactive', className, onMove, onDown, ...reset } = props;\n  const container = useRef<HTMLDivElement>(null);\n  const hasTouched = useRef(false);\n  const [isDragging, setDragging] = useState(false);\n  const onMoveCallback = useEventCallback<Interaction, MouseEvent | TouchEvent>(onMove);\n  const onKeyCallback = useEventCallback<Interaction, MouseEvent | TouchEvent>(onDown);\n\n  // Prevent mobile browsers from handling mouse events (conflicting with touch ones).\n  // If we detected a touch interaction before, we prefer reacting to touch events only.\n  const isValid = (event: MouseEvent | TouchEvent): boolean => {\n    if (hasTouched.current && !isTouch(event)) return false;\n    hasTouched.current = isTouch(event);\n    return true;\n  };\n\n  const handleMove = useCallback(\n    (event: MouseEvent | TouchEvent) => {\n      preventDefaultMove(event);\n      // If user moves the pointer outside of the window or iframe bounds and release it there,\n      // `mouseup`/`touchend` won't be fired. In order to stop the picker from following the cursor\n      // after the user has moved the mouse/finger back to the document, we check `event.buttons`\n      // and `event.touches`. It allows us to detect that the user is just moving his pointer\n      // without pressing it down\n      const isDown = isTouch(event) ? event.touches.length > 0 : event.buttons > 0;\n      if (isDown && container.current) {\n        onMoveCallback && onMoveCallback(getRelativePosition(container.current!, event), event);\n      } else {\n        setDragging(false);\n      }\n    },\n    [onMoveCallback],\n  );\n\n  const handleMoveEnd = useCallback(() => setDragging(false), []);\n  const toggleDocumentEvents = useCallback((state: boolean) => {\n    const toggleEvent = state ? window.addEventListener : window.removeEventListener;\n    toggleEvent(hasTouched.current ? 'touchmove' : 'mousemove', handleMove);\n    toggleEvent(hasTouched.current ? 'touchend' : 'mouseup', handleMoveEnd);\n  }, []);\n\n  useEffect(() => {\n    toggleDocumentEvents(isDragging);\n    return () => {\n      isDragging && toggleDocumentEvents(false);\n    };\n  }, [isDragging, toggleDocumentEvents]);\n\n  const handleMoveStart = useCallback(\n    (event: React.MouseEvent | React.TouchEvent) => {\n      preventDefaultMove(event.nativeEvent);\n      if (!isValid(event.nativeEvent)) return;\n      onKeyCallback && onKeyCallback(getRelativePosition(container.current!, event.nativeEvent), event.nativeEvent);\n      setDragging(true);\n    },\n    [onKeyCallback],\n  );\n\n  return (\n    <div\n      {...reset}\n      className={[prefixCls, className || ''].filter(Boolean).join(' ')}\n      style={{\n        ...reset.style,\n        touchAction: 'none',\n      }}\n      ref={container}\n      tabIndex={0}\n      onMouseDown={handleMoveStart}\n      onTouchStart={handleMoveStart}\n    />\n  );\n});\n\nInteractive.displayName = 'Interactive';\n\nexport default Interactive;\n"
  ]
}