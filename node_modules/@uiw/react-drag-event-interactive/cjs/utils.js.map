{
  "version": 3,
  "sources": [
    "../src/utils.ts"
  ],
  "names": [
    "useEventCallback",
    "handler",
    "callbackRef",
    "current",
    "value",
    "event",
    "isTouch",
    "preventDefaultMove",
    "preventDefault",
    "clamp",
    "number",
    "min",
    "max",
    "getRelativePosition",
    "node",
    "rect",
    "getBoundingClientRect",
    "pointer",
    "touches",
    "left",
    "pageX",
    "window",
    "pageXOffset",
    "width",
    "top",
    "pageY",
    "pageYOffset",
    "height",
    "x",
    "y"
  ],
  "mappings": ";;;;;;;;AAAA;;AAEA;AACO,SAASA,gBAAT,CAAgCC,OAAhC,EAAsG;AAC3G,MAAMC,WAAW,GAAG,mBAAOD,OAAP,CAApB;AAEA,wBAAU,YAAM;AACdC,IAAAA,WAAW,CAACC,OAAZ,GAAsBF,OAAtB;AACD,GAFD;AAIA,SAAO,wBAAY,UAACG,KAAD,EAAWC,KAAX;AAAA,WAAwBH,WAAW,CAACC,OAAZ,IAAuBD,WAAW,CAACC,OAAZ,CAAoBC,KAApB,EAA2BC,KAA3B,CAA/C;AAAA,GAAZ,EAA8F,EAA9F,CAAP;AACD,C,CAED;;;AACO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACD,KAAD;AAAA,SAAyD,aAAaA,KAAtE;AAAA,CAAhB,C,CAEP;AACA;AACA;;;;;AACO,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACF,KAAD,EAA0C;AAC1E,GAACC,OAAO,CAACD,KAAD,CAAR,IAAmBA,KAAK,CAACG,cAAzB,IAA2CH,KAAK,CAACG,cAAN,EAA3C;AACD,CAFM,C,CAGP;AACA;AACA;;;;;AACO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,MAAD,EAA8C;AAAA,MAA7BC,GAA6B,uEAAvB,CAAuB;AAAA,MAApBC,GAAoB,uEAAd,CAAc;AACjE,SAAOF,MAAM,GAAGE,GAAT,GAAeA,GAAf,GAAqBF,MAAM,GAAGC,GAAT,GAAeA,GAAf,GAAqBD,MAAjD;AACD,CAFM;;;;AAaP;AACO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAuBT,KAAvB,EAAuE;AACxG,MAAMU,IAAI,GAAGD,IAAI,CAACE,qBAAL,EAAb,CADwG,CAGxG;;AACA,MAAMC,OAAO,GAAGX,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAK,CAACa,OAAN,CAAc,CAAd,CAAjB,GAAqCb,KAArD;AAEA,SAAO;AACLc,IAAAA,IAAI,EAAEV,KAAK,CAAC,CAACQ,OAAO,CAACG,KAAR,IAAiBL,IAAI,CAACI,IAAL,GAAYE,MAAM,CAACC,WAApC,CAAD,IAAqDP,IAAI,CAACQ,KAA3D,CADN;AAELC,IAAAA,GAAG,EAAEf,KAAK,CAAC,CAACQ,OAAO,CAACQ,KAAR,IAAiBV,IAAI,CAACS,GAAL,GAAWH,MAAM,CAACK,WAAnC,CAAD,IAAoDX,IAAI,CAACY,MAA1D,CAFL;AAGLJ,IAAAA,KAAK,EAAER,IAAI,CAACQ,KAHP;AAILI,IAAAA,MAAM,EAAEZ,IAAI,CAACY,MAJR;AAKLC,IAAAA,CAAC,EAAEX,OAAO,CAACG,KAAR,IAAiBL,IAAI,CAACI,IAAL,GAAYE,MAAM,CAACC,WAApC,CALE;AAMLO,IAAAA,CAAC,EAAEZ,OAAO,CAACQ,KAAR,IAAiBV,IAAI,CAACS,GAAL,GAAWH,MAAM,CAACK,WAAnC;AANE,GAAP;AAQD,CAdM",
  "sourcesContent": [
    "import { useRef, useEffect, useCallback, useLayoutEffect } from 'react';\n\n// Saves incoming handler to the ref in order to avoid \"useCallback hell\"\nexport function useEventCallback<T, K>(handler?: (value: T, event: K) => void): (value: T, event: K) => void {\n  const callbackRef = useRef(handler);\n\n  useEffect(() => {\n    callbackRef.current = handler;\n  });\n\n  return useCallback((value: T, event: K) => callbackRef.current && callbackRef.current(value, event), []);\n}\n\n// Check if an event was triggered by touch\nexport const isTouch = (event: MouseEvent | TouchEvent): event is TouchEvent => 'touches' in event;\n\n// Browsers introduced an intervention, making touch events passive by default.\n// This workaround removes `preventDefault` call from the touch handlers.\n// https://github.com/facebook/react/issues/19651\nexport const preventDefaultMove = (event: MouseEvent | TouchEvent): void => {\n  !isTouch(event) && event.preventDefault && event.preventDefault();\n};\n// Clamps a value between an upper and lower bound.\n// We use ternary operators because it makes the minified code\n// 2 times shorter then `Math.min(Math.max(a,b),c)`\nexport const clamp = (number: number, min = 0, max = 1): number => {\n  return number > max ? max : number < min ? min : number;\n};\n\nexport interface Interaction {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n}\n\n// Returns a relative position of the pointer inside the node's bounding box\nexport const getRelativePosition = (node: HTMLDivElement, event: MouseEvent | TouchEvent): Interaction => {\n  const rect = node.getBoundingClientRect();\n\n  // Get user's pointer position from `touches` array if it's a `TouchEvent`\n  const pointer = isTouch(event) ? event.touches[0] : (event as MouseEvent);\n\n  return {\n    left: clamp((pointer.pageX - (rect.left + window.pageXOffset)) / rect.width),\n    top: clamp((pointer.pageY - (rect.top + window.pageYOffset)) / rect.height),\n    width: rect.width,\n    height: rect.height,\n    x: pointer.pageX - (rect.left + window.pageXOffset),\n    y: pointer.pageY - (rect.top + window.pageYOffset),\n  };\n};\n"
  ]
}