{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "validHex",
    "hex",
    "test",
    "getNumberValue",
    "value",
    "Number",
    "String",
    "replace",
    "EditableInput",
    "React",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "placement",
    "label",
    "initValue",
    "className",
    "style",
    "labelStyle",
    "inputStyle",
    "onChange",
    "onBlur",
    "other",
    "setValue",
    "isFocus",
    "current",
    "handleChange",
    "evn",
    "valInit",
    "target",
    "val",
    "isNaN",
    "handleBlur",
    "placementStyle",
    "filter",
    "Boolean",
    "join",
    "position",
    "alignItems",
    "display",
    "fontSize",
    "width",
    "paddingTop",
    "paddingBottom",
    "paddingLeft",
    "paddingRight",
    "boxSizing",
    "border",
    "boxShadow",
    "color",
    "textTransform",
    "displayName"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport { useRef, useEffect, useState } from 'react';\n\nconst validHex = (hex: string): boolean => /^#?([A-Fa-f0-9]{3,4}){1,2}$/.test(hex);\nconst getNumberValue = (value: string) => Number(String(value).replace(/%/g, ''));\n\nexport interface EditableInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'> {\n  prefixCls?: string;\n  value?: string | number;\n  label?: React.ReactNode;\n  labelStyle?: React.CSSProperties;\n  placement?: 'top' | 'left' | 'bottom' | 'right';\n  inputStyle?: React.CSSProperties;\n  onChange?: (evn: React.ChangeEvent<HTMLInputElement>, value: string | number) => void;\n}\n\nconst EditableInput = React.forwardRef<HTMLInputElement, EditableInputProps>((props, ref) => {\n  const {\n    prefixCls = 'w-color-editable-input',\n    placement = 'bottom',\n    label,\n    value: initValue,\n    className,\n    style,\n    labelStyle,\n    inputStyle,\n    onChange,\n    onBlur,\n    ...other\n  } = props;\n  const [value, setValue] = useState<string | number | undefined>(initValue);\n  const isFocus = useRef(false);\n\n  useEffect(() => {\n    if (props.value !== value) {\n      if (!isFocus.current) {\n        setValue(props.value);\n      }\n    }\n  }, [props.value]);\n\n  function handleChange(evn: React.FocusEvent<HTMLInputElement>, valInit?: string) {\n    const value = valInit || evn.target.value;\n    if (validHex(value)) {\n      onChange && onChange(evn, value);\n    }\n    const val = getNumberValue(value);\n    if (!isNaN(val)) {\n      onChange && onChange(evn, val);\n    }\n    setValue(value);\n    // setValueProps(value);\n  }\n  function handleBlur(evn: React.FocusEvent<HTMLInputElement>) {\n    isFocus.current = false;\n    setValue(props.value);\n    onBlur && onBlur(evn);\n  }\n  const placementStyle: React.CSSProperties = {};\n  if (placement === 'bottom') {\n    placementStyle['flexDirection'] = 'column';\n  }\n  if (placement === 'top') {\n    placementStyle['flexDirection'] = 'column-reverse';\n  }\n  if (placement === 'left') {\n    placementStyle['flexDirection'] = 'row-reverse';\n  }\n  return (\n    <div\n      className={[prefixCls, className || ''].filter(Boolean).join(' ')}\n      style={{\n        position: 'relative',\n        alignItems: 'center',\n        display: 'flex',\n        fontSize: 11,\n        ...placementStyle,\n        ...style,\n      }}\n    >\n      <input\n        ref={ref}\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        autoComplete=\"off\"\n        onFocus={() => (isFocus.current = true)}\n        {...other}\n        style={{\n          width: '100%',\n          paddingTop: 2,\n          paddingBottom: 2,\n          paddingLeft: 3,\n          paddingRight: 3,\n          fontSize: 11,\n          boxSizing: 'border-box',\n          border: 'none',\n          boxShadow: 'rgb(204 204 204) 0px 0px 0px 1px inset',\n          ...inputStyle,\n        }}\n      />\n      {label && (\n        <span\n          style={{\n            color: 'rgb(153, 153, 153)',\n            textTransform: 'capitalize',\n            ...labelStyle,\n          }}\n          children={label}\n        />\n      )}\n    </div>\n  );\n});\n\nEditableInput.displayName = 'EditableInput';\n\nexport default EditableInput;\n"
  ]
}