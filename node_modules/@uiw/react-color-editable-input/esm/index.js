import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "placement", "label", "value", "className", "style", "labelStyle", "inputStyle", "onChange", "onBlur"];
import React from 'react';
import { useRef, useEffect, useState } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var validHex = hex => /^#?([A-Fa-f0-9]{3,4}){1,2}$/.test(hex);

var getNumberValue = value => Number(String(value).replace(/%/g, ''));

var EditableInput = /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    prefixCls = 'w-color-editable-input',
    placement = 'bottom',
    label,
    value: initValue,
    className,
    style,
    labelStyle,
    inputStyle,
    onChange,
    onBlur
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var [value, setValue] = useState(initValue);
  var isFocus = useRef(false);
  useEffect(() => {
    if (props.value !== value) {
      if (!isFocus.current) {
        setValue(props.value);
      }
    }
  }, [props.value]);

  function handleChange(evn, valInit) {
    var value = valInit || evn.target.value;

    if (validHex(value)) {
      onChange && onChange(evn, value);
    }

    var val = getNumberValue(value);

    if (!isNaN(val)) {
      onChange && onChange(evn, val);
    }

    setValue(value); // setValueProps(value);
  }

  function handleBlur(evn) {
    isFocus.current = false;
    setValue(props.value);
    onBlur && onBlur(evn);
  }

  var placementStyle = {};

  if (placement === 'bottom') {
    placementStyle['flexDirection'] = 'column';
  }

  if (placement === 'top') {
    placementStyle['flexDirection'] = 'column-reverse';
  }

  if (placement === 'left') {
    placementStyle['flexDirection'] = 'row-reverse';
  }

  return /*#__PURE__*/_jsxs("div", {
    className: [prefixCls, className || ''].filter(Boolean).join(' '),
    style: _extends({
      position: 'relative',
      alignItems: 'center',
      display: 'flex',
      fontSize: 11
    }, placementStyle, style),
    children: [/*#__PURE__*/_jsx("input", _extends({
      ref: ref,
      value: value,
      onChange: handleChange,
      onBlur: handleBlur,
      autoComplete: "off",
      onFocus: () => isFocus.current = true
    }, other, {
      style: _extends({
        width: '100%',
        paddingTop: 2,
        paddingBottom: 2,
        paddingLeft: 3,
        paddingRight: 3,
        fontSize: 11,
        boxSizing: 'border-box',
        border: 'none',
        boxShadow: 'rgb(204 204 204) 0px 0px 0px 1px inset'
      }, inputStyle)
    })), label && /*#__PURE__*/_jsx("span", {
      style: _extends({
        color: 'rgb(153, 153, 153)',
        textTransform: 'capitalize'
      }, labelStyle),
      children: label
    })]
  });
});
EditableInput.displayName = 'EditableInput';
export default EditableInput;
//# sourceMappingURL=index.js.map